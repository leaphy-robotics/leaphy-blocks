{"version":3,"sources":["../src/msg/translations/nl.ts","../src/msg/translations/en.ts","../src/msg/translations.ts","../src/generators/arduino.ts","../src/generators/arduino/i2c.ts","../src/generators/arduino/procedures.ts","../src/generators/arduino/arduino.ts","../src/generators/arduino/variable_blocks.ts","../src/generators/arduino/leaphy_extra.ts","../src/generators/arduino/leaphy_flitz.ts","../src/blocks/leaphy_original.ts","../src/generators/arduino/leaphy_original.ts","../src/generators/arduino/logic.ts","../src/generators/arduino/loops.ts","../src/generators/arduino/math.ts","../src/generators/arduino/text.ts","../src/generators/arduino/variables.ts","../src/categories/lists.ts","../src/generators/arduino/lists.ts","../src/generators/arduino/mesh.ts","../src/generators/arduino/rtc.ts","../src/blocks/extensions.ts","../src/blocks/lists.ts","../src/blocks/text.ts","../src/blocks/leaphy_common.ts","../src/blocks/leaphy_flitz.ts","../src/blocks/arduino.ts","../src/blocks/alternatives.ts","../src/blocks/mesh.ts","../src/blocks/rtc.ts","../src/blocks/blocks.ts","../src/theme/theme.ts","../src/categories/all.ts"],"sourcesContent":["const messages: Record<string, string> = {};\n\nmessages[\"SENSOREN_CATEGORY\"] = \"Sensoren\";\nmessages[\"ACTUATOREN_CATEGORY\"] = \"Actuatoren\";\nmessages[\"ADD_COMMENT\"] = \"Opmerking toevoegen\";\nmessages[\"ARD_ANALOGWRITE\"] = \"Zet PWM\";\nmessages[\"ARD_DIGITALWRITE\"] = \"Zet Digipin\";\nmessages[\"ARD_SET_MULTIPLEXER\"] = \"Stel digitale multiplexer in op pin\";\nmessages[\"ARD_PIN_WARN1\"] =\n    \"Pin %1 is nodig voor %2 als pin %3. Al gebruikt als %4.\";\nmessages[\"ARD_SERVO_READ\"] = \"Lees servo pin\";\nmessages[\"ARD_SERVO_REGULAR_WRITE\"] = \"Servo\";\nmessages[\"ARD_SERVO_ARM_WRITE\"] = \"Servo Arm\";\nmessages[\"ARD_SERVO_WRITE\"] = \"Servo\";\nmessages[\"ARD_SERVO_WRITE_DEG_180\"] = \"Â°\";\nmessages[\"ARD_SERVO_WRITE_TO\"] = \"op\";\nmessages[\"ARD_TIME_DELAY\"] = \"duurt\";\nmessages[\"ARD_TIME_DELAY_TIP\"] =\n    \"Wacht het gespecificeerde aantal milliseconden\";\nmessages[\"ARD_TIME_MS\"] = \"ms\"; // untranslated\nmessages[\"ARD_WRITE_TO\"] = \"op\";\nmessages[\"CANNOT_DELETE_VARIABLE_PROCEDURE\"] =\n    'De variabele \"%1\" kan niet verwijderd worden omdat die onderdeel uitmaakt van de definitie van de functie \"%2\"';\nmessages[\"CHANGE_VALUE_TITLE\"] = \"Waarde wijzigen:\";\nmessages[\"CLEAN_UP\"] = \"Blokken opschonen\";\nmessages[\"COLLAPSED_WARNINGS_WARNING\"] =\n    \"Samengevouwen blokken bevatten waarschuwingen.\";\nmessages[\"COLLAPSE_ALL\"] = \"Blokken samenvouwen\";\nmessages[\"COLLAPSE_BLOCK\"] = \"Blok samenvouwen\";\nmessages[\"COLOUR_BLEND_COLOUR1\"] = \"kleur 1\";\nmessages[\"COLOUR_BLEND_COLOUR2\"] = \"kleur 2\";\nmessages[\"COLOUR_BLEND_HELPURL\"] =\n    \"https://meyerweb.com/eric/tools/color-blend/#:::rgbp\"; // untranslated\nmessages[\"COLOUR_BLEND_RATIO\"] = \"verhouding\";\nmessages[\"COLOUR_BLEND_TITLE\"] = \"mengen\";\nmessages[\"COLOUR_BLEND_TOOLTIP\"] =\n    \"Mengt twee kleuren samen met een bepaalde verhouding (0.0 - 1.0).\";\nmessages[\"COLOUR_PICKER_HELPURL\"] = \"https://nl.wikipedia.org/wiki/Kleur\";\nmessages[\"COLOUR_PICKER_TOOLTIP\"] = \"Kies een kleur in het palet.\";\nmessages[\"COLOUR_RANDOM_HELPURL\"] = \"http://randomcolour.com\"; // untranslated\nmessages[\"COLOUR_RANDOM_TITLE\"] = \"willekeurige kleur\";\nmessages[\"COLOUR_RANDOM_TOOLTIP\"] = \"Kies een willekeurige kleur.\";\nmessages[\"COLOUR_RGB_BLUE\"] = \"blauw\";\nmessages[\"COLOUR_RGB_GREEN\"] = \"groen\";\nmessages[\"COLOUR_RGB_HELPURL\"] =\n    \"https://www.december.com/html/spec/colorpercompact.html\"; // untranslated\nmessages[\"COLOUR_RGB_RED\"] = \"rood\";\nmessages[\"COLOUR_RGB_AMBIENT\"] = \"omgeving\";\nmessages[\"COLOUR_RGB_TITLE\"] = \"kleuren met\";\nmessages[\"COLOUR_RGB_TOOLTIP\"] =\n    \"Maak een kleur met de opgegeven hoeveelheid rood, groen en blauw.  Alle waarden moeten tussen 0 en 100 liggen.\";\nmessages[\"CONTROLS_FLOW_STATEMENTS_HELPURL\"] =\n    \"https://github.com/google/blockly/wiki/Loops#loop-termination-blocks\"; // untranslated\nmessages[\"CONTROLS_FLOW_STATEMENTS_OPERATOR_BREAK\"] = \"uit lus breken\";\nmessages[\"CONTROLS_FLOW_STATEMENTS_OPERATOR_CONTINUE\"] =\n    \"doorgaan met de volgende iteratie van de lus\";\nmessages[\"CONTROLS_FLOW_STATEMENTS_TOOLTIP_BREAK\"] =\n    \"Uit de bovenliggende lus breken.\";\nmessages[\"CONTROLS_FLOW_STATEMENTS_TOOLTIP_CONTINUE\"] =\n    \"De rest van deze lus overslaan en doorgaan met de volgende herhaling.\";\nmessages[\"CONTROLS_FLOW_STATEMENTS_WARNING\"] =\n    \"Waarschuwing: dit blok mag alleen gebruikt worden in een lus.\";\nmessages[\"CONTROLS_FOREACH_HELPURL\"] =\n    \"https://github.com/google/blockly/wiki/Loops#for-each\"; // untranslated\nmessages[\"CONTROLS_FOREACH_TITLE\"] = \"voor ieder item %1 in lijst %2\";\nmessages[\"CONTROLS_FOREACH_TOOLTIP\"] =\n    'Voor ieder item in een lijst, stel de variabele \"%1\" in op het item en voer daarna opdrachten uit.';\nmessages[\"CONTROLS_FOR_HELPURL\"] =\n    \"https://github.com/google/blockly/wiki/Loops#count-with\"; // untranslated\nmessages[\"CONTROLS_FOR_TITLE\"] =\n    \"rekenen met %1 van %2 tot %3 in stappen van %4\";\nmessages[\"CONTROLS_FOR_TOOLTIP\"] =\n    'Laat de variabele \"%1\" de waarden aannemen van het beginnummer tot het laatste nummer, tellende met het opgegeven interval, en met uitvoering van de opgegeven blokken.';\nmessages[\"CONTROLS_IF_ELSEIF_TOOLTIP\"] =\n    \"Voeg een voorwaarde toe aan het als-blok.\";\nmessages[\"CONTROLS_IF_ELSE_TOOLTIP\"] =\n    \"Voeg een laatste, vang-alles conditie toe aan het als-statement.\";\nmessages[\"CONTROLS_IF_HELPURL\"] =\n    \"https://github.com/google/blockly/wiki/IfElse\"; // untranslated\nmessages[\"CONTROLS_IF_IF_TOOLTIP\"] =\n    'Voeg stukken toe, verwijder of wijzig de volgorde om dit \"als\"-blok te wijzigen.';\nmessages[\"CONTROLS_IF_MSG_ELSE\"] = \"anders\";\nmessages[\"CONTROLS_IF_MSG_ELSEIF\"] = \"anders als\";\nmessages[\"CONTROLS_IF_MSG_IF\"] = \"als\";\nmessages[\"CONTROLS_IF_MSG_THEN\"] = \"dan\";\nmessages[\"CONTROLS_IF_TOOLTIP_1\"] =\n    \"Als een waarde waar is, voer dan opdrachten uit.\";\nmessages[\"CONTROLS_IF_TOOLTIP_2\"] =\n    \"Als een waarde waar is, voert dan het eerste blok met opdrachten uit. Voer andere het tweede blok met opdrachten uit.\";\nmessages[\"CONTROLS_IF_TOOLTIP_3\"] =\n    \"Als de eerste waarde waar is, voer dan het eerste blok met opdrachten uit. Voer anders, als de tweede waarde waar is, het tweede blok met opdrachten uit.\";\nmessages[\"CONTROLS_IF_TOOLTIP_4\"] =\n    'Als de eerste waarde \"waar\" is, voer dan het eerste blok uit. Voer anders wanneer de tweede waarde \"waar\" is, het tweede blok uit. Als geen van beide waarden waar zijn, voer dan het laatste blok uit.';\nmessages[\"CONTROLS_REPEAT_FOREVER_TITLE\"] = \"herhaal voor altijd\";\nmessages[\"CONTROLS_REPEAT_HELPURL\"] =\n    \"https://nl.wikipedia.org/wiki/Repetitie_(informatica)#For_en_Foreach\";\nmessages[\"CONTROLS_REPEAT_INPUT_DO\"] = \"\";\nmessages[\"CONTROLS_REPEAT_TITLE\"] = \"herhaal %1 keer\";\nmessages[\"CONTROLS_REPEAT_TOOLTIP\"] =\n    \"Voer een aantal opdrachten meerdere keren uit.\";\nmessages[\"CONTROLS_WHILEUNTIL_HELPURL\"] =\n    \"https://github.com/google/blockly/wiki/Loops#repeat\"; // untranslated\nmessages[\"CONTROLS_WHILEUNTIL_OPERATOR_UNTIL\"] = \"herhalen totdat\";\nmessages[\"CONTROLS_WHILEUNTIL_OPERATOR_WHILE\"] = \"herhalen zolang\";\nmessages[\"CONTROLS_WHILEUNTIL_TOOLTIP_UNTIL\"] =\n    \"Terwijl een waarde onwaar is de volgende opdrachten uitvoeren.\";\nmessages[\"CONTROLS_WHILEUNTIL_TOOLTIP_WHILE\"] =\n    \"Terwijl een waarde waar is de volgende opdrachten uitvoeren.\";\nmessages[\"DELETE_ALL_BLOCKS\"] = \"Alle %1 blokken verwijderen?\";\nmessages[\"DELETE_BLOCK\"] = \"Blok verwijderen\";\nmessages[\"DELETE_VARIABLE\"] = 'Verwijder de variabele \"%1\"';\nmessages[\"DELETE_VARIABLE_CONFIRMATION\"] =\n    '%1 gebruiken van de variabele \"%2\" verwijderen?';\nmessages[\"DELETE_X_BLOCKS\"] = \"%1 blokken verwijderen\";\nmessages[\"DIALOG_CANCEL\"] = \"Annuleren\";\nmessages[\"DIALOG_OK\"] = \"OK\";\nmessages[\"DISABLE_BLOCK\"] = \"Blok uitschakelen\";\nmessages[\"DUPLICATE_BLOCK\"] = \"Dupliceren\";\nmessages[\"DUPLICATE_COMMENT\"] = \"Opmerking dupliceren\";\nmessages[\"ENABLE_BLOCK\"] = \"Blok inschakelen\";\nmessages[\"EXPAND_ALL\"] = \"Blokken uitvouwen\";\nmessages[\"EXPAND_BLOCK\"] = \"Blok uitvouwen\";\nmessages[\"EXTERNAL_INPUTS\"] = \"Externe invoer\";\nmessages[\"HELP\"] = \"Hulp\";\nmessages[\"INLINE_INPUTS\"] = \"Inline invoer\";\nmessages[\"LEAPHY_ANALOG_READ\"] = \"Lees anapin\";\nmessages[\"LEAPHY_BUZZ_BUZZ\"] = \"Buzz\"; // untranslated\nmessages[\"LEAPHY_BUZZ_HERTZ\"] = \"Hertz\"; // untranslated\nmessages[\"LEAPHY_BUZZ_MS\"] = \"ms\"; // untranslated\nmessages[\"LEAPHY_CLICK_CATEGORY\"] = \"Leaphy Click\"; // untranslated\nmessages[\"LEAPHY_COMPASS\"] = \"Lees kompas\";\nmessages[\"LEAPHY_DIGITAL_READ\"] = \"Lees digipin\";\nmessages[\"LEAPHY_CHOOSE_GAS\"] = \"Lees gas\";\nmessages[\"LEAPHY_DISPLAY_CLEAR\"] = \"Maak display leeg\";\nmessages[\"LEAPHY_DISPLAY_DISPLAY\"] = \"Toon op display\";\nmessages[\"LEAPHY_DISPLAY_PRINT\"] = \"Stel display in - Rg.\";\nmessages[\"LEAPHY_EXTRA_CATEGORY\"] = \"Leaphy Extra\"; // untranslated\nmessages[\"LEAPHY_FLITZ_CATEGORY\"] = \"Leaphy Flitz\"; // untranslated\nmessages[\"LEAPHY_FLITZ_LED\"] = \"Neuslamp -\";\nmessages[\"LEAPHY_FLITZ_LED_B\"] = \"Blauw\";\nmessages[\"LEAPHY_FLITZ_LED_G\"] = \"Groen\";\nmessages[\"LEAPHY_FLITZ_LED_R\"] = \"Rood\";\nmessages[\"LEAPHY_FUNCTIONS_CATEGORY\"] = \"Eigen blokken\";\nmessages[\"LEAPHY_GET_DISTANCE\"] = \"Lees afstand\";\nmessages[\"LEAPHY_TOF_GET_DISTANCE\"] = \"Lees ToF\";\nmessages[\"LEAPHY_GET_AIR_PRESSURE\"] = \"Lees luchtdruk\";\nmessages[\"LEAPHY_GET_GESTURE\"] = \"Lees gebaar\";\nmessages[\"LEAPHY_LED\"] = \"Led\";\nmessages[\"LEAPHY_LED_BASIC_BLUE\"] = \"B\";\nmessages[\"LEAPHY_LED_BASIC_GREEN\"] = \"G\";\nmessages[\"LEAPHY_LED_BASIC_LED\"] = \"Ledstrip - Zet aan - Led\";\nmessages[\"LEAPHY_LED_BASIC_RED\"] = \"R\";\nmessages[\"LEAPHY_LED_BLUE\"] = \"Blauw\";\nmessages[\"LEAPHY_LED_GREEN\"] = \"Groen\";\nmessages[\"LEAPHY_LED_RED\"] = \"Rood\";\nmessages[\"LEAPHY_LED_SET_LEDS\"] = \"Leds\";\nmessages[\"LEAPHY_LED_SET_PIN\"] = \"Pin\";\nmessages[\"LEAPHY_LED_SET_SPEEDVALUE\"] = \"Ledstrip - Demo - Snelheid\";\nmessages[\"LEAPHY_LED_SET_STRIP\"] = \"Ledstrip - Stel in\";\nmessages[\"LEAPHY_LED_STRIP_BREATHE\"] = \"Ademen\";\nmessages[\"LEAPHY_LED_STRIP_COLORGULF\"] = \"Kleur Golf\";\nmessages[\"LEAPHY_LED_STRIP_DEMO\"] = \"Ledstrip - Demo\";\nmessages[\"LEAPHY_LED_STRIP_GULF\"] = \"Golf\";\nmessages[\"LEAPHY_LED_STRIP_LIGHTBANK\"] = \"Lichtbank\";\nmessages[\"LEAPHY_LED_STRIP_RAINBOW\"] = \"Regenboog\";\nmessages[\"LEAPHY_MOTOR_A_DROPDOWN\"] = \"Motor_A\"; // untranslated\nmessages[\"LEAPHY_MOTOR_BACKWARD\"] = \"Achteruit\";\nmessages[\"LEAPHY_MOTOR_B_DROPDOWN\"] = \"Motor_B\"; // untranslated\nmessages[\"LEAPHY_MOTOR_DIRECTION\"] = \"Richting\";\nmessages[\"LEAPHY_MOTOR_FORWARD\"] = \"Vooruit\";\nmessages[\"LEAPHY_MOTOR_LEFT\"] = \"Links\";\nmessages[\"LEAPHY_MOTOR_LEFT_DROPDOWN\"] = \"Motor_L\"; // untranslated\nmessages[\"LEAPHY_MOTOR_RIGHT\"] = \"Rechts\";\nmessages[\"LEAPHY_MOTOR_RIGHT_DROPDOWN\"] = \"Motor_R\"; // untranslated\nmessages[\"LEAPHY_MOTOR_SPEED\"] = \"Snelheid\";\nmessages[\"LEAPHY_MOTOR_TYPE\"] = \"Zet\";\nmessages[\"LEAPHY_SERVO_SET\"] = \"Servo %1 met snelheid %2\";\nmessages[\"LEAPHY_SERVO_MOVE\"] = \"Servo richting %1 met snelheid %2\";\nmessages[\"LEAPHY_NUMBERS_CATEGORY\"] = \"Getal blokken\";\nmessages[\"LEAPHY_OPERATORS_CATEGORY\"] = \"Functies\";\nmessages[\"LEAPHY_ORIGINAL_CATEGORY\"] = \"Leaphy Original\"; // untranslated\nmessages[\"LEAPHY_READ_HAND\"] = \"Lees handsensor\";\nmessages[\"LEAPHY_READ_STOMACH\"] = \"Lees buiksensor\";\nmessages[\"LEAPHY_RGB_COLOR_BLUE\"] = \"B-255\";\nmessages[\"LEAPHY_RGB_COLOR_GREEN\"] = \"G-255\";\nmessages[\"LEAPHY_RGB_COLOR_RED\"] = \"R-255\";\nmessages[\"LEAPHY_RGB_RAW_COLOR_BLUE\"] = \"B-bron\";\nmessages[\"LEAPHY_RGB_RAW_COLOR_GREEN\"] = \"G-bron\";\nmessages[\"LEAPHY_RGB_RAW_COLOR_RED\"] = \"R-bron\";\nmessages[\"LEAPHY_RGB_READ_SENSOR\"] = \"Lees RGB Sensor\";\nmessages[\"LEAPHY_SERIAL_PRINT\"] = \"Toon op scherm\";\nmessages[\"LEAPHY_SERIAL_AVAILABLE\"] = \"Beschikbaar op scherm\";\nmessages[\"LEAPHY_SERIAL_READ_LINE\"] = \"Lees van scherm\";\nmessages[\"LEAPHY_SITUATION_CATEGORY\"] = \"Denk stappen\";\nmessages[\"LEAPHY_SONAR_READ_ECHO\"] = \"Echo\"; // untranslated\nmessages[\"LEAPHY_SONAR_READ_TRIG\"] = \"Lees afstand Trig\";\nmessages[\"LEAPHY_START\"] = \"Leaphy\"; // untranslated\nmessages[\"LEAPHY_STOMACH_SENSOR_TYPE1\"] = \"soort 1\";\nmessages[\"LEAPHY_STOMACH_SENSOR_TYPE2\"] = \"soort 2\";\nmessages[\"LEAPHY_UNO_CATEGORY\"] = \"Arduino Uno\"; // untranslated\nmessages[\"LEAPHY_VARIABLES_CATEGORY\"] = \"Variabelen\";\nmessages[\"LEAPHY_LISTS_CATEGORY\"] = \"Lijsten\";\nmessages[\"LEAPHY_LISTS_ADD\"] = \"voeg %1 toe aan %2\";\nmessages[\"LEAPHY_LISTS_DELETE\"] = \"verwijder %1 van %2\";\nmessages[\"LEAPHY_LISTS_CLEAR\"] = \"verwijder alles van %1\";\nmessages[\"LEAPHY_LISTS_INSERT\"] = \"voeg %1 in op %2 van %3\";\nmessages[\"LEAPHY_LISTS_REPLACE\"] = \"vervang %1 van %2 door %3\";\nmessages[\"LEAPHY_LISTS_GET\"] = \"waarde %1 van %2\";\nmessages[\"LEAPHY_LISTS_LENGTH\"] = \"lengte van %1\";\nmessages[\"LISTS_CREATE_EMPTY_HELPURL\"] =\n    \"https://github.com/google/blockly/wiki/Lists#create-empty-list\"; // untranslated\nmessages[\"LISTS_CREATE_EMPTY_TITLE\"] = \"maak een lege lijst\";\nmessages[\"LISTS_CREATE_EMPTY_TOOLTIP\"] =\n    \"Geeft een lijst terug met lengte 0, zonder items\";\nmessages[\"LISTS_CREATE_WITH_CONTAINER_TITLE_ADD\"] = \"lijst\";\nmessages[\"LISTS_CREATE_WITH_CONTAINER_TOOLTIP\"] =\n    \"Voeg stukken toe, verwijder ze of wijzig de volgorde om dit lijstblok aan te passen.\";\nmessages[\"LISTS_CREATE_WITH_HELPURL\"] =\n    \"https://github.com/google/blockly/wiki/Lists#create-list-with\"; // untranslated\nmessages[\"LISTS_CREATE_WITH_INPUT_WITH\"] = \"maak een lijst met\";\nmessages[\"LISTS_CREATE_WITH_ITEM_TOOLTIP\"] = \"Voeg iets toe aan de lijst.\";\nmessages[\"LISTS_CREATE_WITH_TOOLTIP\"] =\n    \"Maak een lijst met een willekeurig aantal items.\";\nmessages[\"LISTS_GET_INDEX_FIRST\"] = \"eerste\";\nmessages[\"LISTS_GET_INDEX_FROM_END\"] = \"# van einde\";\nmessages[\"LISTS_GET_INDEX_FROM_START\"] = \"#\";\nmessages[\"LISTS_GET_INDEX_GET\"] = \"haal op\";\nmessages[\"LISTS_GET_INDEX_GET_REMOVE\"] = \"haal op en verwijder\";\nmessages[\"LISTS_GET_INDEX_LAST\"] = \"laatste\";\nmessages[\"LISTS_GET_INDEX_RANDOM\"] = \"willekeurig\";\nmessages[\"LISTS_GET_INDEX_REMOVE\"] = \"verwijder\";\nmessages[\"LISTS_GET_INDEX_TAIL\"] = \"\"; // untranslated\nmessages[\"LISTS_GET_INDEX_TOOLTIP_GET_FIRST\"] =\n    \"Geeft het eerste item in een lijst terug.\";\nmessages[\"LISTS_GET_INDEX_TOOLTIP_GET_FROM\"] =\n    \"Geeft het item op de opgegeven positie in een lijst.\";\nmessages[\"LISTS_GET_INDEX_TOOLTIP_GET_LAST\"] =\n    \"Geeft het laatste item in een lijst terug.\";\nmessages[\"LISTS_GET_INDEX_TOOLTIP_GET_RANDOM\"] =\n    \"Geeft een willekeurig item uit een lijst.\";\nmessages[\"LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_FIRST\"] =\n    \"Geeft het laatste item in een lijst terug en verwijdert het.\";\nmessages[\"LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_FROM\"] =\n    \"Geeft het item op de opgegeven positie in een lijst terug en verwijdert het.\";\nmessages[\"LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_LAST\"] =\n    \"Geeft het laatste item uit een lijst terug en verwijdert het.\";\nmessages[\"LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_RANDOM\"] =\n    \"Geeft een willekeurig item in een lijst terug en verwijdert het.\";\nmessages[\"LISTS_GET_INDEX_TOOLTIP_REMOVE_FIRST\"] =\n    \"Verwijdert het eerste item in een lijst.\";\nmessages[\"LISTS_GET_INDEX_TOOLTIP_REMOVE_FROM\"] =\n    \"Verwijdert het item op de opgegeven positie in een lijst.\";\nmessages[\"LISTS_GET_INDEX_TOOLTIP_REMOVE_LAST\"] =\n    \"Verwijdert het laatste item uit een lijst.\";\nmessages[\"LISTS_GET_INDEX_TOOLTIP_REMOVE_RANDOM\"] =\n    \"Verwijdert een willekeurig item uit een lijst.\";\nmessages[\"LISTS_GET_SUBLIST_END_FROM_END\"] = \"naar # vanaf einde\";\nmessages[\"LISTS_GET_SUBLIST_END_FROM_START\"] = \"naar item\";\nmessages[\"LISTS_GET_SUBLIST_END_LAST\"] = \"naar laatste\";\nmessages[\"LISTS_GET_SUBLIST_HELPURL\"] =\n    \"https://github.com/google/blockly/wiki/Lists#getting-a-sublist\"; // untranslated\nmessages[\"LISTS_GET_SUBLIST_START_FIRST\"] = \"haal sublijst op vanaf eerste\";\nmessages[\"LISTS_GET_SUBLIST_START_FROM_END\"] =\n    \"haal sublijst op van positie vanaf einde\";\nmessages[\"LISTS_GET_SUBLIST_START_FROM_START\"] =\n    \"haal sublijst op vanaf positie\";\nmessages[\"LISTS_GET_SUBLIST_TAIL\"] = \"\"; // untranslated\nmessages[\"LISTS_GET_SUBLIST_TOOLTIP\"] =\n    \"Maakt een kopie van het opgegeven deel van de lijst.\";\nmessages[\"LISTS_INDEX_FROM_END_TOOLTIP\"] = \"Item %1 is het laatste item.\";\nmessages[\"LISTS_INDEX_FROM_START_TOOLTIP\"] = \"Item %1 is het eerste item.\";\nmessages[\"LISTS_INDEX_OF_FIRST\"] = \"zoek eerste voorkomen van item\";\nmessages[\"LISTS_INDEX_OF_HELPURL\"] =\n    \"https://github.com/google/blockly/wiki/Lists#getting-items-from-a-list\"; // untranslated\nmessages[\"LISTS_INDEX_OF_LAST\"] = \"zoek laatste voorkomen van item\";\nmessages[\"LISTS_INDEX_OF_TOOLTIP\"] =\n    \"Geeft de index terug van het eerste of laatste voorkomen van een item in de lijst. Geeft %1 terug als het item niet is gevonden.\";\nmessages[\"LISTS_INLIST\"] = \"in lijst\";\nmessages[\"LISTS_ISEMPTY_HELPURL\"] =\n    \"https://github.com/google/blockly/wiki/Lists#is-empty\"; // untranslated\nmessages[\"LISTS_ISEMPTY_TITLE\"] = \"%1 is leeg\";\nmessages[\"LISTS_ISEMPTY_TOOLTIP\"] = \"Geeft waar terug als de lijst leeg is.\";\nmessages[\"LISTS_LENGTH_HELPURL\"] =\n    \"https://github.com/google/blockly/wiki/Lists#length-of\"; // untranslated\nmessages[\"LISTS_LENGTH_TITLE\"] = \"lengte van %1\";\nmessages[\"LISTS_LENGTH_TOOLTIP\"] = \"Geeft de lengte van een lijst terug.\";\nmessages[\"LISTS_REPEAT_HELPURL\"] =\n    \"https://github.com/google/blockly/wiki/Lists#create-list-with\"; // untranslated\nmessages[\"LISTS_REPEAT_TITLE\"] = \"Maak lijst met item %1, %2 keer herhaald\";\nmessages[\"LISTS_REPEAT_TOOLTIP\"] =\n    \"Maakt een lijst die bestaat uit de opgegeven waarde, het opgegeven aantal keer herhaald.\";\nmessages[\"LISTS_REVERSE_HELPURL\"] =\n    \"https://github.com/google/blockly/wiki/Lists#reversing-a-list\"; // untranslated\nmessages[\"LISTS_REVERSE_MESSAGE0\"] = \"%1 omkeren\";\nmessages[\"LISTS_REVERSE_TOOLTIP\"] = \"Keert een kopie van een lijst om.\";\nmessages[\"LISTS_SET_INDEX_HELPURL\"] =\n    \"https://github.com/google/blockly/wiki/Lists#in-list--set\"; // untranslated\nmessages[\"LISTS_SET_INDEX_INPUT_TO\"] = \"als\";\nmessages[\"LISTS_SET_INDEX_INSERT\"] = \"tussenvoegen op\";\nmessages[\"LISTS_SET_INDEX_SET\"] = \"stel in\";\nmessages[\"LISTS_SET_INDEX_TOOLTIP_INSERT_FIRST\"] =\n    \"Voegt het item toe aan het begin van de lijst.\";\nmessages[\"LISTS_SET_INDEX_TOOLTIP_INSERT_FROM\"] =\n    \"Voegt het item op een opgegeven positie in een lijst in.\";\nmessages[\"LISTS_SET_INDEX_TOOLTIP_INSERT_LAST\"] =\n    \"Voeg het item aan het einde van een lijst toe.\";\nmessages[\"LISTS_SET_INDEX_TOOLTIP_INSERT_RANDOM\"] =\n    \"Voegt het item op een willekeurige positie in de lijst in.\";\nmessages[\"LISTS_SET_INDEX_TOOLTIP_SET_FIRST\"] =\n    \"Stelt het eerste item in een lijst in.\";\nmessages[\"LISTS_SET_INDEX_TOOLTIP_SET_FROM\"] =\n    \"Zet het item op de opgegeven positie in de lijst.\";\nmessages[\"LISTS_SET_INDEX_TOOLTIP_SET_LAST\"] =\n    \"Stelt het laatste item van een lijst in.\";\nmessages[\"LISTS_SET_INDEX_TOOLTIP_SET_RANDOM\"] =\n    \"Stelt een willekeurig item uit de lijst in.\";\nmessages[\"LISTS_SORT_HELPURL\"] =\n    \"https://github.com/google/blockly/wiki/Lists#sorting-a-list\"; // untranslated\nmessages[\"LISTS_SORT_ORDER_ASCENDING\"] = \"oplopend\";\nmessages[\"LISTS_SORT_ORDER_DESCENDING\"] = \"aflopend\";\nmessages[\"LISTS_SORT_TITLE\"] = \"sorteer %1 %2 %3\";\nmessages[\"LISTS_SORT_TOOLTIP\"] = \"Sorteer een kopie van een lijst.\";\nmessages[\"LISTS_SORT_TYPE_IGNORECASE\"] =\n    \"alfabetisch, negeer hoofd-/kleine letters\";\nmessages[\"LISTS_SORT_TYPE_NUMERIC\"] = \"numeriek\";\nmessages[\"LISTS_SORT_TYPE_TEXT\"] = \"alfabetisch\";\nmessages[\"LISTS_SPLIT_HELPURL\"] =\n    \"https://github.com/google/blockly/wiki/Lists#splitting-strings-and-joining-lists\"; // untranslated\nmessages[\"LISTS_SPLIT_LIST_FROM_TEXT\"] = \"lijst maken van tekst\";\nmessages[\"LISTS_SPLIT_TEXT_FROM_LIST\"] = \"tekst maken van lijst\";\nmessages[\"LISTS_SPLIT_TOOLTIP_JOIN\"] =\n    \"Lijst van tekstdelen samenvoegen in Ã©Ã©n stuk tekst, waarbij de tekstdelen gescheiden zijn door een scheidingsteken.\";\nmessages[\"LISTS_SPLIT_TOOLTIP_SPLIT\"] =\n    \"Tekst splitsen in een lijst van teksten op basis van een scheidingsteken.\";\nmessages[\"LISTS_SPLIT_WITH_DELIMITER\"] = \"met scheidingsteken\";\nmessages[\"LOGIC_BOOLEAN_FALSE\"] = \"0\";\nmessages[\"LOGIC_BOOLEAN_HELPURL\"] =\n    \"https://github.com/google/blockly/wiki/Logic#values\"; // untranslated\nmessages[\"LOGIC_BOOLEAN_TOOLTIP\"] = 'Geeft \"waar\" of \"onwaar\" terug.';\nmessages[\"LOGIC_BOOLEAN_TRUE\"] = \"1\";\nmessages[\"LOGIC_COMPARE_HELPURL\"] =\n    \"https://nl.wikipedia.org/wiki/Ongelijkheid_(wiskunde)\";\nmessages[\"LOGIC_COMPARE_TOOLTIP_EQ\"] =\n    'Geeft \"waar\", als beide waarden gelijk aan elkaar zijn.';\nmessages[\"LOGIC_COMPARE_TOOLTIP_GT\"] =\n    'Geeft \"waar\" terug als de eerste invoer meer is dan de tweede invoer.';\nmessages[\"LOGIC_COMPARE_TOOLTIP_GTE\"] =\n    'Geeft \"waar\" terug als de eerste invoer groter is of gelijk aan de tweede invoer.';\nmessages[\"LOGIC_COMPARE_TOOLTIP_LT\"] =\n    'Geeft \"waar\" als de eerste invoer kleiner is dan de tweede invoer.';\nmessages[\"LOGIC_COMPARE_TOOLTIP_LTE\"] =\n    'Geeft \"waar\" terug als de eerste invoer kleiner of gelijk is aan de tweede invoer.';\nmessages[\"LOGIC_COMPARE_TOOLTIP_NEQ\"] =\n    'Geeft \"waar\" terug als de waarden niet gelijk zijn aan elkaar.';\nmessages[\"LOGIC_NEGATE_HELPURL\"] =\n    \"https://github.com/google/blockly/wiki/Logic#not\"; // untranslated\nmessages[\"LOGIC_NEGATE_TITLE\"] = \"niet %1\";\nmessages[\"LOGIC_NEGATE_TOOLTIP\"] =\n    'Geeft \"waar\" terug als de invoer \"onwaar\" is. Geeft \"onwaar\" als de invoer \"waar\" is.';\nmessages[\"LOGIC_NULL\"] = \"niets\";\nmessages[\"LOGIC_NULL_HELPURL\"] = \"https://en.wikipedia.org/wiki/Nullable_type\"; // untranslated\nmessages[\"LOGIC_NULL_TOOLTIP\"] = \"Geeft niets terug.\";\nmessages[\"LOGIC_OPERATION_AND\"] = \"en\";\nmessages[\"LOGIC_OPERATION_HELPURL\"] =\n    \"https://github.com/google/blockly/wiki/Logic#logical-operations\"; // untranslated\nmessages[\"LOGIC_OPERATION_OR\"] = \"of\";\nmessages[\"LOGIC_OPERATION_TOOLTIP_AND\"] =\n    \"Geeft waar als beide waarden waar zijn.\";\nmessages[\"LOGIC_OPERATION_TOOLTIP_OR\"] =\n    'Geeft \"waar\" terug als in ieder geval Ã©Ã©n van de waarden waar is.';\nmessages[\"LOGIC_TERNARY_CONDITION\"] = \"test\";\nmessages[\"LOGIC_TERNARY_HELPURL\"] = \"https://en.wikipedia.org/wiki/%3F:\"; // untranslated\nmessages[\"LOGIC_TERNARY_IF_FALSE\"] = \"als onwaar\";\nmessages[\"LOGIC_TERNARY_IF_TRUE\"] = \"als waar\";\nmessages[\"LOGIC_TERNARY_TOOLTIP\"] =\n    'Test de voorwaarde in \"test\". Als de voorwaarde \"waar\" is, geef de waarde van \"als waar\" terug; geef anders de waarde van \"als onwaar\" terug.';\nmessages[\"MATH_ADDITION_SYMBOL\"] = \"+\"; // untranslated\nmessages[\"MATH_ARITHMETIC_HELPURL\"] = \"https://nl.wikipedia.org/wiki/Rekenen\";\nmessages[\"MATH_ARITHMETIC_TOOLTIP_ADD\"] = \"Geeft de som van 2 getallen.\";\nmessages[\"MATH_ARITHMETIC_TOOLTIP_DIVIDE\"] =\n    \"Geeft de gedeelde waarde van twee getallen.\";\nmessages[\"MATH_ARITHMETIC_TOOLTIP_MINUS\"] =\n    \"Geeft het verschil van de twee getallen.\";\nmessages[\"MATH_ARITHMETIC_TOOLTIP_MULTIPLY\"] =\n    \"Geeft het product terug van de twee getallen.\";\nmessages[\"MATH_ARITHMETIC_TOOLTIP_POWER\"] =\n    \"Geeft het eerste getal tot de macht van het tweede getal.\";\nmessages[\"MATH_ATAN2_HELPURL\"] = \"https://en.wikipedia.org/wiki/Atan2\"; // untranslated\nmessages[\"MATH_ATAN2_TITLE\"] = \"atan2 van X:%1 Y:%2\";\nmessages[\"MATH_ATAN2_TOOLTIP\"] =\n    \"Geef de boogtangens van punt (X, Y) terug in graden tussen -180 naar 180.\";\nmessages[\"MATH_CHANGE_HELPURL\"] =\n    \"https://en.wikipedia.org/wiki/Programming_idiom#Incrementing_a_counter\"; // untranslated\nmessages[\"MATH_CHANGE_TITLE\"] = \"wijzig %1 met %2\";\nmessages[\"MATH_CHANGE_TOOLTIP\"] = 'Voegt een getal toe aan variabele \"%1\".';\nmessages[\"MATH_CONSTANT_HELPURL\"] =\n    \"https://nl.wikipedia.org/wiki/Wiskundige_constante\";\nmessages[\"MATH_CONSTANT_TOOLTIP\"] =\n    \"Geeft een van de vaak voorkomende constante waardes:  Ï (3.141â¦), e (2.718â¦), Ï (1.618â¦), â2 (1.414â¦), âÂ½ (0.707â¦), of â (oneindig).\";\nmessages[\"MATH_CONSTRAIN_HELPURL\"] =\n    \"https://en.wikipedia.org/wiki/Clamping_(graphics)\"; // untranslated\nmessages[\"MATH_CONSTRAIN_TITLE\"] = \"beperk %1 van minimaal %2 tot maximaal %3\";\nmessages[\"MATH_CONSTRAIN_TOOLTIP\"] =\n    \"Beperk een getal tussen de twee opgegeven limieten (inclusief).\";\nmessages[\"MATH_DIVISION_SYMBOL\"] = \"Ã·\"; // untranslated\nmessages[\"MATH_IS_DIVISIBLE_BY\"] = \"is deelbaar door\";\nmessages[\"MATH_IS_EVEN\"] = \"is even\";\nmessages[\"MATH_IS_NEGATIVE\"] = \"is negatief\";\nmessages[\"MATH_IS_ODD\"] = \"is oneven\";\nmessages[\"MATH_IS_POSITIVE\"] = \"is positief\";\nmessages[\"MATH_IS_PRIME\"] = \"is priemgetal\";\nmessages[\"MATH_IS_TOOLTIP\"] =\n    'Test of een getal even, oneven, een priemgetal, geheel, positief of negatief is, of deelbaar is door een bepaald getal. Geeft \"waar\" of \"onwaar\".';\nmessages[\"MATH_IS_WHOLE\"] = \"is geheel getal\";\nmessages[\"MATH_MODULO_HELPURL\"] =\n    \"https://nl.wikipedia.org/wiki/Modulair_rekenen\";\nmessages[\"MATH_MODULO_TITLE\"] = \"restgetal van %1 Ã· %2\";\nmessages[\"MATH_MODULO_TOOLTIP\"] =\n    \"Geeft het restgetal van het resultaat van de deling van de twee getallen.\";\nmessages[\"MATH_MULTIPLICATION_SYMBOL\"] = \"Ã\"; // untranslated\nmessages[\"MATH_NUMBER_HELPURL\"] =\n    \"https://nl.wikipedia.org/wiki/Getal_%28wiskunde%29\";\nmessages[\"MATH_NUMBER_TOOLTIP\"] = \"Een getal.\";\nmessages[\"MATH_ONLIST_HELPURL\"] = \"\"; // untranslated\nmessages[\"MATH_ONLIST_OPERATOR_AVERAGE\"] = \"gemiddelde van lijst\";\nmessages[\"MATH_ONLIST_OPERATOR_MAX\"] = \"hoogste uit lijst\";\nmessages[\"MATH_ONLIST_OPERATOR_MEDIAN\"] = \"mediaan van lijst\";\nmessages[\"MATH_ONLIST_OPERATOR_MIN\"] = \"laagste uit lijst\";\nmessages[\"MATH_ONLIST_OPERATOR_MODE\"] = \"modi van lijst\";\nmessages[\"MATH_ONLIST_OPERATOR_RANDOM\"] = \"willekeurige item van lijst\";\nmessages[\"MATH_ONLIST_OPERATOR_STD_DEV\"] = \"standaarddeviatie van lijst\";\nmessages[\"MATH_ONLIST_OPERATOR_SUM\"] = \"som van lijst\";\nmessages[\"MATH_ONLIST_TOOLTIP_AVERAGE\"] =\n    \"Geeft het gemiddelde terug van de numerieke waardes in een lijst.\";\nmessages[\"MATH_ONLIST_TOOLTIP_MAX\"] = \"Geeft het grootste getal in een lijst.\";\nmessages[\"MATH_ONLIST_TOOLTIP_MEDIAN\"] = \"Geeft de mediaan in de lijst.\";\nmessages[\"MATH_ONLIST_TOOLTIP_MIN\"] = \"Geeft het kleinste getal uit een lijst.\";\nmessages[\"MATH_ONLIST_TOOLTIP_MODE\"] =\n    \"Geeft een lijst van de meest voorkomende onderdelen in de lijst.\";\nmessages[\"MATH_ONLIST_TOOLTIP_RANDOM\"] =\n    \"Geeft een willekeurig item uit de lijst terug.\";\nmessages[\"MATH_ONLIST_TOOLTIP_STD_DEV\"] =\n    \"Geeft de standaardafwijking van de lijst.\";\nmessages[\"MATH_ONLIST_TOOLTIP_SUM\"] =\n    \"Geeft de som van alle getallen in de lijst.\";\nmessages[\"MATH_POWER_SYMBOL\"] = \"^\"; // untranslated\nmessages[\"MATH_RANDOM_FLOAT_HELPURL\"] =\n    \"https://nl.wikipedia.org/wiki/Toevalsgenerator\";\nmessages[\"MATH_RANDOM_FLOAT_TITLE_RANDOM\"] = \"willekeurige fractie\";\nmessages[\"MATH_RANDOM_FLOAT_TOOLTIP\"] =\n    \"Geeft een willekeurige fractie tussen 0.0 (inclusief) en 1.0 (exclusief).\";\nmessages[\"MATH_RANDOM_INT_HELPURL\"] =\n    \"https://nl.wikipedia.org/wiki/Toevalsgenerator\";\nmessages[\"MATH_RANDOM_INT_TITLE\"] = \"willekeurig getal van %1 tot %2\";\nmessages[\"MATH_RANDOM_INT_TOOLTIP\"] =\n    \"Geeft een willekeurig getal tussen de 2 opgegeven limieten in, inclusief.\";\nmessages[\"MATH_ROUND_HELPURL\"] = \"https://nl.wikipedia.org/wiki/Afronden\";\nmessages[\"MATH_ROUND_OPERATOR_ROUND\"] = \"afronden\";\nmessages[\"MATH_ROUND_OPERATOR_ROUNDDOWN\"] = \"naar beneden afronden\";\nmessages[\"MATH_ROUND_OPERATOR_ROUNDUP\"] = \"omhoog afronden\";\nmessages[\"MATH_ROUND_TOOLTIP\"] = \"Rondt een getal af omhoog of naar beneden.\";\nmessages[\"MATH_SINGLE_HELPURL\"] =\n    \"https://nl.wikipedia.org/wiki/Vierkantswortel\";\nmessages[\"MATH_SINGLE_OP_ABSOLUTE\"] = \"absoluut\";\nmessages[\"MATH_SINGLE_OP_ROOT\"] = \"wortel\";\nmessages[\"MATH_SINGLE_TOOLTIP_ABS\"] = \"Geeft de absolute waarde van een getal.\";\nmessages[\"MATH_SINGLE_TOOLTIP_EXP\"] = \"Geeft e tot de macht van een getal.\";\nmessages[\"MATH_SINGLE_TOOLTIP_LN\"] =\n    \"Geeft het natuurlijk logaritme van een getal.\";\nmessages[\"MATH_SINGLE_TOOLTIP_LOG10\"] =\n    \"Geeft het logaritme basis 10 van een getal.\";\nmessages[\"MATH_SINGLE_TOOLTIP_NEG\"] = \"Geeft de negatief van een getal.\";\nmessages[\"MATH_SINGLE_TOOLTIP_POW10\"] = \"Geeft 10 tot de macht van een getal.\";\nmessages[\"MATH_SINGLE_TOOLTIP_ROOT\"] = \"Geeft de wortel van een getal.\";\nmessages[\"MATH_SUBTRACTION_SYMBOL\"] = \"-\"; // untranslated\nmessages[\"MATH_TRIG_ACOS\"] = \"acos\";\nmessages[\"MATH_TRIG_ASIN\"] = \"asin\";\nmessages[\"MATH_TRIG_ATAN\"] = \"arctan\";\nmessages[\"MATH_TRIG_COS\"] = \"cos\";\nmessages[\"MATH_TRIG_HELPURL\"] =\n    \"https://nl.wikipedia.org/wiki/Goniometrische_functie\";\nmessages[\"MATH_TRIG_SIN\"] = \"sin\";\nmessages[\"MATH_TRIG_TAN\"] = \"tan\";\nmessages[\"MATH_TRIG_TOOLTIP_ACOS\"] = \"Geeft de arccosinus van een getal.\";\nmessages[\"MATH_TRIG_TOOLTIP_ASIN\"] = \"Geeft de arcsinus van een getal.\";\nmessages[\"MATH_TRIG_TOOLTIP_ATAN\"] = \"Geeft de arctangens van een getal.\";\nmessages[\"MATH_TRIG_TOOLTIP_COS\"] =\n    \"Geeft de cosinus van een graad (geen radialen).\";\nmessages[\"MATH_TRIG_TOOLTIP_SIN\"] =\n    \"Geeft de sinus van een graad (geen radialen).\";\nmessages[\"MATH_TRIG_TOOLTIP_TAN\"] =\n    \"Geeft de tangens van een graad (geen radialen).\";\nmessages[\"NEW_COLOUR_VARIABLE\"] = \"CreÃ«er kleurvariabele\";\nmessages[\"NEW_NUMBER_VARIABLE\"] = \"CreÃ«er numeriek variabele\";\nmessages[\"NEW_STRING_VARIABLE\"] = \"CreÃ«er tekstvariabele\";\nmessages[\"NEW_VARIABLE\"] = \"Variabele maken...\";\nmessages[\"NEW_VARIABLE_TITLE\"] = \"Nieuwe variabelenaam:\";\nmessages[\"NEW_VARIABLE_TYPE_TITLE\"] = \"Nieuw soort variabele\";\nmessages[\"ORDINAL_NUMBER_SUFFIX\"] = \"\"; // untranslated\nmessages[\"PROCEDURES_ALLOW_STATEMENTS\"] = \"statements toestaan\";\nmessages[\"PROCEDURES_BEFORE_PARAMS\"] = \"met:\";\nmessages[\"PROCEDURES_CALLNORETURN_HELPURL\"] =\n    \"https://nl.wikipedia.org/wiki/Subprogramma\";\nmessages[\"PROCEDURES_CALLNORETURN_TOOLTIP\"] =\n    'Voer de door de gebruiker gedefinieerde functie \"%1\" uit.';\nmessages[\"PROCEDURES_CALLRETURN_HELPURL\"] =\n    \"https://nl.wikipedia.org/wiki/Subprogramma\";\nmessages[\"PROCEDURES_CALLRETURN_TOOLTIP\"] =\n    'Voer de door de gebruiker gedefinieerde functie \"%1\" uit en gebruik de uitvoer.';\nmessages[\"PROCEDURES_CALL_BEFORE_PARAMS\"] = \"met:\";\nmessages[\"PROCEDURES_CREATE_DO\"] = 'Maak \"%1\"';\nmessages[\"PROCEDURES_DEFNORETURN_COMMENT\"] = \"Deze functie beschrijven...\";\nmessages[\"PROCEDURES_DEFNORETURN_DO\"] = \"\"; // untranslated\nmessages[\"PROCEDURES_DEFNORETURN_HELPURL\"] =\n    \"https://nl.wikipedia.org/wiki/Subprogramma\";\nmessages[\"PROCEDURES_DEFNORETURN_PROCEDURE\"] = \"naam\";\nmessages[\"PROCEDURES_DEFNORETURN_TITLE\"] = \"Subprogramma\";\nmessages[\"PROCEDURES_DEFNORETURN_TOOLTIP\"] =\n    \"Maakt een functie zonder uitvoer.\";\nmessages[\"PROCEDURES_DEFRETURN_HELPURL\"] =\n    \"https://nl.wikipedia.org/wiki/Subprogramma\";\nmessages[\"PROCEDURES_DEFRETURN_RETURN\"] = \"geef terug\";\nmessages[\"PROCEDURES_DEFRETURN_TOOLTIP\"] = \"Maakt een functie met een uitvoer.\";\nmessages[\"PROCEDURES_DEF_DUPLICATE_WARNING\"] =\n    \"Waarschuwing: deze functie heeft parameters met dezelfde naam.\";\nmessages[\"PROCEDURES_HIGHLIGHT_DEF\"] = \"Accentueer functiedefinitie\";\nmessages[\"PROCEDURES_IFRETURN_HELPURL\"] = \"http://c2.com/cgi/wiki?GuardClause\"; // untranslated\nmessages[\"PROCEDURES_IFRETURN_TOOLTIP\"] =\n    'Als de eerste waarde \"waar\" is, geef dan de tweede waarde terug.';\nmessages[\"PROCEDURES_IFRETURN_WARNING\"] =\n    \"Waarschuwing: dit blok mag alleen gebruikt worden binnen de definitie van een functie.\";\nmessages[\"PROCEDURES_MUTATORARG_TITLE\"] = \"invoernaam:\";\nmessages[\"PROCEDURES_MUTATORARG_TOOLTIP\"] =\n    \"Een invoer aan de functie toevoegen.\";\nmessages[\"PROCEDURES_MUTATORCONTAINER_TITLE\"] = \"ingangen\";\nmessages[\"PROCEDURES_MUTATORCONTAINER_TOOLTIP\"] =\n    \"Invoer van deze functie toevoegen, verwijderen of herordenen.\";\nmessages[\"REDO\"] = \"Opnieuw\";\nmessages[\"REMOVE_COMMENT\"] = \"Opmerking verwijderen\";\nmessages[\"RENAME_VARIABLE\"] = \"Variabele hernoemen...\";\nmessages[\"RENAME_VARIABLE_TITLE\"] = 'Alle variabelen \"%1\" hernoemen naar:';\nmessages[\"TEXT_APPEND_HELPURL\"] =\n    \"https://github.com/google/blockly/wiki/Text#text-modification\"; // untranslated\nmessages[\"TEXT_APPEND_TITLE\"] = \"voor%1 voeg tekst toe van %2\";\nmessages[\"TEXT_APPEND_TOOLTIP\"] = 'Voeg tekst toe aan de variabele \"%1\".';\nmessages[\"TEXT_CHANGECASE_HELPURL\"] =\n    \"https://github.com/google/blockly/wiki/Text#adjusting-text-case\"; // untranslated\nmessages[\"TEXT_CHANGECASE_OPERATOR_LOWERCASE\"] = \"naar kleine letters\";\nmessages[\"TEXT_CHANGECASE_OPERATOR_TITLECASE\"] = \"naar Hoofdletter Per Woord\";\nmessages[\"TEXT_CHANGECASE_OPERATOR_UPPERCASE\"] = \"naar HOOFDLETTERS\";\nmessages[\"TEXT_CHANGECASE_TOOLTIP\"] =\n    \"Geef een kopie van de tekst met veranderde hoofdletters terug.\";\nmessages[\"TEXT_CHARAT_FIRST\"] = \"haal eerste letter op\";\nmessages[\"TEXT_CHARAT_FROM_END\"] = \"haal letter # op vanaf einde\";\nmessages[\"TEXT_CHARAT_FROM_START\"] = \"haal letter # op\";\nmessages[\"TEXT_CHARAT_HELPURL\"] =\n    \"https://github.com/google/blockly/wiki/Text#extracting-text\"; // untranslated\nmessages[\"TEXT_CHARAT_LAST\"] = \"haal laatste letter op\";\nmessages[\"TEXT_CHARAT_RANDOM\"] = \"haal willekeurige letter op\";\nmessages[\"TEXT_CHARAT_TAIL\"] = \"\"; // untranslated\nmessages[\"TEXT_CHARAT_TITLE\"] = \"letter %1 van %2\";\nmessages[\"TEXT_CHARAT_TOOLTIP\"] =\n    \"Geeft de letter op de opgegeven positie terug.\";\nmessages[\"TEXT_COUNT_HELPURL\"] =\n    \"https://github.com/google/blockly/wiki/Text#counting-substrings\"; // untranslated\nmessages[\"TEXT_COUNT_MESSAGE0\"] = \"%1 in %2 tellen\";\nmessages[\"TEXT_COUNT_TOOLTIP\"] =\n    \"Tel hoe vaak bepaalde tekst voorkomt in andere tekst.\";\nmessages[\"TEXT_CREATE_JOIN_ITEM_TOOLTIP\"] = \"Voegt een item aan de tekst toe.\";\nmessages[\"TEXT_CREATE_JOIN_TITLE_JOIN\"] = \"samenvoegen\";\nmessages[\"TEXT_CREATE_JOIN_TOOLTIP\"] =\n    \"Toevoegen, verwijderen of volgorde wijzigen van secties om dit tekstblok opnieuw in te stellen.\";\nmessages[\"TEXT_GET_SUBSTRING_END_FROM_END\"] = \"van letter # tot einde\";\nmessages[\"TEXT_GET_SUBSTRING_END_FROM_START\"] = \"naar letter #\";\nmessages[\"TEXT_GET_SUBSTRING_END_LAST\"] = \"naar laatste letter\";\nmessages[\"TEXT_GET_SUBSTRING_HELPURL\"] =\n    \"https://github.com/google/blockly/wiki/Text#extracting-a-region-of-text\"; // untranslated\nmessages[\"TEXT_GET_SUBSTRING_INPUT_IN_TEXT\"] = \"in tekst\";\nmessages[\"TEXT_GET_SUBSTRING_START_FIRST\"] =\n    \"haal subtekst op van eerste letter\";\nmessages[\"TEXT_GET_SUBSTRING_START_FROM_END\"] =\n    \"haal subtekst op vanaf letter # vanaf einde\";\nmessages[\"TEXT_GET_SUBSTRING_START_FROM_START\"] =\n    \"haal subtekst op vanaf letter #\";\nmessages[\"TEXT_GET_SUBSTRING_TAIL\"] = \"\"; // untranslated\nmessages[\"TEXT_GET_SUBSTRING_TOOLTIP\"] =\n    \"Geeft het opgegeven onderdeel van de tekst terug.\";\nmessages[\"TEXT_INDEXOF_HELPURL\"] =\n    \"https://github.com/google/blockly/wiki/Text#finding-text\"; // untranslated\nmessages[\"TEXT_INDEXOF_OPERATOR_FIRST\"] = \"zoek eerste voorkomen van tekst\";\nmessages[\"TEXT_INDEXOF_OPERATOR_LAST\"] = \"zoek het laatste voorkomen van tekst\";\nmessages[\"TEXT_INDEXOF_TITLE\"] = \"in tekst %1 %2 %3\";\nmessages[\"TEXT_INDEXOF_TOOLTIP\"] =\n    \"Geeft de index terug van het eerste of laatste voorkomen van de eerste tekst in de tweede tekst. Geeft %1 terug als de tekst niet gevonden is.\";\nmessages[\"TEXT_ISEMPTY_HELPURL\"] =\n    \"https://github.com/google/blockly/wiki/Text#checking-for-empty-text\"; // untranslated\nmessages[\"TEXT_ISEMPTY_TITLE\"] = \"%1 is leeg\";\nmessages[\"TEXT_ISEMPTY_TOOLTIP\"] =\n    'Geeft \"waar\" terug, als de opgegeven tekst leeg is.';\nmessages[\"TEXT_JOIN_HELPURL\"] =\n    \"https://github.com/google/blockly/wiki/Text#text-creation\"; // untranslated\nmessages[\"TEXT_JOIN_TITLE_CREATEWITH\"] = \"voeg %1 en %2 samen\";\nmessages[\"TEXT_JOIN_TOOLTIP\"] =\n    \"Maakt een stuk tekst door Ã©Ã©n of meer items samen te voegen.\";\nmessages[\"TEXT_LENGTH_HELPURL\"] =\n    \"https://github.com/google/blockly/wiki/Text#text-modification\"; // untranslated\nmessages[\"TEXT_LENGTH_TITLE\"] = \"lengte van %1\";\nmessages[\"TEXT_LENGTH_TOOLTIP\"] =\n    \"Geeft het aantal tekens terug (inclusief spaties) in de opgegeven tekst.\";\nmessages[\"TEXT_INCLUDES_TITLE\"] = \"%1 bevat %2 ?\";\nmessages[\"TEXT_PRINT_HELPURL\"] =\n    \"https://github.com/google/blockly/wiki/Text#printing-text\"; // untranslated\nmessages[\"TEXT_PRINT_TITLE\"] = \"tekst weergeven: %1\";\nmessages[\"TEXT_PRINT_TOOLTIP\"] =\n    \"Drukt de opgegeven tekst, getal of een andere waarde af.\";\nmessages[\"TEXT_PROMPT_HELPURL\"] =\n    \"https://github.com/google/blockly/wiki/Text#getting-input-from-the-user\"; // untranslated\nmessages[\"TEXT_PROMPT_TOOLTIP_NUMBER\"] =\n    \"Vraagt de gebruiker om een getal in te voeren.\";\nmessages[\"TEXT_PROMPT_TOOLTIP_TEXT\"] = \"Vraagt de gebruiker om invoer.\";\nmessages[\"TEXT_PROMPT_TYPE_NUMBER\"] =\n    \"vraagt de gebruiker om een getal met de tekst\";\nmessages[\"TEXT_PROMPT_TYPE_TEXT\"] = \"vraagt om invoer met bericht\";\nmessages[\"TEXT_REPLACE_HELPURL\"] =\n    \"https://github.com/google/blockly/wiki/Text#replacing-substrings\"; // untranslated\nmessages[\"TEXT_REPLACE_MESSAGE0\"] = \"vervang %1 door %2 in %3\";\nmessages[\"TEXT_REPLACE_TOOLTIP\"] =\n    \"Vervang alle voorkomens van tekst in een andere tekst.\";\nmessages[\"TEXT_REVERSE_HELPURL\"] =\n    \"https://github.com/google/blockly/wiki/Text#reversing-text\"; // untranslated\nmessages[\"TEXT_REVERSE_MESSAGE0\"] = \"%1 omkeren\";\nmessages[\"TEXT_REVERSE_TOOLTIP\"] =\n    \"Keert de volgorde van de tekens in de tekst om.\";\nmessages[\"TEXT_TEXT_HELPURL\"] =\n    \"https://nl.wikipedia.org/wiki/String_%28informatica%29\";\nmessages[\"TEXT_TEXT_TOOLTIP\"] = \"Een letter, woord of een regel tekst.\";\nmessages[\"TEXT_TRIM_HELPURL\"] =\n    \"https://github.com/google/blockly/wiki/Text#trimming-removing-spaces\"; // untranslated\nmessages[\"TEXT_TRIM_OPERATOR_BOTH\"] = \"spaties van beide kanten afhalen van\";\nmessages[\"TEXT_TRIM_OPERATOR_LEFT\"] =\n    \"spaties van de linkerkant verwijderen van\";\nmessages[\"TEXT_TRIM_OPERATOR_RIGHT\"] =\n    \"spaties van de rechterkant verwijderen van\";\nmessages[\"TEXT_TRIM_TOOLTIP\"] =\n    \"Geeft een kopie van de tekst met verwijderde spaties van Ã©Ã©n of beide kanten.\";\nmessages[\"TEXT_TO_NUMBER\"] = \"Converteer %1 naar een nummer\";\nmessages[\"TODAY\"] = \"Vandaag\";\nmessages[\"UNDO\"] = \"Ongedaan maken\";\nmessages[\"UNNAMED_KEY\"] = \"zonder naam\";\nmessages[\"VARIABLES_DEFAULT_NAME\"] = \"item\";\nmessages[\"VARIABLES_GET_CREATE_SET\"] = 'Maak \"verander %1\"';\nmessages[\"VARIABLES_GET_HELPURL\"] =\n    \"https://github.com/google/blockly/wiki/Variables#get\"; // untranslated\nmessages[\"VARIABLES_GET_TOOLTIP\"] = \"Geeft de waarde van deze variabele.\";\nmessages[\"VARIABLES_SET\"] = \"stel %1 in op %2\";\nmessages[\"VARIABLES_SET_CREATE_GET\"] = \"Maak 'opvragen van %1'\";\nmessages[\"VARIABLES_SET_HELPURL\"] =\n    \"https://github.com/google/blockly/wiki/Variables#set\"; // untranslated\nmessages[\"VARIABLES_SET_TOOLTIP\"] =\n    \"Verandert de waarde van de variabele naar de waarde van de invoer.\";\nmessages[\"VARIABLE_ALREADY_EXISTS\"] =\n    'Er bestaat al een variabele met de naam \"%1\".';\nmessages[\"VARIABLE_ALREADY_EXISTS_FOR_ANOTHER_TYPE\"] =\n    \"Een variabele met de naam '%1' bestaat al voor een ander soort variabele: '%2'.\";\nmessages[\"WORKSPACE_ARIA_LABEL\"] = \"Blockly werkruimte\";\nmessages[\"WORKSPACE_COMMENT_DEFAULT_TEXT\"] = \"Zeg iets...\";\nmessages[\"CONTROLS_FOREACH_INPUT_DO\"] = messages[\"CONTROLS_REPEAT_INPUT_DO\"];\nmessages[\"CONTROLS_FOR_INPUT_DO\"] = messages[\"CONTROLS_REPEAT_INPUT_DO\"];\nmessages[\"CONTROLS_IF_ELSEIF_TITLE_ELSEIF\"] =\n    messages[\"CONTROLS_IF_MSG_ELSEIF\"];\nmessages[\"CONTROLS_IF_ELSE_TITLE_ELSE\"] = messages[\"CONTROLS_IF_MSG_ELSE\"];\nmessages[\"CONTROLS_IF_IF_TITLE_IF\"] = messages[\"CONTROLS_IF_MSG_IF\"];\nmessages[\"CONTROLS_WHILEUNTIL_INPUT_DO\"] = messages[\"CONTROLS_REPEAT_INPUT_DO\"];\nmessages[\"LISTS_CREATE\"] = \"Maak lijst\";\nmessages[\"LISTS_CREATE_WITH_ITEM_TITLE\"] = messages[\"VARIABLES_DEFAULT_NAME\"];\nmessages[\"LISTS_GET_INDEX_HELPURL\"] = messages[\"LISTS_INDEX_OF_HELPURL\"];\nmessages[\"LISTS_GET_INDEX_INPUT_IN_LIST\"] = messages[\"LISTS_INLIST\"];\nmessages[\"LISTS_GET_SUBLIST_INPUT_IN_LIST\"] = messages[\"LISTS_INLIST\"];\nmessages[\"LISTS_INDEX_OF_INPUT_IN_LIST\"] = messages[\"LISTS_INLIST\"];\nmessages[\"LISTS_SET_INDEX_INPUT_IN_LIST\"] = messages[\"LISTS_INLIST\"];\nmessages[\"MATH_CHANGE_TITLE_ITEM\"] = messages[\"VARIABLES_DEFAULT_NAME\"];\nmessages[\"PROCEDURES_DEFRETURN_COMMENT\"] =\n    messages[\"PROCEDURES_DEFNORETURN_COMMENT\"];\nmessages[\"PROCEDURES_DEFRETURN_DO\"] = messages[\"PROCEDURES_DEFNORETURN_DO\"];\nmessages[\"PROCEDURES_DEFRETURN_PROCEDURE\"] =\n    messages[\"PROCEDURES_DEFNORETURN_PROCEDURE\"];\nmessages[\"PROCEDURES_DEFRETURN_TITLE\"] =\n    messages[\"PROCEDURES_DEFNORETURN_TITLE\"];\nmessages[\"TEXT_APPEND_VARIABLE\"] = messages[\"VARIABLES_DEFAULT_NAME\"];\nmessages[\"TEXT_CREATE_JOIN_ITEM_TITLE_ITEM\"] =\n    messages[\"VARIABLES_DEFAULT_NAME\"];\n\nmessages[\"LEAPHY_HUE\"] = \"188\";\nmessages[\"LOGIC_HUE\"] = \"210\";\nmessages[\"LOOPS_HUE\"] = \"120\";\nmessages[\"MATH_HUE\"] = \"230\";\nmessages[\"TEXTS_HUE\"] = \"160\";\nmessages[\"LISTS_HUE\"] = \"260\";\nmessages[\"COLOUR_HUE\"] = \"20\";\nmessages[\"VARIABLES_HUE\"] = \"330\";\nmessages[\"VARIABLES_DYNAMIC_HUE\"] = \"310\";\nmessages[\"PROCEDURES_HUE\"] = \"290\";\nmessages[\"LEAPHY_DISPLAY_SET_TEXT_SIZE\"] = \"Zet tekstgrootte op\";\nmessages[\"EMPTY_BACKPACK\"] = \"Leeg rugzak\";\nmessages[\"REMOVE_FROM_BACKPACK\"] = \"Verwijder uit rugzak\";\nmessages[\"COPY_TO_BACKPACK\"] = \"Kopieer naar rugzak\";\nmessages[\"COPY_ALL_TO_BACKPACK\"] = \"Kopieer alles naar rugzak\";\nmessages[\"PASTE_ALL_FROM_BACKPACK\"] = \"Plak alles uit rugzak\";\nmessages[\"USE_I2C_CHANNEL\"] = \"Gebruik I2C kanaal\";\nmessages[\"USE_I2C_CHANNEL_TOOLTIP\"] =\n    \"Gebruik het geselecteerde I2C kanaal voor sensoren in dit blok\";\nmessages[\"I2C_LIST_DEVICES\"] = \"Zoek naar verbonden I2C apparaten\";\nmessages[\"LEAPHY_SEGMENT_INIT\"] = \"Stel segment scherm in op CLK %1 DIO %2\";\nmessages[\"LEAPHY_SEGMENT_SET\"] = \"Zet segment scherm op %1\";\nmessages[\"LEAPHY_SEGMENT_CLEAR\"] = \"Leeg segment scherm\";\nmessages[\"LEAPHY_SEGMENT_SET_BRIGHTNESS\"] =\n    \"Zet helderheid van segment scherm op %1\";\nmessages[\"LEAPHY_MATRIX_INIT\"] = \"Stel matrix scherm in op DIN %1 CLK %2 CS %3\";\nmessages[\"LEAPHY_MATRIX_SET\"] = \"Zet matrix scherm led op x %1 y %2 naar %3\";\nmessages[\"LEAPHY_MATRIX_SET_BRIGHTNESS\"] =\n    \"Zet helderheid van matrix scherm op %1\";\nmessages[\"LEAPHY_MATRIX_CLEAR\"] = \"Leeg matrix scherm\";\nmessages[\"LEAPHY_MATRIX_FILL\"] = \"Toon op matrix scherm %1 %2\";\nmessages[\"LEAPHY_SOUND_INIT\"] = \"Stel speaker in op RX %1 TX %2\";\nmessages[\"LEAPHY_SOUND_PLAY\"] = \"Speel audio %1 af\";\nmessages[\"LEAPHY_SOUND_SET_VOLUME\"] = \"Stel volume in op %1\";\nmessages[\"LEAPHY_SOUND_STOP\"] = \"Stop audio\";\nmessages[\"LEAPHY_MESH_SETUP\"] = \"Stel mesh network in met naam %1\";\nmessages[\"LEAPHY_MESH_UPDATE\"] = \"Update mesh\";\nmessages[\"LEAPHY_MESH_ADD_PROCEDURE\"] = \"Voeg blok %1 toe aan mesh\";\nmessages[\"LEAPHY_MESH_CALL_PROCEDURE\"] = \"Roep mesh blok %1 aan op %2\";\nmessages[\"LEAPHY_MESH_CALL_PROCEDURE_ALL\"] = \"Roep mesh blok %1 aan op alle %2\";\nmessages[\"LEAPHY_MESH_ON_CONNECTION\"] = \"Wanneer verbinding wordt gemaakt\";\nmessages[\"LEAPHY_MESH_CLIENT\"] = \"Afzender\";\nmessages[\"LEAPHY_RTC_GET\"] = \"Haal %1 op van tijd\";\nmessages[\"LEAPHY_RTC_SET\"] = \"Stel tijd in op %1\";\nmessages[\"LEAPHY_RTC_FORMAT\"] = \"Formatteer tijd\";\nmessages[\"LEAPHY_FORMAT\"] = \"Formaat\";\nmessages[\"LEAPHY_SECOND\"] = \"Seconde\";\nmessages[\"LEAPHY_MINUTE\"] = \"Minuut\";\nmessages[\"LEAPHY_HOUR\"] = \"Uur\";\nmessages[\"LEAPHY_WEEKDAY\"] = \"Weekdag\";\nmessages[\"LEAPHY_DAY\"] = \"Dag van maand\";\nmessages[\"LEAPHY_MONTH\"] = \"Maand\";\nmessages[\"LEAPHY_YEAR\"] = \"Jaar\";\nmessages[\"LEAPHY_WITH_FORMAT\"] = \"in formaat: %1\";\nmessages[\"LEAPHY_NUMERIC\"] = \"Getallen\";\nmessages[\"LEAPHY_2_DIGITS\"] = \"2 Getallen\";\nmessages[\"LEAPHY_TEXT\"] = \"Tekst\";\nmessages[\"LEAPHY_FULL\"] = \"Volledig\";\nmessages[\"LEAPHY_TEMPLATE_FULL_NUMERIC\"] = \"Volledig nummers\";\nmessages[\"LEAPHY_TEMPLATE_DATE_NUMERIC\"] = \"Datum nummers\";\nmessages[\"LEAPHY_TEMPLATE_FULL_TEXT\"] = \"Volledig tekst\";\nmessages[\"LEAPHY_TEMPLATE_DATE_TEXT\"] = \"Datum tekst\";\nmessages[\"LEAPHY_TEMPLATE_TIME\"] = \"Tijd\";\nmessages[\"LEAPHY_TEMPLATE_CUSTOM\"] = \"Aangepast\";\n\nexport default messages;\n","const messages: Record<string, string> = {};\n\nmessages[\"SENSOREN_CATEGORY\"] = \"Sensors\";\nmessages[\"ACTUATOREN_CATEGORY\"] = \"Actuators\";\nmessages[\"ADD_COMMENT\"] = \"Add Comment\";\nmessages[\"ARD_ANALOGWRITE\"] = \"Set PWM pin\";\nmessages[\"ARD_DIGITALWRITE\"] = \"Set digital pin\";\nmessages[\"ARD_SET_MULTIPLEXER\"] = \"Set digital multiplexer to pin\";\nmessages[\"ARD_PIN_WARN1\"] =\n    \"Pin %1 is needed for %2 as pin %3. Already in use as %4.\";\nmessages[\"ARD_SERVO_READ\"] = \"Read servo pin\";\nmessages[\"ARD_SERVO_REGULAR_WRITE\"] = \"Set servo pin\";\nmessages[\"ARD_SERVO_ARM_WRITE\"] = \"Set Arm servo pin\";\nmessages[\"ARD_SERVO_WRITE\"] = \"Set Servo Pin\";\nmessages[\"ARD_SERVO_WRITE_DEG_180\"] = \"degrees\";\nmessages[\"ARD_SERVO_WRITE_TO\"] = \"angle to\";\nmessages[\"ARD_TIME_DELAY\"] = \"during\";\nmessages[\"ARD_TIME_DELAY_TIP\"] = \"Wait specific time in milliseconds\";\nmessages[\"ARD_TIME_MS\"] = \"ms\";\nmessages[\"ARD_WRITE_TO\"] = \"To\";\nmessages[\"CANNOT_DELETE_VARIABLE_PROCEDURE\"] =\n    \"Can't delete the variable '%1' because it's part of the definition of the function '%2'\";\nmessages[\"CHANGE_VALUE_TITLE\"] = \"Change value:\";\nmessages[\"CLEAN_UP\"] = \"Clean up Blocks\";\nmessages[\"COLLAPSED_WARNINGS_WARNING\"] = \"Collapsed blocks contain warnings.\";\nmessages[\"COLLAPSE_ALL\"] = \"Collapse Blocks\";\nmessages[\"COLLAPSE_BLOCK\"] = \"Collapse Block\";\nmessages[\"COLOUR_BLEND_COLOUR1\"] = \"colour 1\";\nmessages[\"COLOUR_BLEND_COLOUR2\"] = \"colour 2\";\nmessages[\"COLOUR_BLEND_HELPURL\"] =\n    \"https://meyerweb.com/eric/tools/color-blend/#:::rgbp\";\nmessages[\"COLOUR_BLEND_RATIO\"] = \"ratio\";\nmessages[\"COLOUR_BLEND_TITLE\"] = \"blend\";\nmessages[\"COLOUR_BLEND_TOOLTIP\"] =\n    \"Blends two colours together with a given ratio (0.0 - 1.0).\";\nmessages[\"COLOUR_PICKER_HELPURL\"] = \"https://en.wikipedia.org/wiki/Color\";\nmessages[\"COLOUR_PICKER_TOOLTIP\"] = \"Choose a colour from the palette.\";\nmessages[\"COLOUR_RANDOM_HELPURL\"] = \"http://randomcolour.com\";\nmessages[\"COLOUR_RANDOM_TITLE\"] = \"random colour\";\nmessages[\"COLOUR_RANDOM_TOOLTIP\"] = \"Choose a colour at random.\";\nmessages[\"COLOUR_RGB_BLUE\"] = \"blue\";\nmessages[\"COLOUR_RGB_GREEN\"] = \"green\";\nmessages[\"COLOUR_RGB_HELPURL\"] =\n    \"https://www.december.com/html/spec/colorpercompact.html\";\nmessages[\"COLOUR_RGB_RED\"] = \"red\";\nmessages[\"COLOUR_RGB_AMBIENT\"] = \"ambient\";\nmessages[\"COLOUR_RGB_TITLE\"] = \"colour with\";\nmessages[\"COLOUR_RGB_TOOLTIP\"] =\n    \"Create a colour with the specified amount of red, green, and blue. All values must be between 0 and 100.\";\nmessages[\"CONTROLS_FLOW_STATEMENTS_HELPURL\"] =\n    \"https://github.com/google/blockly/wiki/Loops#loop-termination-blocks\";\nmessages[\"CONTROLS_FLOW_STATEMENTS_OPERATOR_BREAK\"] = \"break out of loop\";\nmessages[\"CONTROLS_FLOW_STATEMENTS_OPERATOR_CONTINUE\"] =\n    \"continue with next iteration of loop\";\nmessages[\"CONTROLS_FLOW_STATEMENTS_TOOLTIP_BREAK\"] =\n    \"Break out of the containing loop.\";\nmessages[\"CONTROLS_FLOW_STATEMENTS_TOOLTIP_CONTINUE\"] =\n    \"Skip the rest of this loop, and continue with the next iteration.\";\nmessages[\"CONTROLS_FLOW_STATEMENTS_WARNING\"] =\n    \"Warning: This block may only be used within a loop.\";\nmessages[\"CONTROLS_FOREACH_HELPURL\"] =\n    \"https://github.com/google/blockly/wiki/Loops#for-each\";\nmessages[\"CONTROLS_FOREACH_TITLE\"] = \"for each item %1 in list %2\";\nmessages[\"CONTROLS_FOREACH_TOOLTIP\"] =\n    \"For each item in a list, set the variable '%1' to the item, and then do some statements.\";\nmessages[\"CONTROLS_FOR_HELPURL\"] =\n    \"https://github.com/google/blockly/wiki/Loops#count-with\";\nmessages[\"CONTROLS_FOR_TITLE\"] = \"count with %1 from %2 to %3 by %4\";\nmessages[\"CONTROLS_FOR_TOOLTIP\"] =\n    \"Have the variable '%1' take on the values from the start number to the end number, counting by the specified interval, and do the specified blocks.\";\nmessages[\"CONTROLS_IF_ELSEIF_TOOLTIP\"] = \"Add a condition to the if block.\";\nmessages[\"CONTROLS_IF_ELSE_TOOLTIP\"] =\n    \"Add a final, catch-all condition to the if block.\";\nmessages[\"CONTROLS_IF_HELPURL\"] =\n    \"https://github.com/google/blockly/wiki/IfElse\";\nmessages[\"CONTROLS_IF_IF_TOOLTIP\"] =\n    \"Add, remove, or reorder sections to reconfigure this if block.\";\nmessages[\"CONTROLS_IF_MSG_ELSE\"] = \"else\";\nmessages[\"CONTROLS_IF_MSG_ELSEIF\"] = \"else if\";\nmessages[\"CONTROLS_MULTIPLEXER_1\"] = \"Set multiplexer to\";\nmessages[\"CONTROLS_MULTIPLEXER_2\"] = \"then do\";\nmessages[\"CONTROLS_IF_MSG_IF\"] = \"if\";\nmessages[\"CONTROLS_IF_MSG_THEN\"] = \"then\";\nmessages[\"CONTROLS_IF_TOOLTIP_1\"] =\n    \"If a value is true, then do some statements.\";\nmessages[\"CONTROLS_IF_TOOLTIP_2\"] =\n    \"If a value is true, then do the first block of statements. Otherwise, do the second block of statements.\";\nmessages[\"CONTROLS_IF_TOOLTIP_3\"] =\n    \"If the first value is true, then do the first block of statements. Otherwise, if the second value is true, do the second block of statements.\";\nmessages[\"CONTROLS_IF_TOOLTIP_4\"] =\n    \"If the first value is true, then do the first block of statements. Otherwise, if the second value is true, do the second block of statements. If none of the values are true, do the last block of statements.\";\nmessages[\"CONTROLS_REPEAT_FOREVER_TITLE\"] = \"repeat forever\";\nmessages[\"CONTROLS_REPEAT_HELPURL\"] = \"https://en.wikipedia.org/wiki/For_loop\";\nmessages[\"CONTROLS_REPEAT_INPUT_DO\"] = \"\";\nmessages[\"CONTROLS_REPEAT_TITLE\"] = \"repeat %1 times\";\nmessages[\"CONTROLS_REPEAT_TOOLTIP\"] = \"Do some statements several times.\";\nmessages[\"CONTROLS_WHILEUNTIL_HELPURL\"] =\n    \"https://github.com/google/blockly/wiki/Loops#repeat\";\nmessages[\"CONTROLS_WHILEUNTIL_OPERATOR_UNTIL\"] = \"repeat until\";\nmessages[\"CONTROLS_WHILEUNTIL_OPERATOR_WHILE\"] = \"repeat while\";\nmessages[\"CONTROLS_WHILEUNTIL_TOOLTIP_UNTIL\"] =\n    \"While a value is false, then do some statements.\";\nmessages[\"CONTROLS_WHILEUNTIL_TOOLTIP_WHILE\"] =\n    \"While a value is true, then do some statements.\";\nmessages[\"DELETE_ALL_BLOCKS\"] = \"Delete all %1 blocks?\";\nmessages[\"DELETE_BLOCK\"] = \"Delete Block\";\nmessages[\"DELETE_VARIABLE\"] = \"Delete the '%1' variable\";\nmessages[\"DELETE_VARIABLE_CONFIRMATION\"] =\n    \"Delete %1 uses of the '%2' variable?\";\nmessages[\"DELETE_X_BLOCKS\"] = \"Delete %1 Blocks\";\nmessages[\"DIALOG_CANCEL\"] = \"Cancel\";\nmessages[\"DIALOG_OK\"] = \"OK\";\nmessages[\"DISABLE_BLOCK\"] = \"Disable Block\";\nmessages[\"DUPLICATE_BLOCK\"] = \"Duplicate\";\nmessages[\"DUPLICATE_COMMENT\"] = \"Duplicate Comment\";\nmessages[\"ENABLE_BLOCK\"] = \"Enable Block\";\nmessages[\"EXPAND_ALL\"] = \"Expand Blocks\";\nmessages[\"EXPAND_BLOCK\"] = \"Expand Block\";\nmessages[\"EXTERNAL_INPUTS\"] = \"External Inputs\";\nmessages[\"HELP\"] = \"Help\";\nmessages[\"INLINE_INPUTS\"] = \"Inline Inputs\";\nmessages[\"LEAPHY_ANALOG_READ\"] = \"Read anapin\";\nmessages[\"LEAPHY_BUZZ_BUZZ\"] = \"Buzz\";\nmessages[\"LEAPHY_BUZZ_HERTZ\"] = \"Hertz\";\nmessages[\"LEAPHY_BUZZ_MS\"] = \"ms\";\nmessages[\"LEAPHY_CLICK_CATEGORY\"] = \"Leaphy Click\";\nmessages[\"LEAPHY_COMPASS\"] = \"Read compass\";\nmessages[\"LEAPHY_DIGITAL_READ\"] = \"Read digipin\";\nmessages[\"LEAPHY_CHOOSE_GAS\"] = \"Read gas\";\nmessages[\"LEAPHY_DISPLAY_CLEAR\"] = \"Clear display\";\nmessages[\"LEAPHY_DISPLAY_DISPLAY\"] = \"Show on display\";\nmessages[\"LEAPHY_DISPLAY_PRINT\"] = \"Display - Set Ln.\";\nmessages[\"LEAPHY_EXTRA_CATEGORY\"] = \"Leaphy Extra\";\nmessages[\"LEAPHY_FLITZ_CATEGORY\"] = \"Leaphy Flitz\";\nmessages[\"LEAPHY_FLITZ_LED\"] = \"Nose light - \";\nmessages[\"LEAPHY_FLITZ_LED_B\"] = \"Blue\";\nmessages[\"LEAPHY_FLITZ_LED_G\"] = \"Green\";\nmessages[\"LEAPHY_FLITZ_LED_R\"] = \"Red\";\nmessages[\"LEAPHY_FUNCTIONS_CATEGORY\"] = \"Custom Blocks\";\nmessages[\"LEAPHY_GET_DISTANCE\"] = \"Get distance\";\nmessages[\"LEAPHY_TOF_GET_DISTANCE\"] = \"Get ToF\";\nmessages[\"LEAPHY_GET_AIR_PRESSURE\"] = \"Get air pressure\";\nmessages[\"LEAPHY_GET_GESTURE\"] = \"Get gesture\";\nmessages[\"LEAPHY_LED\"] = \"Led\";\nmessages[\"LEAPHY_LED_BASIC_BLUE\"] = \"B\";\nmessages[\"LEAPHY_LED_BASIC_GREEN\"] = \"G\";\nmessages[\"LEAPHY_LED_BASIC_LED\"] = \"Ledstrip basis - Led\";\nmessages[\"LEAPHY_LED_BASIC_RED\"] = \"R\";\nmessages[\"LEAPHY_LED_BLUE\"] = \"Blue\";\nmessages[\"LEAPHY_LED_GREEN\"] = \"Green\";\nmessages[\"LEAPHY_LED_RED\"] = \"Red\";\nmessages[\"LEAPHY_LED_SET_LEDS\"] = \"Leds\";\nmessages[\"LEAPHY_LED_SET_PIN\"] = \"Pin\";\nmessages[\"LEAPHY_LED_SET_SPEEDVALUE\"] = \"Ledstrip demo - Speed\";\nmessages[\"LEAPHY_LED_SET_STRIP\"] = \"Set LED Strip\";\nmessages[\"LEAPHY_LED_STRIP_BREATHE\"] = \"Breathe\";\nmessages[\"LEAPHY_LED_STRIP_COLORGULF\"] = \"Color Gulf\";\nmessages[\"LEAPHY_LED_STRIP_DEMO\"] = \"Ledstrip demo\";\nmessages[\"LEAPHY_LED_STRIP_GULF\"] = \"Gulf\";\nmessages[\"LEAPHY_LED_STRIP_LIGHTBANK\"] = \"Lightbank\";\nmessages[\"LEAPHY_LED_STRIP_RAINBOW\"] = \"Rainbow\";\nmessages[\"LEAPHY_MOTOR_A_DROPDOWN\"] = \"Motor_A\";\nmessages[\"LEAPHY_MOTOR_BACKWARD\"] = \"Backward\";\nmessages[\"LEAPHY_MOTOR_B_DROPDOWN\"] = \"Motor_B\";\nmessages[\"LEAPHY_MOTOR_DIRECTION\"] = \"Direction\";\nmessages[\"LEAPHY_MOTOR_FORWARD\"] = \"Forward\";\nmessages[\"LEAPHY_MOTOR_LEFT\"] = \"Left\";\nmessages[\"LEAPHY_MOTOR_LEFT_DROPDOWN\"] = \"Motor_L\";\nmessages[\"LEAPHY_MOTOR_RIGHT\"] = \"Right\";\nmessages[\"LEAPHY_MOTOR_RIGHT_DROPDOWN\"] = \"Motor_R\";\nmessages[\"LEAPHY_MOTOR_SPEED\"] = \"Speed\";\nmessages[\"LEAPHY_MOTOR_TYPE\"] = \"Type\";\nmessages[\"LEAPHY_SERVO_SET\"] = \"Servo %1 with speed %2\";\nmessages[\"LEAPHY_SERVO_MOVE\"] = \"Servo direction %1 with speed %2\";\nmessages[\"LEAPHY_NUMBERS_CATEGORY\"] = \"Numbers\";\nmessages[\"LEAPHY_OPERATORS_CATEGORY\"] = \"Operators\";\nmessages[\"LEAPHY_ORIGINAL_CATEGORY\"] = \"Leaphy Original\";\nmessages[\"LEAPHY_READ_HAND\"] = \"Read Hand sensor\";\nmessages[\"LEAPHY_READ_STOMACH\"] = \"Read Belly sensor\";\nmessages[\"LEAPHY_RGB_COLOR_BLUE\"] = \"Color B-255\";\nmessages[\"LEAPHY_RGB_COLOR_GREEN\"] = \"Color G-255\";\nmessages[\"LEAPHY_RGB_COLOR_RED\"] = \"Color R-255\";\nmessages[\"LEAPHY_RGB_RAW_COLOR_BLUE\"] = \"RawColor Blue\";\nmessages[\"LEAPHY_RGB_RAW_COLOR_GREEN\"] = \"RawColor Green\";\nmessages[\"LEAPHY_RGB_RAW_COLOR_RED\"] = \"RawColor Red\";\nmessages[\"LEAPHY_RGB_READ_SENSOR\"] = \"Read RGB sensor\";\nmessages[\"LEAPHY_SERIAL_PRINT\"] = \"Show on screen\";\nmessages[\"LEAPHY_SERIAL_AVAILABLE\"] = \"Available on screen\";\nmessages[\"LEAPHY_SERIAL_READ_LINE\"] = \"Read from screen\";\nmessages[\"LEAPHY_SITUATION_CATEGORY\"] = \"Thinkflow\";\nmessages[\"LEAPHY_SONAR_READ_ECHO\"] = \"Echo\";\nmessages[\"LEAPHY_SONAR_READ_TRIG\"] = \"Get distance Trig\";\nmessages[\"LEAPHY_START\"] = \"Leaphy\";\nmessages[\"LEAPHY_STOMACH_SENSOR_TYPE1\"] = \"Type 1\";\nmessages[\"LEAPHY_STOMACH_SENSOR_TYPE2\"] = \"Type 2\";\nmessages[\"LEAPHY_UNO_CATEGORY\"] = \"Arduino Uno\";\nmessages[\"LEAPHY_VARIABLES_CATEGORY\"] = \"Variables\";\nmessages[\"LEAPHY_LISTS_CATEGORY\"] = \"Lists\";\nmessages[\"LEAPHY_LISTS_ADD\"] = \"add %1 to %2\";\nmessages[\"LEAPHY_LISTS_DELETE\"] = \"delete %1 of %2\";\nmessages[\"LEAPHY_LISTS_CLEAR\"] = \"delete all from %1\";\nmessages[\"LEAPHY_LISTS_INSERT\"] = \"insert %1 at %2 of %3\";\nmessages[\"LEAPHY_LISTS_REPLACE\"] = \"replace %1 of %2 with %3\";\nmessages[\"LEAPHY_LISTS_GET\"] = \"get %1 of %2\";\nmessages[\"LEAPHY_LISTS_LENGTH\"] = \"length of %1\";\nmessages[\"LOGIC_BOOLEAN_FALSE\"] = \"false\";\nmessages[\"LOGIC_BOOLEAN_HELPURL\"] =\n    \"https://github.com/google/blockly/wiki/Logic#values\";\nmessages[\"LOGIC_BOOLEAN_TOOLTIP\"] = \"Returns either true or false.\";\nmessages[\"LOGIC_BOOLEAN_TRUE\"] = \"true\";\nmessages[\"LOGIC_COMPARE_HELPURL\"] =\n    \"https://en.wikipedia.org/wiki/Inequality_(mathematics)\";\nmessages[\"LOGIC_COMPARE_TOOLTIP_EQ\"] =\n    \"Return true if both inputs equal each other.\";\nmessages[\"LOGIC_COMPARE_TOOLTIP_GT\"] =\n    \"Return true if the first input is greater than the second input.\";\nmessages[\"LOGIC_COMPARE_TOOLTIP_GTE\"] =\n    \"Return true if the first input is greater than or equal to the second input.\";\nmessages[\"LOGIC_COMPARE_TOOLTIP_LT\"] =\n    \"Return true if the first input is smaller than the second input.\";\nmessages[\"LOGIC_COMPARE_TOOLTIP_LTE\"] =\n    \"Return true if the first input is smaller than or equal to the second input.\";\nmessages[\"LOGIC_COMPARE_TOOLTIP_NEQ\"] =\n    \"Return true if both inputs are not equal to each other.\";\nmessages[\"LOGIC_NEGATE_HELPURL\"] =\n    \"https://github.com/google/blockly/wiki/Logic#not\";\nmessages[\"LOGIC_NEGATE_TITLE\"] = \"not %1\";\nmessages[\"LOGIC_NEGATE_TOOLTIP\"] =\n    \"Returns true if the input is false. Returns false if the input is true.\";\nmessages[\"LOGIC_NULL\"] = \"null\";\nmessages[\"LOGIC_NULL_HELPURL\"] = \"https://en.wikipedia.org/wiki/Nullable_type\";\nmessages[\"LOGIC_NULL_TOOLTIP\"] = \"Returns null.\";\nmessages[\"LOGIC_OPERATION_AND\"] = \"and\";\nmessages[\"LOGIC_OPERATION_HELPURL\"] =\n    \"https://github.com/google/blockly/wiki/Logic#logical-operations\";\nmessages[\"LOGIC_OPERATION_OR\"] = \"or\";\nmessages[\"LOGIC_OPERATION_TOOLTIP_AND\"] =\n    \"Return true if both inputs are true.\";\nmessages[\"LOGIC_OPERATION_TOOLTIP_OR\"] =\n    \"Return true if at least one of the inputs is true.\";\nmessages[\"LOGIC_TERNARY_CONDITION\"] = \"test\";\nmessages[\"LOGIC_TERNARY_HELPURL\"] = \"https://en.wikipedia.org/wiki/%3F:\";\nmessages[\"LOGIC_TERNARY_IF_FALSE\"] = \"if false\";\nmessages[\"LOGIC_TERNARY_IF_TRUE\"] = \"if true\";\nmessages[\"LOGIC_TERNARY_TOOLTIP\"] =\n    \"Check the condition in 'test'. If the condition is true, returns the 'if true' value; otherwise returns the 'if false' value.\";\nmessages[\"MATH_ADDITION_SYMBOL\"] = \"+\";\nmessages[\"MATH_ARITHMETIC_HELPURL\"] =\n    \"https://en.wikipedia.org/wiki/Arithmetic\";\nmessages[\"MATH_ARITHMETIC_TOOLTIP_ADD\"] = \"Return the sum of the two numbers.\";\nmessages[\"MATH_ARITHMETIC_TOOLTIP_DIVIDE\"] =\n    \"Return the quotient of the two numbers.\";\nmessages[\"MATH_ARITHMETIC_TOOLTIP_MINUS\"] =\n    \"Return the difference of the two numbers.\";\nmessages[\"MATH_ARITHMETIC_TOOLTIP_MULTIPLY\"] =\n    \"Return the product of the two numbers.\";\nmessages[\"MATH_ARITHMETIC_TOOLTIP_POWER\"] =\n    \"Return the first number raised to the power of the second number.\";\nmessages[\"MATH_ATAN2_HELPURL\"] = \"https://en.wikipedia.org/wiki/Atan2\";\nmessages[\"MATH_ATAN2_TITLE\"] = \"atan2 of X:%1 Y:%2\";\nmessages[\"MATH_ATAN2_TOOLTIP\"] =\n    \"Return the arctangent of point (X, Y) in degrees from -180 to 180.\";\nmessages[\"MATH_CHANGE_HELPURL\"] =\n    \"https://en.wikipedia.org/wiki/Programming_idiom#Incrementing_a_counter\";\nmessages[\"MATH_CHANGE_TITLE\"] = \"change %1 by %2\";\nmessages[\"MATH_CHANGE_TOOLTIP\"] = \"Add a number to variable '%1'.\";\nmessages[\"MATH_CONSTANT_HELPURL\"] =\n    \"https://en.wikipedia.org/wiki/Mathematical_constant\";\nmessages[\"MATH_CONSTANT_TOOLTIP\"] =\n    \"Return one of the common constants: Ï (3.141â¦), e (2.718â¦), Ï (1.618â¦), sqrt(2) (1.414â¦), sqrt(Â½) (0.707â¦), or â (infinity).\";\nmessages[\"MATH_CONSTRAIN_HELPURL\"] =\n    \"https://en.wikipedia.org/wiki/Clamping_(graphics)\";\nmessages[\"MATH_CONSTRAIN_TITLE\"] = \"constrain %1 low %2 high %3\";\nmessages[\"MATH_CONSTRAIN_TOOLTIP\"] =\n    \"Constrain a number to be between the specified limits (inclusive).\";\nmessages[\"MATH_DIVISION_SYMBOL\"] = \"Ã·\";\nmessages[\"MATH_IS_DIVISIBLE_BY\"] = \"is divisible by\";\nmessages[\"MATH_IS_EVEN\"] = \"is even\";\nmessages[\"MATH_IS_NEGATIVE\"] = \"is negative\";\nmessages[\"MATH_IS_ODD\"] = \"is odd\";\nmessages[\"MATH_IS_POSITIVE\"] = \"is positive\";\nmessages[\"MATH_IS_PRIME\"] = \"is prime\";\nmessages[\"MATH_IS_TOOLTIP\"] =\n    \"Check if a number is an even, odd, prime, whole, positive, negative, or if it is divisible by certain number. Returns true or false.\";\nmessages[\"MATH_IS_WHOLE\"] = \"is whole\";\nmessages[\"MATH_MODULO_HELPURL\"] =\n    \"https://en.wikipedia.org/wiki/Modulo_operation\";\nmessages[\"MATH_MODULO_TITLE\"] = \"remainder of %1 Ã· %2\";\nmessages[\"MATH_MODULO_TOOLTIP\"] =\n    \"Return the remainder from dividing the two numbers.\";\nmessages[\"MATH_MULTIPLICATION_SYMBOL\"] = \"Ã\";\nmessages[\"MATH_NUMBER_HELPURL\"] = \"https://en.wikipedia.org/wiki/Number\";\nmessages[\"MATH_NUMBER_TOOLTIP\"] = \"A number.\";\nmessages[\"MATH_ONLIST_HELPURL\"] = \"\";\nmessages[\"MATH_ONLIST_OPERATOR_AVERAGE\"] = \"average of list\";\nmessages[\"MATH_ONLIST_OPERATOR_MAX\"] = \"max of list\";\nmessages[\"MATH_ONLIST_OPERATOR_MEDIAN\"] = \"median of list\";\nmessages[\"MATH_ONLIST_OPERATOR_MIN\"] = \"min of list\";\nmessages[\"MATH_ONLIST_OPERATOR_MODE\"] = \"modes of list\";\nmessages[\"MATH_ONLIST_OPERATOR_RANDOM\"] = \"random item of list\";\nmessages[\"MATH_ONLIST_OPERATOR_STD_DEV\"] = \"standard deviation of list\";\nmessages[\"MATH_ONLIST_OPERATOR_SUM\"] = \"sum of list\";\nmessages[\"MATH_ONLIST_TOOLTIP_AVERAGE\"] =\n    \"Return the average (arithmetic mean) of the numeric values in the list.\";\nmessages[\"MATH_ONLIST_TOOLTIP_MAX\"] = \"Return the largest number in the list.\";\nmessages[\"MATH_ONLIST_TOOLTIP_MEDIAN\"] =\n    \"Return the median number in the list.\";\nmessages[\"MATH_ONLIST_TOOLTIP_MIN\"] = \"Return the smallest number in the list.\";\nmessages[\"MATH_ONLIST_TOOLTIP_MODE\"] =\n    \"Return a list of the most common item(s) in the list.\";\nmessages[\"MATH_ONLIST_TOOLTIP_RANDOM\"] =\n    \"Return a random element from the list.\";\nmessages[\"MATH_ONLIST_TOOLTIP_STD_DEV\"] =\n    \"Return the standard deviation of the list.\";\nmessages[\"MATH_ONLIST_TOOLTIP_SUM\"] =\n    \"Return the sum of all the numbers in the list.\";\nmessages[\"MATH_POWER_SYMBOL\"] = \"^\";\nmessages[\"MATH_RANDOM_FLOAT_HELPURL\"] =\n    \"https://en.wikipedia.org/wiki/Random_number_generation\";\nmessages[\"MATH_RANDOM_FLOAT_TITLE_RANDOM\"] = \"random fraction\";\nmessages[\"MATH_RANDOM_FLOAT_TOOLTIP\"] =\n    \"Return a random fraction between 0.0 (inclusive) and 1.0 (exclusive).\";\nmessages[\"MATH_RANDOM_INT_HELPURL\"] =\n    \"https://en.wikipedia.org/wiki/Random_number_generation\";\nmessages[\"MATH_RANDOM_INT_TITLE\"] = \"random integer from %1 to %2\";\nmessages[\"MATH_RANDOM_INT_TOOLTIP\"] =\n    \"Return a random integer between the two specified limits, inclusive.\";\nmessages[\"MATH_ROUND_HELPURL\"] = \"https://en.wikipedia.org/wiki/Rounding\";\nmessages[\"MATH_ROUND_OPERATOR_ROUND\"] = \"round\";\nmessages[\"MATH_ROUND_OPERATOR_ROUNDDOWN\"] = \"round down\";\nmessages[\"MATH_ROUND_OPERATOR_ROUNDUP\"] = \"round up\";\nmessages[\"MATH_ROUND_TOOLTIP\"] = \"Round a number up or down.\";\nmessages[\"MATH_SINGLE_HELPURL\"] = \"https://en.wikipedia.org/wiki/Square_root\";\nmessages[\"MATH_SINGLE_OP_ABSOLUTE\"] = \"absolute\";\nmessages[\"MATH_SINGLE_OP_ROOT\"] = \"square root\";\nmessages[\"MATH_SINGLE_TOOLTIP_ABS\"] = \"Return the absolute value of a number.\";\nmessages[\"MATH_SINGLE_TOOLTIP_EXP\"] = \"Return e to the power of a number.\";\nmessages[\"MATH_SINGLE_TOOLTIP_LN\"] =\n    \"Return the natural logarithm of a number.\";\nmessages[\"MATH_SINGLE_TOOLTIP_LOG10\"] =\n    \"Return the base 10 logarithm of a number.\";\nmessages[\"MATH_SINGLE_TOOLTIP_NEG\"] = \"Return the negation of a number.\";\nmessages[\"MATH_SINGLE_TOOLTIP_POW10\"] = \"Return 10 to the power of a number.\";\nmessages[\"MATH_SINGLE_TOOLTIP_ROOT\"] = \"Return the square root of a number.\";\nmessages[\"MATH_SUBTRACTION_SYMBOL\"] = \"-\";\nmessages[\"MATH_TRIG_ACOS\"] = \"acos\";\nmessages[\"MATH_TRIG_ASIN\"] = \"asin\";\nmessages[\"MATH_TRIG_ATAN\"] = \"atan\";\nmessages[\"MATH_TRIG_COS\"] = \"cos\";\nmessages[\"MATH_TRIG_HELPURL\"] =\n    \"https://en.wikipedia.org/wiki/Trigonometric_functions\";\nmessages[\"MATH_TRIG_SIN\"] = \"sin\";\nmessages[\"MATH_TRIG_TAN\"] = \"tan\";\nmessages[\"MATH_TRIG_TOOLTIP_ACOS\"] = \"Return the arccosine of a number.\";\nmessages[\"MATH_TRIG_TOOLTIP_ASIN\"] = \"Return the arcsine of a number.\";\nmessages[\"MATH_TRIG_TOOLTIP_ATAN\"] = \"Return the arctangent of a number.\";\nmessages[\"MATH_TRIG_TOOLTIP_COS\"] =\n    \"Return the cosine of a degree (not radian).\";\nmessages[\"MATH_TRIG_TOOLTIP_SIN\"] = \"Return the sine of a degree (not radian).\";\nmessages[\"MATH_TRIG_TOOLTIP_TAN\"] =\n    \"Return the tangent of a degree (not radian).\";\nmessages[\"NEW_COLOUR_VARIABLE\"] = \"Create colour variable...\";\nmessages[\"NEW_NUMBER_VARIABLE\"] = \"Create number variable...\";\nmessages[\"NEW_STRING_VARIABLE\"] = \"Create string variable...\";\nmessages[\"NEW_VARIABLE\"] = \"Create variable...\";\nmessages[\"NEW_VARIABLE_TITLE\"] = \"New variable name:\";\nmessages[\"NEW_VARIABLE_TYPE_TITLE\"] = \"New variable type:\";\nmessages[\"ORDINAL_NUMBER_SUFFIX\"] = \"\";\nmessages[\"PROCEDURES_ALLOW_STATEMENTS\"] = \"allow statements\";\nmessages[\"PROCEDURES_BEFORE_PARAMS\"] = \"with:\";\nmessages[\"PROCEDURES_CALLNORETURN_HELPURL\"] =\n    \"https://en.wikipedia.org/wiki/Subroutine\";\nmessages[\"PROCEDURES_CALLNORETURN_TOOLTIP\"] =\n    \"Run the user-defined function '%1'.\";\nmessages[\"PROCEDURES_CALLRETURN_HELPURL\"] =\n    \"https://en.wikipedia.org/wiki/Subroutine\";\nmessages[\"PROCEDURES_CALLRETURN_TOOLTIP\"] =\n    \"Run the user-defined function '%1' and use its output.\";\nmessages[\"PROCEDURES_CALL_BEFORE_PARAMS\"] = \"with:\";\nmessages[\"PROCEDURES_CREATE_DO\"] = \"Create '%1'\";\nmessages[\"PROCEDURES_DEFNORETURN_COMMENT\"] = \"Describe this function...\";\nmessages[\"PROCEDURES_DEFNORETURN_DO\"] = \"\";\nmessages[\"PROCEDURES_DEFNORETURN_HELPURL\"] =\n    \"https://en.wikipedia.org/wiki/Subroutine\";\nmessages[\"PROCEDURES_DEFNORETURN_PROCEDURE\"] = \"name\";\nmessages[\"PROCEDURES_DEFNORETURN_TITLE\"] = \"Subprogram\";\nmessages[\"PROCEDURES_DEFNORETURN_TOOLTIP\"] =\n    \"Creates a function with no output.\";\nmessages[\"PROCEDURES_DEFRETURN_HELPURL\"] =\n    \"https://en.wikipedia.org/wiki/Subroutine\";\nmessages[\"PROCEDURES_DEFRETURN_RETURN\"] = \"return\";\nmessages[\"PROCEDURES_DEFRETURN_TOOLTIP\"] = \"Creates a function with an output.\";\nmessages[\"PROCEDURES_DEF_DUPLICATE_WARNING\"] =\n    \"Warning: This function has duplicate parameters.\";\nmessages[\"PROCEDURES_HIGHLIGHT_DEF\"] = \"Highlight function definition\";\nmessages[\"PROCEDURES_IFRETURN_HELPURL\"] = \"http://c2.com/cgi/wiki?GuardClause\";\nmessages[\"PROCEDURES_IFRETURN_TOOLTIP\"] =\n    \"If a value is true, then return a second value.\";\nmessages[\"PROCEDURES_IFRETURN_WARNING\"] =\n    \"Warning: This block may be used only within a function definition.\";\nmessages[\"PROCEDURES_MUTATORARG_TITLE\"] = \"input name:\";\nmessages[\"PROCEDURES_MUTATORARG_TOOLTIP\"] = \"Add an input to the function.\";\nmessages[\"PROCEDURES_MUTATORCONTAINER_TITLE\"] = \"inputs\";\nmessages[\"PROCEDURES_MUTATORCONTAINER_TOOLTIP\"] =\n    \"Add, remove, or reorder inputs to this function.\";\nmessages[\"REDO\"] = \"Redo\";\nmessages[\"REMOVE_COMMENT\"] = \"Remove Comment\";\nmessages[\"RENAME_VARIABLE\"] = \"Rename variable...\";\nmessages[\"RENAME_VARIABLE_TITLE\"] = \"Rename all '%1' variables to:\";\nmessages[\"TEXT_APPEND_HELPURL\"] =\n    \"https://github.com/google/blockly/wiki/Text#text-modification\";\nmessages[\"TEXT_APPEND_TITLE\"] = \"to %1 append text %2\";\nmessages[\"TEXT_APPEND_TOOLTIP\"] = \"Append some text to variable '%1'.\";\nmessages[\"TEXT_CHANGECASE_HELPURL\"] =\n    \"https://github.com/google/blockly/wiki/Text#adjusting-text-case\";\nmessages[\"TEXT_CHANGECASE_OPERATOR_LOWERCASE\"] = \"to lower case\";\nmessages[\"TEXT_CHANGECASE_OPERATOR_TITLECASE\"] = \"to Title Case\";\nmessages[\"TEXT_CHANGECASE_OPERATOR_UPPERCASE\"] = \"to UPPER CASE\";\nmessages[\"TEXT_CHANGECASE_TOOLTIP\"] =\n    \"Return a copy of the text in a different case.\";\nmessages[\"TEXT_CHARAT_FIRST\"] = \"get first letter\";\nmessages[\"TEXT_CHARAT_FROM_END\"] = \"get letter # from end\";\nmessages[\"TEXT_CHARAT_FROM_START\"] = \"get letter #\";\nmessages[\"TEXT_CHARAT_HELPURL\"] =\n    \"https://github.com/google/blockly/wiki/Text#extracting-text\";\nmessages[\"TEXT_CHARAT_LAST\"] = \"get last letter\";\nmessages[\"TEXT_CHARAT_RANDOM\"] = \"get random letter\";\nmessages[\"TEXT_CHARAT_TAIL\"] = \"\";\nmessages[\"TEXT_CHARAT_TITLE\"] = \"letter %1 of %2\";\nmessages[\"TEXT_CHARAT_TOOLTIP\"] =\n    \"Returns the letter at the specified position.\";\nmessages[\"TEXT_COUNT_HELPURL\"] =\n    \"https://github.com/google/blockly/wiki/Text#counting-substrings\";\nmessages[\"TEXT_COUNT_MESSAGE0\"] = \"count %1 in %2\";\nmessages[\"TEXT_COUNT_TOOLTIP\"] =\n    \"Count how many times some text occurs within some other text.\";\nmessages[\"TEXT_CREATE_JOIN_ITEM_TOOLTIP\"] = \"Add an item to the text.\";\nmessages[\"TEXT_CREATE_JOIN_TITLE_JOIN\"] = \"join\";\nmessages[\"TEXT_CREATE_JOIN_TOOLTIP\"] =\n    \"Add, remove, or reorder sections to reconfigure this text block.\";\nmessages[\"TEXT_GET_SUBSTRING_END_FROM_END\"] = \"to letter # from end\";\nmessages[\"TEXT_GET_SUBSTRING_END_FROM_START\"] = \"to letter #\";\nmessages[\"TEXT_GET_SUBSTRING_END_LAST\"] = \"to last letter\";\nmessages[\"TEXT_GET_SUBSTRING_HELPURL\"] =\n    \"https://github.com/google/blockly/wiki/Text#extracting-a-region-of-text\";\nmessages[\"TEXT_GET_SUBSTRING_INPUT_IN_TEXT\"] = \"in text\";\nmessages[\"TEXT_GET_SUBSTRING_START_FIRST\"] = \"get substring from first letter\";\nmessages[\"TEXT_GET_SUBSTRING_START_FROM_END\"] =\n    \"get substring from letter # from end\";\nmessages[\"TEXT_GET_SUBSTRING_START_FROM_START\"] = \"get substring from letter #\";\nmessages[\"TEXT_GET_SUBSTRING_TAIL\"] = \"\";\nmessages[\"TEXT_GET_SUBSTRING_TOOLTIP\"] =\n    \"Returns a specified portion of the text.\";\nmessages[\"TEXT_INDEXOF_HELPURL\"] =\n    \"https://github.com/google/blockly/wiki/Text#finding-text\";\nmessages[\"TEXT_INDEXOF_OPERATOR_FIRST\"] = \"find first occurrence of text\";\nmessages[\"TEXT_INDEXOF_OPERATOR_LAST\"] = \"find last occurrence of text\";\nmessages[\"TEXT_INDEXOF_TITLE\"] = \"in text %1 %2 %3\";\nmessages[\"TEXT_INDEXOF_TOOLTIP\"] =\n    \"Returns the index of the first/last occurrence of the first text in the second text. Returns %1 if text is not found.\";\nmessages[\"TEXT_ISEMPTY_HELPURL\"] =\n    \"https://github.com/google/blockly/wiki/Text#checking-for-empty-text\";\nmessages[\"TEXT_ISEMPTY_TITLE\"] = \"%1 is empty\";\nmessages[\"TEXT_ISEMPTY_TOOLTIP\"] =\n    \"Returns true if the provided text is empty.\";\nmessages[\"TEXT_JOIN_HELPURL\"] =\n    \"https://github.com/google/blockly/wiki/Text#text-creation\";\nmessages[\"TEXT_JOIN_TITLE_CREATEWITH\"] = \"join %1 %2\";\nmessages[\"TEXT_JOIN_TOOLTIP\"] =\n    \"Create a piece of text by joining together any number of items.\";\nmessages[\"TEXT_LENGTH_HELPURL\"] =\n    \"https://github.com/google/blockly/wiki/Text#text-modification\";\nmessages[\"TEXT_LENGTH_TITLE\"] = \"length of %1\";\nmessages[\"TEXT_LENGTH_TOOLTIP\"] =\n    \"Returns the number of letters (including spaces) in the provided text.\";\nmessages[\"TEXT_INCLUDES_TITLE\"] = \"%1 contains %2 ?\";\nmessages[\"TEXT_PRINT_HELPURL\"] =\n    \"https://github.com/google/blockly/wiki/Text#printing-text\";\nmessages[\"TEXT_PRINT_TITLE\"] = \"print %1\";\nmessages[\"TEXT_PRINT_TOOLTIP\"] =\n    \"Print the specified text, number or other value.\";\nmessages[\"TEXT_PROMPT_HELPURL\"] =\n    \"https://github.com/google/blockly/wiki/Text#getting-input-from-the-user\";\nmessages[\"TEXT_PROMPT_TOOLTIP_NUMBER\"] = \"Prompt for user for a number.\";\nmessages[\"TEXT_PROMPT_TOOLTIP_TEXT\"] = \"Prompt for user for some text.\";\nmessages[\"TEXT_PROMPT_TYPE_NUMBER\"] = \"prompt for number with message\";\nmessages[\"TEXT_PROMPT_TYPE_TEXT\"] = \"prompt for text with message\";\nmessages[\"TEXT_REPLACE_HELPURL\"] =\n    \"https://github.com/google/blockly/wiki/Text#replacing-substrings\";\nmessages[\"TEXT_REPLACE_MESSAGE0\"] = \"replace %1 with %2 in %3\";\nmessages[\"TEXT_REPLACE_TOOLTIP\"] =\n    \"Replace all occurances of some text within some other text.\";\nmessages[\"TEXT_REVERSE_HELPURL\"] =\n    \"https://github.com/google/blockly/wiki/Text#reversing-text\";\nmessages[\"TEXT_REVERSE_MESSAGE0\"] = \"reverse %1\";\nmessages[\"TEXT_REVERSE_TOOLTIP\"] =\n    \"Reverses the order of the characters in the text.\";\nmessages[\"TEXT_TEXT_HELPURL\"] =\n    \"https://en.wikipedia.org/wiki/String_(computer_science)\";\nmessages[\"TEXT_TEXT_TOOLTIP\"] = \"A letter, word, or line of text.\";\nmessages[\"TEXT_TRIM_HELPURL\"] =\n    \"https://github.com/google/blockly/wiki/Text#trimming-removing-spaces\";\nmessages[\"TEXT_TRIM_OPERATOR_BOTH\"] = \"trim spaces from both sides of\";\nmessages[\"TEXT_TRIM_OPERATOR_LEFT\"] = \"trim spaces from left side of\";\nmessages[\"TEXT_TRIM_OPERATOR_RIGHT\"] = \"trim spaces from right side of\";\nmessages[\"TEXT_TRIM_TOOLTIP\"] =\n    \"Return a copy of the text with spaces removed from one or both ends.\";\nmessages[\"TEXT_TO_NUMBER\"] = \"Convert %1 to number\";\nmessages[\"TODAY\"] = \"Today\";\nmessages[\"UNDO\"] = \"Undo\";\nmessages[\"UNNAMED_KEY\"] = \"unnamed\";\nmessages[\"VARIABLES_DEFAULT_NAME\"] = \"item\";\nmessages[\"VARIABLES_GET_CREATE_SET\"] = \"Create 'set %1'\";\nmessages[\"VARIABLES_GET_HELPURL\"] =\n    \"https://github.com/google/blockly/wiki/Variables#get\";\nmessages[\"VARIABLES_GET_TOOLTIP\"] = \"Returns the value of this variable.\";\nmessages[\"VARIABLES_SET\"] = \"set %1 to %2\";\nmessages[\"VARIABLES_SET_CREATE_GET\"] = \"Create 'get %1'\";\nmessages[\"VARIABLES_SET_HELPURL\"] =\n    \"https://github.com/google/blockly/wiki/Variables#set\";\nmessages[\"VARIABLES_SET_TOOLTIP\"] =\n    \"Sets this variable to be equal to the input.\";\nmessages[\"VARIABLE_ALREADY_EXISTS\"] = \"A variable named '%1' already exists.\";\nmessages[\"VARIABLE_ALREADY_EXISTS_FOR_ANOTHER_TYPE\"] =\n    \"A variable named '%1' already exists for another type: '%2'.\";\nmessages[\"WORKSPACE_ARIA_LABEL\"] = \"Blockly Workspace\";\nmessages[\"WORKSPACE_COMMENT_DEFAULT_TEXT\"] = \"Say something...\";\nmessages[\"CONTROLS_FOREACH_INPUT_DO\"] = messages[\"CONTROLS_REPEAT_INPUT_DO\"];\nmessages[\"CONTROLS_FOR_INPUT_DO\"] = messages[\"CONTROLS_REPEAT_INPUT_DO\"];\nmessages[\"CONTROLS_IF_ELSEIF_TITLE_ELSEIF\"] =\n    messages[\"CONTROLS_IF_MSG_ELSEIF\"];\nmessages[\"CONTROLS_IF_ELSE_TITLE_ELSE\"] = messages[\"CONTROLS_IF_MSG_ELSE\"];\nmessages[\"CONTROLS_IF_IF_TITLE_IF\"] = messages[\"CONTROLS_IF_MSG_IF\"];\nmessages[\"CONTROLS_WHILEUNTIL_INPUT_DO\"] = messages[\"CONTROLS_REPEAT_INPUT_DO\"];\nmessages[\"LISTS_CREATE\"] = \"Create List\";\nmessages[\"LISTS_CREATE_WITH_ITEM_TITLE\"] = messages[\"VARIABLES_DEFAULT_NAME\"];\nmessages[\"LISTS_GET_INDEX_HELPURL\"] = messages[\"LISTS_INDEX_OF_HELPURL\"];\nmessages[\"LISTS_GET_INDEX_INPUT_IN_LIST\"] = messages[\"LISTS_INLIST\"];\nmessages[\"LISTS_GET_SUBLIST_INPUT_IN_LIST\"] = messages[\"LISTS_INLIST\"];\nmessages[\"LISTS_INDEX_OF_INPUT_IN_LIST\"] = messages[\"LISTS_INLIST\"];\nmessages[\"LISTS_SET_INDEX_INPUT_IN_LIST\"] = messages[\"LISTS_INLIST\"];\nmessages[\"MATH_CHANGE_TITLE_ITEM\"] = messages[\"VARIABLES_DEFAULT_NAME\"];\nmessages[\"PROCEDURES_DEFRETURN_COMMENT\"] =\n    messages[\"PROCEDURES_DEFNORETURN_COMMENT\"];\nmessages[\"PROCEDURES_DEFRETURN_DO\"] = messages[\"PROCEDURES_DEFNORETURN_DO\"];\nmessages[\"PROCEDURES_DEFRETURN_PROCEDURE\"] =\n    messages[\"PROCEDURES_DEFNORETURN_PROCEDURE\"];\nmessages[\"PROCEDURES_DEFRETURN_TITLE\"] =\n    messages[\"PROCEDURES_DEFNORETURN_TITLE\"];\nmessages[\"TEXT_APPEND_VARIABLE\"] = messages[\"VARIABLES_DEFAULT_NAME\"];\nmessages[\"TEXT_CREATE_JOIN_ITEM_TITLE_ITEM\"] =\n    messages[\"VARIABLES_DEFAULT_NAME\"];\n\nmessages[\"LEAPHY_HUE\"] = \"188\";\nmessages[\"LOGIC_HUE\"] = \"210\";\nmessages[\"LOOPS_HUE\"] = \"120\";\nmessages[\"MATH_HUE\"] = \"230\";\nmessages[\"TEXTS_HUE\"] = \"160\";\nmessages[\"LISTS_HUE\"] = \"260\";\nmessages[\"COLOUR_HUE\"] = \"20\";\nmessages[\"VARIABLES_HUE\"] = \"330\";\nmessages[\"VARIABLES_DYNAMIC_HUE\"] = \"310\";\nmessages[\"PROCEDURES_HUE\"] = \"290\";\nmessages[\"LEAPHY_DISPLAY_SET_TEXT_SIZE\"] = \"Set text size\";\nmessages[\"EMPTY_BACKPACK\"] = \"Empty\";\nmessages[\"REMOVE_FROM_BACKPACK\"] = \"Remove from backpack\";\nmessages[\"COPY_TO_BACKPACK\"] = \"Copy to backpack\";\nmessages[\"COPY_ALL_TO_BACKPACK\"] = \"Copy all blocks to backpack\";\nmessages[\"PASTE_ALL_FROM_BACKPACK\"] = \"Paste all blocks from backpack\";\nmessages[\"USE_I2C_CHANNEL\"] = \"Use I2C channel\";\nmessages[\"USE_I2C_CHANNEL_TOOLTIP\"] =\n    \"Use the selected I2C channel for sensors in this block\";\nmessages[\"I2C_LIST_DEVICES\"] = \"List connected I2C devices\";\nmessages[\"LEAPHY_SEGMENT_INIT\"] = \"Init segment display CLK %1 DIO %2\";\nmessages[\"LEAPHY_SEGMENT_SET\"] = \"Set segment display to %1\";\nmessages[\"LEAPHY_SEGMENT_CLEAR\"] = \"Clear segment display\";\nmessages[\"LEAPHY_SEGMENT_SET_BRIGHTNESS\"] =\n    \"Set segment display brightness to %1\";\nmessages[\"LEAPHY_MATRIX_INIT\"] = \"Init matrix display DIN %1 CLK %2 CS %3\";\nmessages[\"LEAPHY_MATRIX_SET\"] = \"Set matrix display led on x %1 y %2 to %3\";\nmessages[\"LEAPHY_MATRIX_SET_BRIGHTNESS\"] =\n    \"Set matrix display brightness to %1\";\nmessages[\"LEAPHY_MATRIX_CLEAR\"] = \"Clear matrix display\";\nmessages[\"LEAPHY_MATRIX_FILL\"] = \"Set matrix display %1 %2\";\nmessages[\"LEAPHY_SOUND_INIT\"] = \"Init speaker RX %1 TX %2\";\nmessages[\"LEAPHY_SOUND_PLAY\"] = \"Play audio %1\";\nmessages[\"LEAPHY_SOUND_SET_VOLUME\"] = \"Set volume to %1\";\nmessages[\"LEAPHY_SOUND_STOP\"] = \"Stop audio\";\nmessages[\"LEAPHY_MESH_SETUP\"] = \"Setup mesh network with name %1\";\nmessages[\"LEAPHY_MESH_UPDATE\"] = \"Update mesh\";\nmessages[\"LEAPHY_MESH_ADD_PROCEDURE\"] = \"Add mesh block %1\";\nmessages[\"LEAPHY_MESH_CALL_PROCEDURE\"] = \"Call mesh block %1 on %2\";\nmessages[\"LEAPHY_MESH_CALL_PROCEDURE_ALL\"] = \"Call mesh block %1 on all %2\";\nmessages[\"LEAPHY_MESH_ON_CONNECTION\"] = \"On mesh connection\";\nmessages[\"LEAPHY_MESH_CLIENT\"] = \"Sender\";\nmessages[\"LEAPHY_RTC_GET\"] = \"Time get %1\";\nmessages[\"LEAPHY_RTC_SET\"] = \"Set time to %1\";\nmessages[\"LEAPHY_RTC_FORMAT\"] = \"Format time\";\nmessages[\"LEAPHY_FORMAT\"] = \"Format\";\nmessages[\"LEAPHY_SECOND\"] = \"Second\";\nmessages[\"LEAPHY_MINUTE\"] = \"Minute\";\nmessages[\"LEAPHY_HOUR\"] = \"Hour\";\nmessages[\"LEAPHY_WEEKDAY\"] = \"Weekday\";\nmessages[\"LEAPHY_DAY\"] = \"Day of month\";\nmessages[\"LEAPHY_MONTH\"] = \"Month\";\nmessages[\"LEAPHY_YEAR\"] = \"Year\";\nmessages[\"LEAPHY_WITH_FORMAT\"] = \"with format: %1\";\nmessages[\"LEAPHY_NUMERIC\"] = \"Numeric\";\nmessages[\"LEAPHY_2_DIGITS\"] = \"2 Digits\";\nmessages[\"LEAPHY_TEXT\"] = \"Text\";\nmessages[\"LEAPHY_FULL\"] = \"Full\";\nmessages[\"LEAPHY_TEMPLATE_FULL_NUMERIC\"] = \"Full numeric\";\nmessages[\"LEAPHY_TEMPLATE_DATE_NUMERIC\"] = \"Date numeric\";\nmessages[\"LEAPHY_TEMPLATE_FULL_TEXT\"] = \"Full text\";\nmessages[\"LEAPHY_TEMPLATE_DATE_TEXT\"] = \"Date text\";\nmessages[\"LEAPHY_TEMPLATE_TIME\"] = \"Time\";\nmessages[\"LEAPHY_TEMPLATE_CUSTOM\"] = \"Custom\";\n\nexport default messages;\n","import messagesNl from \"./translations/nl\";\nimport messagesEn from \"./translations/en\";\n\nexport default {\n    nl: messagesNl,\n    en: messagesEn,\n};\n","import * as Blockly from \"blockly/core\";\nimport { addI2CDeclarations } from \"./arduino/i2c\";\nimport { ConnectionType, Msg, Workspace, WorkspaceSvg } from \"blockly/core\";\nimport { procedureManager } from \"./arduino/procedures\";\n\nexport class Arduino extends Blockly.Generator {\n    public ORDER_ATOMIC = 0; // 0 \"\" ...\n    public ORDER_UNARY_POSTFIX = 1; // expr++ expr-- () [] .\n    public ORDER_UNARY_PREFIX = 2; // -expr !expr ~expr ++expr --expr\n    public ORDER_MULTIPLICATIVE = 3; // * / % ~/\n    public ORDER_ADDITIVE = 4; // + -\n    public ORDER_SHIFT = 5; // << >>\n    public ORDER_RELATIONAL = 6; // is is! >= > <= <\n    public ORDER_EQUALITY = 7; // == != === !==\n    public ORDER_BITWISE_AND = 8; // &\n    public ORDER_BITWISE_XOR = 9; // ^\n    public ORDER_BITWISE_OR = 10; // |\n    public ORDER_LOGICAL_AND = 11; // &&\n    public ORDER_LOGICAL_OR = 12; // ||\n    public ORDER_CONDITIONAL = 13; // expr ? expr : expr\n    public ORDER_ASSIGNMENT = 14; // = *= /= ~/= %= += -= <<= >>= &= ^= |=\n    public ORDER_COMMA = 15; // ,\n    public ORDER_UNARY_NEGATION = 16;\n    public ORDER_MEMBER = 17;\n    public ORDER_NONE = 99; // (...)\n\n    public PinTypes = {\n        INPUT: \"INPUT\",\n        OUTPUT: \"OUTPUT\",\n        PWM: \"PWM\",\n        SERVO: \"SERVO\",\n        STEPPER: \"STEPPER\",\n        SERIAL: \"SERIAL\",\n        I2C: \"I2C/TWI\",\n        SPI: \"SPI\",\n        LEDSTRIP: \"LEDSTRIP\",\n    };\n\n    public DEF_FUNC_NAME = this.FUNCTION_NAME_PLACEHOLDER_;\n\n    public TYPES: Record<string, string> = {\n        Number: \"double\",\n        Boolean: \"boolean\",\n        String: \"String\",\n    };\n    public DEFAULTS: Record<string, string> = {\n        Number: \"0\",\n        Boolean: \"false\",\n        String: '\"\"',\n    };\n\n    public pins_: Record<string, string> = {};\n    public includes_: Record<string, string> = {};\n    public setups_: Record<string, string> = {};\n    public declarations_: Record<string, { priority: number; code: string }> =\n        {};\n\n    public robotType: string = \"l_uno\";\n\n    constructor() {\n        super(\"Arduino\");\n        this.addReservedWords(\n            \"Blockly,\" + // In case JS is evaled in the current window.\n                \"setup,loop,if,else,for,switch,case,while,do,break,continue,return,goto,\" +\n                \"define,include,HIGH,LOW,INPUT,OUTPUT,INPUT_PULLUP,true,false,integer,\" +\n                \"constants,floating,point,void,boolean,char,unsigned,byte,int,word,long,\" +\n                \"float,double,string,String,array,static,volatile,const,sizeof,pinMode,\" +\n                \"digitalWrite,digitalRead,analogReference,analogRead,analogWrite,tone,\" +\n                \"noTone,shiftOut,shitIn,pulseIn,millis,micros,delay,delayMicroseconds,\" +\n                \"min,max,abs,constrain,map,pow,sqrt,sin,cos,tan,randomSeed,random,\" +\n                \"lowByte,highByte,bitRead,bitWrite,bitSet,bitClear,bit,attachInterrupt,\" +\n                \"detachInterrupt,interrupts,noInterrupts\",\n        );\n    }\n\n    public init(workspace: WorkspaceSvg) {\n        this.pins_ = Object.create(null);\n        this.functionNames_ = Object.create(null);\n        this.declarations_ = Object.create(null);\n\n        super.init(workspace);\n\n        if (!this.nameDB_) {\n            this.nameDB_ = new Blockly.Names(this.RESERVED_WORDS_);\n        } else {\n            this.nameDB_.reset();\n        }\n\n        this.nameDB_.setVariableMap(workspace.getVariableMap());\n        this.nameDB_.populateVariables(workspace);\n        this.nameDB_.populateProcedures(workspace);\n\n        const defvars = [];\n        // Add developer Blockly.Variables (not created or named by the user).\n        const devVarList = Blockly.Variables.allDeveloperVariables(workspace);\n        for (let i = 0; i < devVarList.length; i++) {\n            defvars.push(\n                this.nameDB_.getName(\n                    devVarList[i],\n                    Blockly.Names.NameType.DEVELOPER_VARIABLE,\n                ),\n            );\n        }\n\n        // Add user Blockly.Variables, but only ones that are being used.\n        const variables = Blockly.Variables.allUsedVarModels(workspace);\n        const variableSetters = workspace.getBlocksByType(\"variables_set\");\n        const variableGetters = workspace.getBlocksByType(\"variables_get\");\n        for (let i = 0; i < variables.length; i++) {\n            const setters = variableSetters.filter(\n                (block) => block.getFieldValue(\"VAR\") === variables[i].getId(),\n            );\n            const types = setters.map((block) => {\n                const output = block.getChildren(true)[0];\n                return {\n                    block,\n                    type:\n                        output && output.outputConnection\n                            ? output.outputConnection.getCheck()?.[0]\n                            : undefined,\n                };\n            });\n            // check for mismatch\n            if (\n                types.some(\n                    ({ type }) => type !== types[0].type && type !== undefined,\n                )\n            ) {\n                types.forEach(({ block }) => {\n                    block.setWarningText(\n                        `Variable has conflicting types: ${types\n                            .map(({ type }) => type)\n                            .join(\", \")}`,\n                    );\n                });\n            } else {\n                types.forEach(({ block }) => {\n                    block.setWarningText(null);\n                });\n            }\n\n            const type = types[0]?.type || \"Number\";\n            variableGetters.forEach((block) => {\n                if (block.getFieldValue(\"VAR\") === variables[i].getId()) {\n                    block.outputConnection?.setCheck(type);\n                }\n            });\n\n            const arduinoType = this.TYPES[type];\n            const defaultValue = this.DEFAULTS[type];\n            const name = this.nameDB_.getName(\n                variables[i].getId(),\n                Blockly.Names.NameType.VARIABLE,\n            );\n\n            defvars.push(`${arduinoType} ${name} = ${defaultValue}`);\n        }\n\n        // Declare all of the variables.\n        if (defvars.length) {\n            this.definitions_[\"variables\"] = defvars.join(\";\\n\") + \";\\n\";\n        }\n\n        // Type inference for procedures\n        const definitions = workspace.getBlocksByType(\"procedures_defreturn\");\n        const usages = workspace.getBlocksByType(\"procedures_callreturn\");\n        const returns = workspace.getBlocksByType(\"procedures_ifreturn\");\n        definitions.forEach((definition) => {\n            const input = definition.getInput(\"RETURN\");\n            if (!input) return;\n\n            const check = input.connection?.targetConnection?.getCheck();\n            const type = (check ? check[0] : \"Number\") || \"Number\";\n\n            usages.forEach((block) => {\n                block.outputConnection?.setCheck(type);\n            });\n\n            returns.forEach((block) => {\n                if (block.getRootBlock().id !== definition.id) return;\n\n                block.getInput(\"VALUE\")?.setCheck(type);\n            });\n        });\n\n        // Remote procedure manager\n        const procedures = [\n            ...workspace.getBlocksByType(\"procedures_defreturn\"),\n            ...workspace.getBlocksByType(\"procedures_defnoreturn\"),\n        ];\n        const remotes = workspace\n            .getBlocksByType(\"mesh_add_procedure\")\n            .map((block) => block.getFieldValue(\"METHOD\"));\n\n        procedureManager.setProcedures(\n            procedures.map((procedure) => {\n                const name = procedure.getFieldValue(\"NAME\");\n                const funcName = generator.nameDB_?.getName(\n                    name,\n                    Blockly.Names.NameType.PROCEDURE,\n                ) as string;\n\n                return {\n                    name,\n                    funcName,\n                    arguments: procedure.getVarModels().map((e) => ({\n                        id: e.getId(),\n                        name: e.name,\n                    })),\n                    remote: remotes.includes(funcName),\n                };\n            }),\n        );\n\n        // Create a dictionary of definitions to be printed at the top of the sketch\n        this.includes_ = Object.create(null);\n        // Create a dictionary of setups to be printed in the setup() function\n        this.setups_ = Object.create(null);\n        // Create a dictionary of pins to check if their use conflicts\n        this.pins_ = Object.create(null);\n\n        // Define all user lists\n        const lists = listManager.getLists();\n        const types = Object.fromEntries(\n            lists.map((list) => [list.id, [] as string[]]),\n        );\n        const setters = [\n            ...workspace.getBlocksByType(\"lists_add\"),\n            ...workspace.getBlocksByType(\"lists_insert\"),\n            ...workspace.getBlocksByType(\"lists_replace\"),\n        ];\n\n        const typedSetters = setters\n            .map((block) => {\n                const list = block.getFieldValue(\"LIST\");\n                const input = block.getInput(\"VALUE\");\n                if (!input) return;\n\n                const check = input.connection?.targetConnection?.getCheck();\n                const type = check ? check[0] : undefined;\n\n                if (type) types[list].push(type);\n                return [block, list, type];\n            })\n            .filter((e) => e) as [Blockly.Block, string, string][];\n        typedSetters.forEach(([block, list, type]) => {\n            if (type === types[list][0] || !type) {\n                block.setWarningText(null);\n            } else {\n                block.setWarningText(\"List has conflicting types\");\n            }\n        });\n\n        const getters = workspace.getBlocksByType(\"lists_get\");\n        getters.forEach((block) => {\n            const list = block.getFieldValue(\"LIST\");\n            const type = types[list][0] || \"Number\";\n\n            block.outputConnection?.setCheck(type);\n        });\n\n        const defLists: string[] = [];\n        lists.forEach((list) => {\n            const type = this.TYPES[types[list.id][0] || \"Number\"];\n\n            const name = list.name.replaceAll(\" \", \"_\");\n            defLists.push(`List<${type}> ${name}`);\n        });\n\n        if (defLists.length) {\n            this.definitions_[\"lists\"] = defLists.join(\";\\n\") + \";\\n\";\n            this.includes_[\"lists\"] = \"#include <List.hpp>\";\n        }\n\n        this.isInitialized = true;\n    }\n\n    public finish(code: string) {\n        // Convert the includes, definitions, and functions dictionaries into lists\n        const includes = Object.values(this.includes_),\n            definitions: string[] = Object.values(this.definitions_),\n            declarations = Object.values(this.declarations_)\n                .sort((a, b) => b.priority - a.priority)\n                .map(({ code }) => code);\n\n        if (includes.length) includes.push(\"\\n\");\n        if (definitions.length) definitions.push(\"\\n\");\n\n        // userSetupCode is always added at the very end of the setup function\n        const userSetup = this.setups_[\"userSetupCode\"] || \"\";\n        delete this.setups_[\"userSetupCode\"];\n        const setups = Object.values(this.setups_);\n\n        this.nameDB_?.reset();\n\n        const allDefs =\n            includes.join(\"\\n\") +\n            definitions.join(\"\\n\") +\n            declarations.join(\"\\n\");\n        const setup =\n            \"\\n\\nvoid setup() {\\n\\t\" +\n            setups.join(\"\\n  \") +\n            `\\n  ${userSetup}\\n}\\n\\n`;\n        const loop = \"void loop() {\\n  \" + code.replace(/\\n/g, \"\\n  \") + \"\\n}\";\n\n        return allDefs + setup + loop;\n    }\n\n    public addInclude(includeTag: string, code: string) {\n        if (!this.includes_[includeTag]) {\n            this.includes_[includeTag] = code;\n        }\n    }\n\n    public addDeclaration(\n        declarationTag: string,\n        code: string,\n        overwrite = false,\n        priority = 0,\n    ) {\n        if (this.declarations_[declarationTag] === undefined || overwrite) {\n            this.declarations_[declarationTag] = {\n                priority,\n                code,\n            };\n        }\n    }\n\n    public addSetup(\n        setupTag: string,\n        code: string,\n        overwrite: boolean = false,\n    ) {\n        let overwritten = false;\n        if (overwrite || this.setups_[setupTag] === undefined) {\n            this.setups_[setupTag] = code;\n            overwritten = true;\n        }\n\n        return overwritten;\n    }\n\n    public addI2CSetup(sensorName: string, setupCode: string) {\n        addI2CDeclarations();\n\n        this.addDeclaration(\n            `setup_${sensorName}`,\n            `bool ${sensorName}Setup[8];\\n` +\n                `uint8_t setup${sensorName}() {\\n` +\n                \"    uint8_t channel = i2cGetChannel();\\n\" +\n                `    if (!${sensorName}Setup[channel]) {\\n` +\n                `      ${setupCode}` +\n                `      ${sensorName}Setup[channel] = true;\\n` +\n                \"    }\\n\" +\n                \"}\\n\",\n        );\n        return \"setup\" + sensorName + \"();\\n\";\n    }\n\n    public reservePin(\n        block: Blockly.Block,\n        pin: string,\n        pinType: string,\n        warningTag: string,\n    ) {\n        if (this.pins_[pin] && this.pins_[pin] !== pinType) {\n            block.setWarningText(\n                Msg.ARD_PIN_WARN1.replace(\"%1\", pin)\n                    .replace(\"%2\", warningTag)\n                    .replace(\"%3\", pinType)\n                    .replace(\"%4\", this.pins_[pin]),\n                warningTag,\n            );\n        } else {\n            this.pins_[pin] = pinType;\n            block.setWarningText(null);\n        }\n    }\n\n    public scrubNakedValue(line: string): string {\n        return line + \";\\n\";\n    }\n\n    public quote_(string: string) {\n        string = string\n            .replace(/\\\\/g, \"\\\\\\\\\")\n            .replace(/\\n/g, \"\\\\\\n\")\n            .replace(/\\$/g, \"\\\\$\")\n            .replace(/\"/g, '\\\\\"')\n            .replace(/'/g, \"\\\\'\");\n        return '\"' + string + '\"';\n    }\n\n    public scrub_(block: Blockly.Block, code: string) {\n        if (code === null) {\n            return \"\";\n        }\n\n        let commentCode = \"\";\n        // Only collect comments for blocks that aren't inline.\n        if (\n            !block.outputConnection ||\n            !block.outputConnection.targetConnection\n        ) {\n            // Collect comment for this block.\n            let comment = block.getCommentText();\n            if (comment) {\n                commentCode += this.prefixLines(comment, \"// \") + \"\\n\";\n            }\n            // Collect comments for all value arguments.\n            // Don't collect comments for nested statements.\n            for (let x = 0; x < block.inputList.length; x++) {\n                if (\n                    (block.inputList[x].type as number) ===\n                    (ConnectionType.INPUT_VALUE as number)\n                ) {\n                    const childBlock =\n                        block.inputList[x].connection?.targetBlock();\n                    if (childBlock) {\n                        comment = this.allNestedComments(childBlock);\n                        if (comment) {\n                            commentCode += this.prefixLines(comment, \"// \");\n                        }\n                    }\n                }\n            }\n        }\n\n        const nextBlock =\n            block.nextConnection && block.nextConnection.targetBlock();\n        const nextCode = this.blockToCode(nextBlock);\n        return commentCode + code + nextCode;\n    }\n\n    public workspaceToCode(workspace: Workspace, robotType?: string): string {\n        if (robotType) this.robotType = robotType;\n        return super.workspaceToCode(workspace);\n    }\n}\n\nconst generator = new Arduino();\n\nimport * as arduino from \"./arduino/arduino\";\nimport * as leaphy_common from \"./arduino/variable_blocks\";\nimport * as leaphy_extra from \"./arduino/leaphy_extra\";\nimport * as leaphy_flitz from \"./arduino/leaphy_flitz\";\nimport * as leaphy_original from \"./arduino/leaphy_original\";\nimport * as logic from \"./arduino/logic\";\nimport * as loops from \"./arduino/loops\";\nimport * as math from \"./arduino/math\";\nimport * as procedures from \"./arduino/procedures\";\nimport * as text from \"./arduino/text\";\nimport * as variables from \"./arduino/variables\";\nimport * as lists from \"./arduino/lists\";\nimport * as mesh from \"./arduino/mesh\";\nimport * as rtc from \"./arduino/rtc\";\nimport { listManager } from \"../categories/lists\";\n\narduino.default(generator);\nleaphy_common.default(generator);\nleaphy_extra.default(generator);\nleaphy_original.default(generator);\nleaphy_flitz.default(generator);\nlogic.default(generator);\nloops.default(generator);\nmath.default(generator);\nprocedures.default(generator);\ntext.default(generator);\nvariables.default(generator);\nlists.default(generator);\nmesh.default(generator);\nrtc.default(generator);\n\nexport default generator;\n","import Arduino from \"../arduino\";\n\nconst SELECT_CHANNEL =\n    \"void i2cSelectChannel(uint8_t channel, bool push = true) {\\n\" +\n    \"    if (push) i2cChannelStack.addLast(channel);\\n\" +\n    \"    if (channel <= 7) channel = (1 << channel);\\n\" +\n    \"    Wire.beginTransmission(0x70);\\n\" +\n    \"    Wire.write(channel);\\n\" +\n    \"    Wire.endTransmission();\\n\" +\n    \"}\\n\";\n\nconst RESTORE_CHANNEL =\n    \"void i2cRestoreChannel() {\\n\" +\n    \"    i2cChannelStack.removeLast();\\n\" +\n    \"    uint8_t channel = i2cChannelStack.get(i2cChannelStack.getSize() - 1);\\n\" +\n    \"    i2cSelectChannel(channel, false);\\n\" +\n    \"}\\n\";\n\n// Function to get the current channel in sensor code.\n// Returns 0 in broadcast mode so single sensors work without using the 'select i2c' block\nconst GET_CHANNEL =\n    \"uint8_t i2cGetChannel() {\\n\" +\n    \"    uint8_t channel = i2cChannelStack.get(i2cChannelStack.getSize() - 1);\\n\" +\n    \"    if (channel > 7) channel = 0;\\n\" +\n    \"    return channel;\\n\" +\n    \"}\\n\";\n\nconst BROADCAST_MODE =\n    \"Wire.begin();\\n\" +\n    \"  Wire.setWireTimeout();\\n\" +\n    \"  i2cSelectChannel(0xff);\";\n\nfunction addI2CDeclarations() {\n    Arduino.addInclude(\"wire\", \"#include <Wire.h>\");\n    Arduino.addInclude(\"lists\", \"#include <List.hpp>\");\n    // Yes, this needs to be an include to sort it at the top\n    Arduino.addInclude(\"i2c_channel_stack\", \"List<int> i2cChannelStack;\\n\");\n\n    Arduino.addDeclaration(\"i2c_select_channel\", SELECT_CHANNEL);\n    Arduino.addDeclaration(\"i2c_restore_channel\", RESTORE_CHANNEL);\n    Arduino.addDeclaration(\"i2c_get_channel\", GET_CHANNEL);\n\n    Arduino.addSetup(\"i2c_broadcast_mode\", BROADCAST_MODE);\n}\n\nexport { addI2CDeclarations };\n","import * as Blockly from \"blockly/core\";\nimport { Arduino } from \"../arduino\";\nimport { ISerializer } from \"blockly/core/serialization\";\n\ninterface Procedure {\n    name: string;\n    funcName: string;\n    remote: boolean;\n    arguments: { id: string; name: string }[];\n}\n\nclass ProcedureManager {\n    public procedures: Procedure[] = [];\n\n    setProcedures(procedures: Procedure[]) {\n        this.procedures = procedures;\n    }\n\n    hasArgument(procedure: Procedure, arg: string) {\n        return !!procedure.arguments.find(({ id }) => id === arg);\n    }\n\n    getProcedure(funcName: string) {\n        return this.procedures.find((e) => funcName === e.funcName);\n    }\n}\n\nexport const procedureManager = new ProcedureManager();\n\nexport class ProcedureSerializer implements ISerializer {\n    public priority = 90;\n\n    save() {\n        return procedureManager.procedures;\n    }\n\n    load(state: Procedure[]): void {\n        procedureManager.setProcedures(state);\n    }\n\n    clear(): void {\n        procedureManager.setProcedures([]);\n    }\n}\n\nfunction getCodeGenerators(arduino: Arduino) {\n    arduino.forBlock[\"procedures_defreturn\"] = function (block) {\n        const funcName = arduino.nameDB_?.getName(\n            block.getFieldValue(\"NAME\"),\n            Blockly.Names.NameType.PROCEDURE,\n        ) as string;\n        let branch = arduino.statementToCode(block, \"STACK\");\n        if (arduino.STATEMENT_PREFIX) {\n            branch =\n                arduino.prefixLines(\n                    arduino.STATEMENT_PREFIX.replace(\n                        /%1/g,\n                        \"'\" + block.id + \"'\",\n                    ),\n                    arduino.INDENT,\n                ) + branch;\n        }\n        if (arduino.INFINITE_LOOP_TRAP) {\n            branch =\n                arduino.INFINITE_LOOP_TRAP.replace(\n                    /%1/g,\n                    \"'\" + block.id + \"'\",\n                ) + branch;\n        }\n        let returnValue =\n            arduino.valueToCode(block, \"RETURN\", arduino.ORDER_NONE) || \"\";\n        if (returnValue) {\n            returnValue = \"  return \" + returnValue + \";\\n\";\n        }\n\n        // Get arguments with type\n        const args = [];\n        const { arguments_ } = block as unknown as Record<string, string[]>;\n        for (let x = 0; x < arguments_.length; x++) {\n            args[x] =\n                \"double\" +\n                \" \" +\n                arduino.nameDB_?.getName(\n                    arguments_[x],\n                    Blockly.Names.NameType.VARIABLE,\n                );\n        }\n        let returnType;\n        // Get return type\n        if (block.type == \"procedures_defreturn\") {\n            const checks = block\n                .getInput(\"RETURN\")\n                ?.connection?.targetConnection?.getCheck();\n\n            if (checks && checks[0]) returnType = arduino.TYPES[checks[0]];\n            else returnType = \"double\";\n        } else {\n            returnType = \"void\";\n        }\n\n        // Construct code\n        let code =\n            `${returnType} ${funcName}(${args.join(\", \")}) {\\n` +\n            branch +\n            returnValue +\n            \"}\";\n        code = arduino.scrub_(block, code);\n        arduino.addDeclaration(funcName, code, true);\n        return null;\n    };\n\n    /**\n     * Code generator to create a function without a return value.\n     * It uses the same code as with return value, as it will maintain the void\n     * type.\n     * Arduino code: void functionname { }\n     */\n    arduino.forBlock[\"procedures_defnoreturn\"] =\n        arduino.forBlock[\"procedures_defreturn\"];\n\n    arduino.forBlock[\"procedures_callreturn\"] = function (block) {\n        const funcName = arduino.nameDB_?.getName(\n            block.getFieldValue(\"NAME\"),\n            Blockly.Names.NameType.PROCEDURE,\n        );\n        const args = [];\n        const { arguments_ } = block as unknown as Record<string, string[]>;\n        for (let x = 0; x < arguments_.length; x++) {\n            args[x] =\n                arduino.valueToCode(block, \"ARG\" + x, arduino.ORDER_NONE) ||\n                \"null\";\n        }\n        const code = funcName + \"(\" + args.join(\", \") + \")\";\n        return [code, arduino.ORDER_UNARY_POSTFIX];\n    };\n\n    arduino.forBlock[\"procedures_callnoreturn\"] = function (block) {\n        const funcName = arduino.nameDB_?.getName(\n            block.getFieldValue(\"NAME\"),\n            Blockly.Names.NameType.PROCEDURE,\n        );\n        const args = [];\n        const { arguments_ } = block as unknown as Record<string, string[]>;\n        for (let x = 0; x < arguments_.length; x++) {\n            args[x] =\n                arduino.valueToCode(block, \"ARG\" + x, arduino.ORDER_NONE) ||\n                \"null\";\n        }\n        return funcName + \"(\" + args.join(\", \") + \");\\n\";\n    };\n\n    arduino.forBlock[\"procedures_ifreturn\"] = function (block) {\n        const condition =\n            arduino.valueToCode(block, \"CONDITION\", arduino.ORDER_NONE) ||\n            \"false\";\n        let code = \"if (\" + condition + \") {\\n\";\n\n        const { hasReturnValue_ } = block as unknown as Record<string, boolean>;\n        if (hasReturnValue_) {\n            const value =\n                arduino.valueToCode(block, \"VALUE\", arduino.ORDER_NONE) ||\n                \"null\";\n            code += \"  return \" + value + \";\\n\";\n        } else {\n            code += \"  return;\\n\";\n        }\n        code += \"}\\n\";\n        return code;\n    };\n\n    arduino.forBlock[\"arduino_functions\"] = function (block) {\n        function statementToCodeNoTab(block: Blockly.Block, name: string) {\n            const targetBlock = block.getInputTargetBlock(name);\n            return arduino.blockToCode(targetBlock);\n        }\n\n        const setupBranch = arduino.statementToCode(block, \"SETUP_FUNC\");\n        //var setupCode = Arduino.scrub_(block, setupBranch); No comment block\n        if (setupBranch) {\n            arduino.addSetup(\"userSetupCode\", setupBranch, true);\n        }\n\n        //var loopcode = Arduino.scrub_(block, loopBranch); No comment block\n        return statementToCodeNoTab(block, \"LOOP_FUNC\");\n    };\n}\n\nexport default getCodeGenerators;\n","import { addI2CDeclarations } from \"./i2c\";\nimport { Arduino } from \"../arduino\";\n\nfunction getCodeGenerators(arduino: Arduino) {\n    arduino.forBlock[\"time_delay\"] = function (block) {\n        const delayTime =\n            arduino.valueToCode(\n                block,\n                \"DELAY_TIME_MILI\",\n                arduino.ORDER_ATOMIC,\n            ) || \"0\";\n\n        return \"delay(\" + delayTime + \");\\n\";\n    };\n\n    arduino.forBlock[\"leaphy_serial_available\"] = function () {\n        arduino.addSetup(\"serial\", \"Serial.begin(115200);\", false);\n        const code = \"Serial.available()\";\n        return [code, arduino.ORDER_ATOMIC];\n    };\n\n    arduino.forBlock[\"leaphy_serial_read_line\"] = function () {\n        arduino.addSetup(\"serial\", \"Serial.begin(115200);\", false);\n        const code = \"Serial.readStringUntil('\\\\n')\";\n        return [code, arduino.ORDER_ATOMIC];\n    };\n\n    arduino.forBlock[\"leaphy_serial_print_line\"] = function (block) {\n        arduino.addSetup(\"serial\", \"Serial.begin(115200);\", false);\n        const value =\n            arduino.valueToCode(block, \"VALUE\", arduino.ORDER_ATOMIC) || \"0\";\n        return \"Serial.println(\" + value + \");\\n\";\n    };\n\n    arduino.forBlock[\"leaphy_serial_print_value\"] = function (block) {\n        arduino.addSetup(\"serial\", \"Serial.begin(115200);\", false);\n        const name =\n            arduino.valueToCode(block, \"NAME\", arduino.ORDER_ATOMIC) || \"0\";\n        const value =\n            arduino.valueToCode(block, \"VALUE\", arduino.ORDER_ATOMIC) || \"0\";\n        return (\n            `Serial.print(${name});\\n` +\n            `Serial.print(\" = \");\\n` +\n            `Serial.println(${value});\\n`\n        );\n    };\n\n    arduino.forBlock[\"leaphy_compass_degrees\"] = function () {\n        arduino.addInclude(\"leaphy_compass\", \"#include <QMC5883LCompass.h>\");\n        arduino.addDeclaration(\"leaphy_compass\", \"QMC5883LCompass compass;\");\n        const setup = arduino.addI2CSetup(\n            \"compass\",\n            \"compass.init();\\n    compass.setMagneticDeclination(2, 30);\\n\",\n        );\n        arduino.addDeclaration(\n            \"leaphy_compass_read\",\n            \"int getCompassDegrees() {\\n\" +\n                \"    \" +\n                setup +\n                \"\\n\" +\n                \"    compass.read();\\n\" +\n                \"    int azimuth = compass.getAzimuth();\\n\" +\n                \"    return round((azimuth > -0.5) ? azimuth : azimuth + 360);\\n\" +\n                \"}\\n\",\n        );\n        return [\"getCompassDegrees()\", arduino.ORDER_ATOMIC];\n    };\n\n    arduino.forBlock[\"leaphy_start\"] = function (block) {\n        // Define the Start procedure\n        const funcName = \"leaphyProgram\";\n        let branch = arduino.statementToCode(block, \"STACK\");\n        if (arduino.STATEMENT_PREFIX) {\n            const id = block.id.replace(/\\$/g, \"$$$$\"); // Issue 251.\n            branch =\n                arduino.prefixLines(\n                    arduino.STATEMENT_PREFIX.replace(/%1/g, \"'\" + id + \"'\"),\n                    arduino.INDENT,\n                ) + branch;\n        }\n        if (arduino.INFINITE_LOOP_TRAP) {\n            branch =\n                arduino.INFINITE_LOOP_TRAP.replace(\n                    /%1/g,\n                    \"'\" + block.id + \"'\",\n                ) + branch;\n        }\n        const returnType = \"void\";\n        let code = returnType + \" \" + funcName + \"() {\\n\" + branch + \"}\";\n\n        code = arduino.scrub_(block, code);\n        arduino.addDeclaration(funcName, code, true);\n        arduino.addSetup(\"userSetupCode\", funcName + \"();\", false);\n        return null;\n    };\n\n    arduino.forBlock[\"leaphy_tof_get_distance\"] = function () {\n        arduino.addInclude(\"leaphy_tof\", \"#include <Adafruit_VL53L0X.h>\");\n        arduino.addDeclaration(\"leaphy_tof\", \"Adafruit_VL53L0X i2c_distance;\");\n        const setup = arduino.addI2CSetup(\n            \"tof\",\n            \"i2c_distance.begin();\\n\" +\n                \"      i2c_distance.setMeasurementTimingBudgetMicroSeconds(20000);\\n\",\n        );\n        arduino.addDeclaration(\n            \"leaphy_tof_read\",\n            \"int getTOF() {\\n\" +\n                `    ${setup}\\n` +\n                \"    VL53L0X_RangingMeasurementData_t measure;\\n\" +\n                \"    i2c_distance.rangingTest(&measure, false);\\n\" +\n                \"    if (measure.RangeStatus == 4) return -1;\\n\" +\n                \"    return measure.RangeMilliMeter;\\n\" +\n                \"}\",\n        );\n        return [\"getTOF()\", arduino.ORDER_ATOMIC];\n    };\n\n    arduino.forBlock[\"leaphy_get_air_pressure\"] = function () {\n        arduino.addInclude(\"bmp280\", \"#include <Adafruit_BMP280.h>\");\n        arduino.addDeclaration(\"bmp280\", \"Adafruit_BMP280 bmp280;\");\n        const setup = arduino.addI2CSetup(\n            \"bmp280\",\n            \"bmp280.begin(BMP280_ADDRESS_ALT);\\n\" +\n                \"      bmp280.setSampling(Adafruit_BMP280::MODE_NORMAL,\\n\" +\n                \"                      Adafruit_BMP280::SAMPLING_X2,\\n\" +\n                \"                      Adafruit_BMP280::SAMPLING_X16,\\n\" +\n                \"                      Adafruit_BMP280::FILTER_X16,\\n\" +\n                \"                      Adafruit_BMP280::STANDBY_MS_500);\\n\",\n        );\n        arduino.addDeclaration(\n            \"bmp280_get_air_pressure\",\n            \"double getAirPressure() {\\n\" +\n                `    ${setup}\\n` +\n                \"    return bmp280.readPressure() / 100;\\n\" +\n                \"}\",\n        );\n        return [\"getAirPressure()\", arduino.ORDER_ATOMIC];\n    };\n\n    arduino.forBlock[\"leaphy_gas_sensor\"] = function (block) {\n        arduino.addInclude(\"leaphy_gas_sensor\", \"#include <Adafruit_SGP30.h>\");\n        arduino.addDeclaration(\"leaphy_gas_sensor\", \"Adafruit_SGP30 sgp;\");\n        const setup = arduino.addI2CSetup(\n            \"gas\",\n            \"if (! sgp.begin()) return -1;\\n\",\n        );\n\n        const gasValue = block.getFieldValue(\"GAS\");\n        let code = \"\";\n        if (gasValue === \"TVOC\") {\n            code = \"getGasValueTVOC()\";\n            arduino.addDeclaration(\n                \"leaphy_gas_valueTVOC\",\n                \"int getGasValueTVOC() {\\n\" +\n                    \"    \" +\n                    setup +\n                    \"    sgp.IAQmeasure();\\n\" +\n                    \"    return \" +\n                    \"sgp.TVOC\" +\n                    \";\\n}\\n\",\n            );\n        } else if (gasValue === \"eCO2\") {\n            code = \"getGasValueCOTWO()\";\n            arduino.addDeclaration(\n                \"leaphy_gas_valueCOTWO\",\n                \"int getGasValueCOTWO() {\\n\" +\n                    \"    \" +\n                    setup +\n                    \"    sgp.IAQmeasure();\\n\" +\n                    \"    return \" +\n                    \"sgp.eCO2\" +\n                    \";\\n}\\n\",\n            );\n        } else if (gasValue === \"Raw H2\") {\n            code = \"getGasValueHTWO()\";\n            arduino.addDeclaration(\n                \"leaphy_gas_valueHTWO\",\n                \"int getGasValueHTWO() {\\n\" +\n                    \"    \" +\n                    setup +\n                    \"    sgp.IAQmeasureRaw();\\n\" +\n                    \"    return \" +\n                    \"sgp.rawH2\" +\n                    \";\\n}\\n\",\n            );\n        } else if (gasValue === \"RAWETHANOL\") {\n            code = \"getGasValueETHANOL()\";\n            arduino.addDeclaration(\n                \"leaphy_gas_valueETHANOL\",\n                \"int getGasValueETHANOL() {\\n\" +\n                    \"    \" +\n                    setup +\n                    \"    sgp.IAQmeasureRaw();\\n\" +\n                    \"    return \" +\n                    \"sgp.rawEthanol\" +\n                    \";\\n}\\n\",\n            );\n        }\n        return [code, arduino.ORDER_ATOMIC];\n    };\n\n    arduino.forBlock[\"leaphy_i2c_rgb_color\"] = function (block) {\n        const setup = arduino.addI2CSetup(\"apds9960\", \"APDS.begin();\\n\");\n\n        const rgb_declaration =\n            \"int r[8], g[8], b[8], a[8];\\n\" +\n            \"int getAPDS9960Color(int colorType) {\\n\" +\n            \"    \" +\n            setup +\n            \"    uint8_t channel = i2cGetChannel();\\n\" +\n            \"    if (APDS.colorAvailable()) {\\n\" +\n            \"        APDS.readColor(r[channel], g[channel], b[channel], a[channel]);\\n\" +\n            \"    }\\n\" +\n            \"    switch(colorType) {\\n\" +\n            \"      case 0:\\n\" +\n            \"        return r[channel];\\n\" +\n            \"      case 1:\\n\" +\n            \"        return g[channel];\\n\" +\n            \"      case 2:\\n\" +\n            \"        return b[channel];\\n\" +\n            \"      case 3:\\n\" +\n            \"        return a[channel];\\n\" +\n            \"    }\\n\" +\n            \"}\\n\";\n        const colorType = block.getFieldValue(\"COLOR_TYPE\");\n\n        arduino.addInclude(\"apds9960\", \"#include <Arduino_APDS9960.h>\");\n        arduino.addDeclaration(\"apds9960_rgb\", rgb_declaration);\n        const code = \"getAPDS9960Color(\" + colorType + \")\";\n        return [code, arduino.ORDER_ATOMIC];\n    };\n\n    arduino.forBlock[\"leaphy_i2c_gesture\"] = function () {\n        const setup = arduino.addI2CSetup(\"apds9960\", \"APDS.begin();\\n\");\n        const gesture_declaration =\n            \"int gesture[8];\\n\" +\n            \"int getAPDS9960Gesture() {\\n\" +\n            \"    \" +\n            setup +\n            \"    uint8_t channel = i2cGetChannel();\\n\" +\n            \"    if (APDS.gestureAvailable()) {\\n\" +\n            \"        gesture[channel] = APDS.readGesture();\\n\" +\n            \"    }\\n\" +\n            \"    return gesture[channel];\\n\" +\n            \"}\\n\";\n        arduino.addInclude(\"apds9960\", \"#include <Arduino_APDS9960.h>\");\n        arduino.addDeclaration(\"apds9960_gesture\", gesture_declaration);\n        const code = \"getAPDS9960Gesture()\";\n        return [code, arduino.ORDER_ATOMIC];\n    };\n\n    arduino.forBlock[\"i2c_use_channel\"] = function (block) {\n        const channel = block.getFieldValue(\"CHANNEL\");\n        const innerCode = arduino.statementToCode(block, \"DO\");\n\n        addI2CDeclarations();\n\n        return (\n            \"i2cSelectChannel(\" +\n            channel +\n            \");\\n\" +\n            innerCode +\n            \"i2cRestoreChannel();\\n\"\n        );\n    };\n\n    arduino.forBlock[\"i2c_list_devices\"] = function () {\n        const LIST_DEVICES =\n            \"void i2cListDevices() {\\n\" +\n            \"    for (int channel = 0; channel < 8; channel++) {\\n\" +\n            '        Serial.print(\"Scanning channel \");\\n' +\n            \"        Serial.print(channel);\\n\" +\n            '        Serial.println(\":\");\\n' +\n            \"        \\n\" +\n            \"        i2cSelectChannel(channel);\\n\" +\n            \"        \\n\" +\n            \"        for (DeviceAddress address : deviceMap) {\\n\" +\n            \"            Wire.beginTransmission(address.address);\\n\" +\n            \"            int error = Wire.endTransmission();\\n\" +\n            \"            \\n\" +\n            \"            if (error == 0) {\\n\" +\n            '                Serial.print(\"Found: \");\\n' +\n            \"                Serial.print(address.device);\\n\" +\n            '                Serial.print(\" at address 0x\");\\n' +\n            \"                \\n\" +\n            \"                if (address.address < 16) {\\n\" +\n            '                    Serial.print(\"0\");\\n' +\n            \"                }\\n\" +\n            \"                Serial.println(address.address, HEX);\\n\" +\n            \"            }\\n\" +\n            \"        }\\n\" +\n            \"        \\n\" +\n            \"        i2cRestoreChannel();\\n\" +\n            \"    }\\n\" +\n            \"}\\n\";\n\n        const DEVICE_CHANNEL_MAP =\n            \"struct DeviceAddress { \\n\" +\n            \"  uint8_t address;\\n\" +\n            \"  char* device;\\n\" +\n            \"};\\n\" +\n            \"\\n\" +\n            \"DeviceAddress deviceMap[] = {\\n\" +\n            '    {0x0D, \"Compass\"},\\n' +\n            '    {0x29, \"Color Sensor / ToF Sensor\"},\\n' +\n            '    {0x39, \"RGB + Gesture Sensor\"},\\n' +\n            '    {0x3C, \"Screen\"},\\n' +\n            '    {0x58, \"Gas Sensor\"},\\n' +\n            '    {0x76, \"Air Pressure Sensor\"}\\n' +\n            \"};\\n\";\n\n        arduino.addSetup(\"serial\", \"Serial.begin(115200);\", false);\n        addI2CDeclarations();\n        arduino.addInclude(\"i2c_device_map\", DEVICE_CHANNEL_MAP);\n        arduino.addDeclaration(\"i2c_list_devices\", LIST_DEVICES);\n\n        return \"i2cListDevices();\\n\";\n    };\n\n    arduino.forBlock[\"leaphy_segment_set\"] = function (block) {\n        const num =\n            arduino.valueToCode(block, \"NUM\", arduino.ORDER_ATOMIC) || \"0\";\n\n        return `segment_display.showNumberDec(${num});\\n`;\n    };\n\n    arduino.forBlock[\"leaphy_segment_clear\"] = function () {\n        return \"segment_display.clear();\\n\";\n    };\n\n    arduino.forBlock[\"leaphy_segment_set_brightness\"] = function (block) {\n        const brightness =\n            arduino.valueToCode(block, \"BRIGHTNESS\", arduino.ORDER_ATOMIC) ||\n            \"0\";\n\n        return `segment_display.setBrightness(${brightness}/100*255);\\n`;\n    };\n\n    arduino.forBlock[\"leaphy_matrix_set\"] = function (block) {\n        const x = arduino.valueToCode(block, \"X\", arduino.ORDER_ATOMIC) || \"0\";\n        const y = arduino.valueToCode(block, \"Y\", arduino.ORDER_ATOMIC) || \"0\";\n        const on =\n            arduino.valueToCode(block, \"ON\", arduino.ORDER_ATOMIC) || \"0\";\n\n        return `matrix.setLed(0, ${y}, ${x}, ${on});\\n`;\n    };\n\n    arduino.forBlock[\"leaphy_matrix_set_brightness\"] = function (block) {\n        const brightness =\n            arduino.valueToCode(block, \"BRIGHTNESS\", arduino.ORDER_ATOMIC) ||\n            \"0\";\n\n        return `matrix.setIntensity(0, ${brightness}/100*16);\\n`;\n    };\n\n    arduino.forBlock[\"leaphy_matrix_clear\"] = function () {\n        return `matrix.clearDisplay(0);\\n`;\n    };\n\n    arduino.forBlock[\"leaphy_matrix_fill\"] = function (block) {\n        const matrix = block.getFieldValue(\"MATRIX\");\n\n        return (\n            `matrix.setRow(0, 0, B${matrix[0].join(\"\")});\\n` +\n            `matrix.setRow(0, 1, B${matrix[1].join(\"\")});\\n` +\n            `matrix.setRow(0, 2, B${matrix[2].join(\"\")});\\n` +\n            `matrix.setRow(0, 3, B${matrix[3].join(\"\")});\\n` +\n            `matrix.setRow(0, 4, B${matrix[4].join(\"\")});\\n` +\n            `matrix.setRow(0, 5, B${matrix[5].join(\"\")});\\n` +\n            `matrix.setRow(0, 6, B${matrix[6].join(\"\")});\\n` +\n            `matrix.setRow(0, 7, B${matrix[7].join(\"\")});\\n`\n        );\n    };\n\n    arduino.forBlock[\"leaphy_sound_play\"] = function (block) {\n        const item =\n            arduino.valueToCode(block, \"ITEM\", arduino.ORDER_ATOMIC) || \"0\";\n\n        return `mp3.playWithIndex(${item});\\n`;\n    };\n\n    arduino.forBlock[\"leaphy_sound_stop\"] = function () {\n        return \"mp3.stopPlay();\\n\";\n    };\n\n    arduino.forBlock[\"leaphy_sound_set_volume\"] = function (block) {\n        const volume =\n            arduino.valueToCode(block, \"VOLUME\", arduino.ORDER_ATOMIC) || \"0\";\n\n        return `mp3.setVolume(${volume}/100.0*30.0);\\n`;\n    };\n}\nexport default getCodeGenerators;\n","import { Arduino } from \"../arduino\";\n\nfunction getCodeGenerators(arduino: Arduino) {\n    arduino.forBlock[\"leaphy_segment_init\"] = function (block) {\n        const clk = block.getFieldValue(\"CLK\");\n        const dio = block.getFieldValue(\"DIO\");\n\n        arduino.addInclude(\"tm1637\", \"#include <TM1637Display.h>\");\n        arduino.addDeclaration(\n            \"segment\",\n            `TM1637Display segment_display(${clk}, ${dio});`,\n        );\n        arduino.addSetup(\n            \"segment\",\n            \"segment_display.setBrightness(255);\\n\",\n            false,\n        );\n\n        return \"\";\n    };\n\n    arduino.forBlock[\"leaphy_matrix_init\"] = function (block) {\n        const din = block.getFieldValue(\"DIN\");\n        const clk = block.getFieldValue(\"CLK\");\n        const cs = block.getFieldValue(\"CS\");\n\n        arduino.addInclude(\"matrix\", \"#include <LedControl.h>\");\n        arduino.addDeclaration(\n            \"matrix\",\n            `LedControl matrix = LedControl(${din}, ${clk}, ${cs}, 1);`,\n        );\n        arduino.addSetup(\n            \"matrix\",\n            \"matrix.shutdown(0, false);\\n\" +\n                \"  matrix.setIntensity(0, 8);\\n\" +\n                \"  matrix.clearDisplay(0);\",\n        );\n\n        return \"\";\n    };\n\n    arduino.forBlock[\"leaphy_sound_init\"] = function (block) {\n        const RX = block.getFieldValue(\"RX\");\n        const TX = block.getFieldValue(\"TX\");\n\n        arduino.addInclude(\"sound\", \"#include <RedMP3.h>\");\n        arduino.addDeclaration(\"sound\", `MP3 mp3(${RX}, ${TX});`);\n\n        return \"\";\n    };\n}\n\nexport default getCodeGenerators;\n","import { Arduino } from \"../arduino\";\n\nfunction getCodeGenerators(arduino: Arduino) {\n    function addRGBColorDefinitions() {\n        const includeDefinition = '#include \"Adafruit_TCS34725.h\"';\n        const variablesDefinition =\n            \"Adafruit_TCS34725 tcs = Adafruit_TCS34725(TCS34725_INTEGRATIONTIME_24MS, TCS34725_GAIN_16X);\\n\";\n        const rgbColorSetupCode =\n            'if (tcs.begin()) {\\n    Serial.println(\"RGB-sensor gevonden!\");\\n  } else {\\n    Serial.println(\"Geen RGB-sensor gevonden... check je verbindingen...\");\\n  }\\n';\n        const rgbColorSetup = arduino.addI2CSetup(\n            \"rgb_color\",\n            rgbColorSetupCode,\n        );\n        const getColorDefinition =\n            \"double getColor(int colorCode, bool isRaw) {\\n\" +\n            \"  \" +\n            rgbColorSetup +\n            \"  uint16_t RawColor_Red, RawColor_Green, RawColor_Blue, RawColor_Clear;\\n\" +\n            \"  byte Color_Red, Color_Green, Color_Blue, Color_Clear;\\n\" +\n            \"  tcs.getRawData(&RawColor_Red, &RawColor_Green, &RawColor_Blue, &RawColor_Clear);\\n\" +\n            \"  Color_Red = min(RawColor_Red/5,255); Color_Green = min(RawColor_Green/5,255); Color_Blue = min(RawColor_Blue/5,255);\\n\" +\n            \"  switch(colorCode) {\\n\" +\n            \"    case 0:\\n\" +\n            \"      return (isRaw) ? RawColor_Red : Color_Red;\\n\" +\n            \"    case 1:\\n\" +\n            \"      return (isRaw) ? RawColor_Green : Color_Green;\\n\" +\n            \"    case 2:\\n\" +\n            \"      return (isRaw) ? RawColor_Blue : Color_Blue;\\n\" +\n            \"  }\\n\" +\n            \"}\\n\";\n        arduino.addInclude(\"define_leaphy_rgb\", includeDefinition);\n        arduino.addInclude(\"define_leaphy_rgb_var\", variablesDefinition);\n        arduino.addDeclaration(\"define_get_color\", getColorDefinition);\n    }\n\n    arduino.forBlock[\"leaphy_rgb_color\"] = function (block) {\n        addRGBColorDefinitions();\n        const colorType = block.getFieldValue(\"COLOR_TYPE\");\n        const code = \"getColor(\" + colorType + \", false)\";\n        return [code, arduino.ORDER_ATOMIC];\n    };\n\n    arduino.forBlock[\"leaphy_rgb_color_raw\"] = function (block) {\n        addRGBColorDefinitions();\n        const colorType = block.getFieldValue(\"COLOR_TYPE_RAW\");\n        const code = \"getColor(\" + colorType + \", true)\";\n        return [code, arduino.ORDER_ATOMIC];\n    };\n\n    arduino.forBlock[\"leaphy_rgb_raw_color_red\"] = function () {\n        addRGBColorDefinitions();\n        const code = \"getColor(0, true)\";\n        return [code, arduino.ORDER_ATOMIC];\n    };\n\n    arduino.forBlock[\"leaphy_rgb_raw_color_green\"] = function () {\n        addRGBColorDefinitions();\n        const code = \"getColor(1, true)\";\n        return [code, arduino.ORDER_ATOMIC];\n    };\n\n    arduino.forBlock[\"leaphy_rgb_raw_color_blue\"] = function () {\n        addRGBColorDefinitions();\n        const code = \"getColor(2, true)\";\n        return [code, arduino.ORDER_ATOMIC];\n    };\n\n    arduino.forBlock[\"leaphy_led_set_strip\"] = function (block) {\n        const pin =\n            arduino.valueToCode(block, \"LED_SET_PIN\", arduino.ORDER_ATOMIC) ||\n            \"0\";\n        const leds =\n            arduino.valueToCode(block, \"LED_SET_LEDS\", arduino.ORDER_ATOMIC) ||\n            \"0\";\n\n        arduino.addInclude(\"led_libs\", '#include \"ledstrip.h\"');\n        arduino.addDeclaration(\n            \"leds_pins\",\n            `LEDSTRIP ledstrip(${pin}, ${leds});`,\n        );\n\n        arduino.reservePin(block, pin, arduino.PinTypes.LEDSTRIP, \"Led Strip\");\n        return \"\";\n    };\n\n    arduino.forBlock[\"leaphy_led_set_basic\"] = function (block) {\n        const led =\n            arduino.valueToCode(block, \"LED_SET_LED\", arduino.ORDER_ATOMIC) ||\n            \"0\";\n        const red =\n            arduino.valueToCode(block, \"LED_BASIC_RED\", arduino.ORDER_ATOMIC) ||\n            \"0\";\n        const green =\n            arduino.valueToCode(\n                block,\n                \"LED_BASIC_GREEN\",\n                arduino.ORDER_ATOMIC,\n            ) || \"0\";\n        const blue =\n            arduino.valueToCode(\n                block,\n                \"LED_BASIC_BLUE\",\n                arduino.ORDER_ATOMIC,\n            ) || \"0\";\n        return `ledstrip.basis(${led}, ${red}, ${green}, ${blue});\\n`;\n    };\n\n    arduino.forBlock[\"leaphy_led_set_speed\"] = function (block) {\n        const speedValue =\n            arduino.valueToCode(\n                block,\n                \"LED_SET_SPEEDVALUE\",\n                arduino.ORDER_ATOMIC,\n            ) || \"0\";\n        return `_snelHeid = ${speedValue}`;\n    };\n\n    arduino.forBlock[\"leaphy_led_strip_demo\"] = function (block) {\n        const dropdownType = block.getFieldValue(\"DEMO_TYPE\");\n        const red =\n            arduino.valueToCode(\n                block,\n                \"LED_STRIP_DEMO_RED\",\n                arduino.ORDER_ATOMIC,\n            ) || \"0\";\n        const green =\n            arduino.valueToCode(\n                block,\n                \"LED_STRIP_DEMO_GREEN\",\n                arduino.ORDER_ATOMIC,\n            ) || \"0\";\n        const blue =\n            arduino.valueToCode(\n                block,\n                \"LED_STRIP_DEMO_BLUE\",\n                arduino.ORDER_ATOMIC,\n            ) || \"0\";\n        return `ledstrip.runFunction(${dropdownType}, ${red}, ${green}, ${blue});\\n`;\n    };\n\n    arduino.forBlock[\"leaphy_servo_write\"] = function (block) {\n        const pinKey = block.getFieldValue(\"SERVO_PIN\");\n        const servoAngle =\n            arduino.valueToCode(block, \"SERVO_ANGLE\", arduino.ORDER_ATOMIC) ||\n            \"90\";\n        const servoName = \"myServo\" + pinKey;\n\n        arduino.reservePin(\n            block,\n            pinKey,\n            arduino.PinTypes.SERVO,\n            \"Servo Write\",\n        );\n\n        arduino.addInclude(\"servo\", \"#include <Servo.h>\");\n        arduino.addDeclaration(\"servo_\" + pinKey, \"Servo \" + servoName + \";\");\n\n        const setupCode = servoName + \".attach(\" + pinKey + \");\";\n        arduino.addSetup(\"servo_\" + pinKey, setupCode, true);\n\n        return `${servoName}.write(${servoAngle});\\n`;\n    };\n\n    arduino.forBlock[\"leaphy_servo_read\"] = function (block) {\n        const pinKey = block.getFieldValue(\"SERVO_PIN\");\n        const servoName = \"myServo\" + pinKey;\n\n        arduino.reservePin(block, pinKey, arduino.PinTypes.SERVO, \"Servo Read\");\n\n        arduino.addInclude(\"servo\", \"#include <Servo.h>\");\n        arduino.addDeclaration(\"servo_\" + pinKey, \"Servo \" + servoName + \";\");\n\n        const setupCode = servoName + \".attach(\" + pinKey + \");\";\n        arduino.addSetup(\"servo_\" + pinKey, setupCode, true);\n\n        const code = servoName + \".read()\";\n        return [code, arduino.ORDER_ATOMIC];\n    };\n\n    arduino.forBlock[\"leaphy_io_digitalwrite\"] = function (block) {\n        const pin = block.getFieldValue(\"PIN\");\n        const stateOutput =\n            arduino.valueToCode(block, \"STATE\", arduino.ORDER_ATOMIC) ||\n            \"false\";\n\n        arduino.reservePin(\n            block,\n            pin,\n            arduino.PinTypes.OUTPUT,\n            \"Digital Write\",\n        );\n\n        const pinSetupCode = \"pinMode(\" + pin + \", OUTPUT);\";\n        arduino.addSetup(\"io_\" + pin, pinSetupCode, false);\n\n        return `digitalWrite(${pin}, ${stateOutput});\\n`;\n    };\n\n    arduino.forBlock[\"leaphy_io_analogwrite\"] = function (block) {\n        const pin = block.getFieldValue(\"PIN\");\n        const stateOutput =\n            arduino.valueToCode(block, \"NUM\", arduino.ORDER_ATOMIC) || \"0\";\n\n        arduino.reservePin(\n            block,\n            pin,\n            arduino.PinTypes.OUTPUT,\n            \"Analogue Write\",\n        );\n\n        const pinSetupCode = \"pinMode(\" + pin + \", OUTPUT);\";\n        arduino.addSetup(\"io_\" + pin, pinSetupCode, false);\n\n        // Warn if the input value is out of range\n        if (Number(stateOutput) < 0 || Number(stateOutput) > 255) {\n            block.setWarningText(\n                \"The analogue value set must be between 0 and 255\",\n                \"pwm_value\",\n            );\n        } else {\n            block.setWarningText(null);\n        }\n\n        return `analogWrite(${pin}, ${stateOutput});\\n`;\n    };\n\n    arduino.forBlock[\"leaphy_multiplexer_digitalwrite\"] = function (block) {\n        const pin = block.getFieldValue(\"PIN\");\n\n        const pinSetupCode =\n            \"pinMode(0, OUTPUT);\\n\" +\n            \"  pinMode(16, OUTPUT);\\n\" +\n            \"  pinMode(1, OUTPUT);\\n\";\n        arduino.addSetup(\"dgmulti\", pinSetupCode, false);\n\n        return (\n            `digitalWrite(0, bitRead(${pin}, 2));\\n` +\n            `digitalWrite(16, bitRead(${pin}, 1));\\n` +\n            `digitalWrite(1, bitRead(${pin}, 0));\\n`\n        );\n    };\n\n    arduino.forBlock[\"leaphy_sonar_read\"] = function (block) {\n        arduino.addInclude(\"leaphy_extra\", '#include \"Leaphy_Extra.h\"');\n        const trigPin = block.getFieldValue(\"TRIG_PIN\");\n        const echoPin = block.getFieldValue(\"ECHO_PIN\");\n        const code = `getDistanceSonar(${trigPin}, ${echoPin})`;\n        return [code, arduino.ORDER_ATOMIC];\n    };\n\n    const addDisplaySetupCode = () => {\n        const displaySetup =\n            'if(!display.begin())\\n  {\\n    Serial.println(F(\"Contact with the display failed: Check the connections\"));\\n  }\\n';\n        const setup = arduino.addI2CSetup(\"oled\", displaySetup);\n\n        arduino.addInclude(\"include_display\", '#include \"OLED_Display.h\"');\n        arduino.addInclude(\"define_display\", \"OLEDDISPLAY display;\");\n        arduino.addSetup(\"serial\", \"Serial.begin(115200);\");\n        return setup;\n    };\n\n    arduino.forBlock[\"leaphy_display_clear\"] = function () {\n        const setup = addDisplaySetupCode();\n        return setup + \"display.clearDisplay();\\n\";\n    };\n\n    arduino.forBlock[\"leaphy_display_set_text_size\"] = function (block) {\n        const setup = addDisplaySetupCode();\n\n        const stateOutput =\n            arduino.valueToCode(block, \"NUM\", arduino.ORDER_ATOMIC) || \"0\";\n        return setup + \"display.setTextSize(\" + stateOutput + \");\\n\";\n    };\n\n    arduino.forBlock[\"leaphy_display_print_line\"] = function (block) {\n        const setup = addDisplaySetupCode();\n\n        const value =\n            arduino.valueToCode(block, \"VALUE\", arduino.ORDER_ATOMIC) || \"0\";\n        const row = block.getFieldValue(\"DISPLAY_ROW\");\n        const cursorHeight = row * 12;\n        return (\n            setup +\n            `display.setCursor(0, ${cursorHeight});\\n` +\n            `display.println(${value});\\n`\n        );\n    };\n\n    arduino.forBlock[\"leaphy_display_print_value\"] = function (block) {\n        const setup = addDisplaySetupCode();\n\n        const name =\n            arduino.valueToCode(block, \"NAME\", arduino.ORDER_ATOMIC) || \"0\";\n        const value =\n            arduino.valueToCode(block, \"VALUE\", arduino.ORDER_ATOMIC) || \"0\";\n        const row = block.getFieldValue(\"DISPLAY_ROW\");\n        const cursorHeight = row * 12;\n        return (\n            setup +\n            `display.setCursor(0, ${cursorHeight});\\n` +\n            `display.print(${name});\\n` +\n            `display.print(\" = \");\\n` +\n            `display.println(${value});\\n`\n        );\n    };\n\n    arduino.forBlock[\"leaphy_display_display\"] = function () {\n        const setup = addDisplaySetupCode();\n        return setup + \"display.display();\\n\";\n    };\n}\n\nexport default getCodeGenerators;\n","import { Arduino } from \"../arduino\";\n\nfunction getCodeGenerators(arduino: Arduino) {\n    arduino.forBlock[\"leaphy_flitz_read_stomach_sensor\"] = function (block) {\n        const sensorType = block.getFieldValue(\"SENSOR_TYPE\");\n\n        let code = \"\";\n        let setup = \"\";\n        if (sensorType == \"1\") {\n            setup =\n                \"pinMode(8, OUTPUT);\\n  pinMode(9, OUTPUT);\\n  pinMode(10, INPUT);\\n  digitalWrite(8, LOW);\\n  digitalWrite(9, HIGH);\\n\";\n            code = \"digitalRead(10)\";\n        } else if (sensorType == \"2\") {\n            setup =\n                \"pinMode(8, INPUT);\\n  pinMode(9, OUTPUT);\\n  pinMode(10, OUTPUT);\\n  digitalWrite(8, LOW);\\n  digitalWrite(9, HIGH);\\n\";\n            code = \"digitalRead(8)\";\n        }\n        arduino.addSetup(\"setup_flitz_stomach\", setup, false);\n        return [code, arduino.ORDER_ATOMIC];\n    };\n\n    arduino.forBlock[\"leaphy_flitz_nano_read_stomach_sensor\"] = function () {\n        const setup = \"pinMode(2, INPUT);\";\n        const code = \"digitalRead(2)\";\n        arduino.addSetup(\"setup_flitz_stomach\", setup, false);\n        return [code, arduino.ORDER_ATOMIC];\n    };\n\n    arduino.forBlock[\"leaphy_flitz_read_hand_sensor\"] = function () {\n        arduino.addSetup(\n            \"setup_flitz_hand\",\n            \"pinMode(14, OUTPUT);\\n pinMode(15, OUTPUT);\\n pinMode(2, INPUT);\\n digitalWrite(14, HIGH);\\n digitalWrite(15, LOW);\\n\",\n            false,\n        );\n        const code = \"analogRead(2)\";\n        return [code, arduino.ORDER_ATOMIC];\n    };\n\n    arduino.forBlock[\"leaphy_flitz_nano_read_hand_sensor\"] = function () {\n        arduino.addSetup(\"setup_flitz_hand\", \"pinMode(A0, INPUT);\", false);\n        const code = \"analogRead(A0)\";\n        return [code, arduino.ORDER_ATOMIC];\n    };\n\n    arduino.forBlock[\"leaphy_flitz_led\"] = function (block) {\n        const flitz_red =\n            arduino.valueToCode(block, \"FLITZ_LED_R\", arduino.ORDER_ATOMIC) ||\n            \"0\";\n        const flitz_green =\n            arduino.valueToCode(block, \"FLITZ_LED_G\", arduino.ORDER_ATOMIC) ||\n            \"0\";\n        const flitz_blue =\n            arduino.valueToCode(block, \"FLITZ_LED_B\", arduino.ORDER_ATOMIC) ||\n            \"0\";\n\n        let code;\n        if (arduino.robotType.includes(\"nano\")) {\n            // Ground is connected to pin 8 on the nano, so it needs to be pulled LOW\n            arduino.addSetup(\n                \"setup_flitz_nano_rgb\",\n                \"pinMode(8, OUTPUT);\\n  digitalWrite(8, LOW);\",\n                false,\n            );\n            code =\n                `analogWrite(11, ${flitz_red});\\n` +\n                `analogWrite(10, ${flitz_green});\\n` +\n                `analogWrite(9, ${flitz_blue});\\n`;\n        } else {\n            code =\n                `analogWrite(3, ${flitz_red});\\n` +\n                `analogWrite(5, ${flitz_green});\\n` +\n                `analogWrite(6, ${flitz_blue});\\n`;\n        }\n\n        return code;\n    };\n}\n\nexport default getCodeGenerators;\n","import { BlockDefinition } from \"blockly/core/blocks\";\n\nconst motorLeftRightDropdown = [\n    [\"%{BKY_LEAPHY_MOTOR_LEFT_DROPDOWN}\", \"9\"],\n    [\"%{BKY_LEAPHY_MOTOR_RIGHT_DROPDOWN}\", \"10\"],\n];\n\nexport enum MotorDirection {\n    FORWARD = \"1\",\n    BACKWARD = \"2\",\n    LEFT = \"3\",\n    RIGHT = \"4\",\n}\n\nconst motorForwardBackwardDropdown = [\n    [\"%{BKY_LEAPHY_MOTOR_FORWARD}\", MotorDirection.FORWARD],\n    [\"%{BKY_LEAPHY_MOTOR_BACKWARD}\", MotorDirection.BACKWARD],\n    [\"%{BKY_LEAPHY_MOTOR_LEFT}\", MotorDirection.LEFT],\n    [\"%{BKY_LEAPHY_MOTOR_RIGHT}\", MotorDirection.RIGHT],\n];\n\nconst blocks: BlockDefinition = [\n    {\n        type: \"leaphy_original_set_led\",\n        helpUrl:\n            \"https://www.leaphyfoundation.com/tutorials-leaphy-electronics.html#:~:text=Different%20types%20of%20leds\",\n        message0:\n            \"%%{BKY_LEAPHY_LED} %1 %%{BKY_LEAPHY_LED_RED} %2 %%{BKY_LEAPHY_LED_GREEN} %3 %%{BKY_LEAPHY_LED_BLUE} %4\",\n        args0: [\n            { type: \"input_dummy\" },\n            { type: \"input_value\", name: \"LED_RED\", check: \"Number\" },\n            { type: \"input_value\", name: \"LED_GREEN\", check: \"Number\" },\n            { type: \"input_value\", name: \"LED_BLUE\", check: \"Number\" },\n        ],\n        inputsInline: true,\n        previousStatement: null,\n        nextStatement: null,\n        style: \"leaphy_blocks\",\n    },\n    {\n        type: \"leaphy_original_set_motor\",\n        helpUrl:\n            \"https://www.leaphyfoundation.com/tutorials-leaphy-electronics.html#:~:text=types%20of%20leds-,TT%20motors,-Servo%20motors\",\n        message0:\n            \"%%{BKY_LEAPHY_MOTOR_TYPE} %1 %2 %%{BKY_LEAPHY_MOTOR_SPEED} %3\",\n        args0: [\n            {\n                type: \"field_dropdown\",\n                name: \"MOTOR_TYPE\",\n                options: motorLeftRightDropdown,\n            },\n            { type: \"input_dummy\" },\n            { type: \"input_value\", name: \"MOTOR_SPEED\", check: \"Number\" },\n        ],\n        inputsInline: true,\n        previousStatement: null,\n        nextStatement: null,\n        style: \"leaphy_blocks\",\n    },\n    {\n        type: \"leaphy_original_get_distance\",\n        helpUrl:\n            \"https://www.leaphyfoundation.com/tutorials-leaphy-electronics.html#:~:text=Programming-,Ultrasonic%20sensor,-Light%20sensor\",\n        message0: \"%%{BKY_LEAPHY_GET_DISTANCE}\",\n        style: \"leaphy_blocks\",\n        output: \"Number\",\n    },\n    {\n        type: \"leaphy_original_move_motors\",\n        helpUrl:\n            \"https://www.leaphyfoundation.com/tutorials-leaphy-electronics.html#:~:text=types%20of%20leds-,TT%20motors,-Servo%20motors\",\n        message0: \"%%{BKY_LEAPHY_MOTOR_DIRECTION} %1 %2  %3\",\n        args0: [\n            {\n                type: \"field_dropdown\",\n                name: \"MOTOR_DIRECTION\",\n                options: motorForwardBackwardDropdown,\n            },\n            { type: \"input_dummy\" },\n            { type: \"input_value\", name: \"MOTOR_SPEED\", check: \"Number\" },\n        ],\n        inputsInline: true,\n        previousStatement: null,\n        nextStatement: null,\n        style: \"leaphy_blocks\",\n    },\n    {\n        type: \"leaphy_original_buzz\",\n        message0:\n            \"%%{BKY_LEAPHY_BUZZ_BUZZ} %1 %%{BKY_LEAPHY_BUZZ_HERTZ} %2 %%{BKY_LEAPHY_BUZZ_MS}\",\n        args0: [\n            { type: \"input_value\", name: \"FREQUENCY\", check: \"Number\" },\n            { type: \"input_value\", name: \"DURATION\", check: \"Number\" },\n        ],\n        inputsInline: true,\n        previousStatement: null,\n        nextStatement: null,\n        style: \"leaphy_blocks\",\n    },\n    {\n        type: \"leaphy_original_servo_set\",\n        helpUrl:\n            \"https://www.leaphyfoundation.com/tutorials-leaphy-electronics.html#:~:text=TT%20motors-,Servo%20motors,-Rotating%20servo%20motor\",\n        message0: \"%{BKY_LEAPHY_SERVO_SET}\",\n        args0: [\n            {\n                type: \"field_dropdown\",\n                name: \"MOTOR\",\n                options: [\n                    [\"%{BKY_LEAPHY_MOTOR_LEFT_DROPDOWN}\", \"left\"],\n                    [\"%{BKY_LEAPHY_MOTOR_RIGHT_DROPDOWN}\", \"right\"],\n                ],\n            },\n            {\n                type: \"input_value\",\n                name: \"SPEED\",\n                check: \"Number\",\n            },\n        ],\n        inputsInline: true,\n        previousStatement: null,\n        nextStatement: null,\n        style: \"leaphy_blocks\",\n    },\n    {\n        type: \"leaphy_original_servo_move\",\n        helpUrl:\n            \"https://www.leaphyfoundation.com/tutorials-leaphy-electronics.html#:~:text=TT%20motors-,Servo%20motors,-Rotating%20servo%20motor\",\n        message0: \"%{BKY_LEAPHY_SERVO_MOVE}\",\n        args0: [\n            {\n                type: \"field_dropdown\",\n                name: \"DIRECTION\",\n                options: [\n                    [\"%{BKY_LEAPHY_MOTOR_FORWARD}\", \"forward\"],\n                    [\"%{BKY_LEAPHY_MOTOR_BACKWARD}\", \"backward\"],\n                    [\"%{BKY_LEAPHY_MOTOR_LEFT}\", \"left\"],\n                    [\"%{BKY_LEAPHY_MOTOR_RIGHT}\", \"right\"],\n                ],\n            },\n            {\n                type: \"input_value\",\n                name: \"SPEED\",\n                check: \"Number\",\n            },\n        ],\n        inputsInline: true,\n        previousStatement: null,\n        nextStatement: null,\n        style: \"leaphy_blocks\",\n    },\n];\n\nexport { blocks };\n","import { Arduino } from \"../arduino\";\nimport { MotorDirection } from \"../../blocks/leaphy_original\";\n\nfunction getCodeGenerators(arduino: Arduino) {\n    arduino.forBlock[\"leaphy_original_set_led\"] = function (block) {\n        const red =\n            arduino.valueToCode(block, \"LED_RED\", arduino.ORDER_ATOMIC) || \"0\";\n        const green =\n            arduino.valueToCode(block, \"LED_GREEN\", arduino.ORDER_ATOMIC) ||\n            \"0\";\n        const blue =\n            arduino.valueToCode(block, \"LED_BLUE\", arduino.ORDER_ATOMIC) || \"0\";\n\n        let pin_red, pin_blue, pin_green;\n        if (arduino.robotType.includes(\"nano\")) {\n            pin_red = 11;\n            pin_green = 10;\n            pin_blue = 9;\n            arduino.addSetup(\n                \"setup_nano_rgb\",\n                \"pinMode(8, OUTPUT);\\n  digitalWrite(8, LOW);\",\n                false,\n            );\n        } else {\n            pin_red = 3;\n            pin_green = 5;\n            pin_blue = 6;\n        }\n        // Ground is connected to pin 8 on the nano, so it needs to be pulled LOW\n        const code =\n            `analogWrite(${pin_red}, ${red});\\n` +\n            `analogWrite(${pin_green}, ${green});\\n` +\n            `analogWrite(${pin_blue}, ${blue});\\n`;\n\n        return code;\n    };\n\n    arduino.forBlock[\"leaphy_original_set_motor\"] = function (block) {\n        const dropdown_Type = block.getFieldValue(\"MOTOR_TYPE\");\n        let speed =\n            arduino.valueToCode(block, \"MOTOR_SPEED\", arduino.ORDER_ATOMIC) ||\n            \"100\";\n\n        arduino.addInclude(\n            \"include_leaphy_original\",\n            '#include \"Leaphyoriginal1.h\"',\n        );\n        // Set different motor pins for nano robots\n        if (arduino.robotType.includes(\"nano\")) {\n            if (parseInt(speed) > 0) {\n                // Map the speed to a range of 150 - 255 to compensate for low PWM signal voltage\n                speed = `map(${speed}, 0, 255, 150, 255)`;\n            }\n            arduino.addSetup(\n                \"set_motor_pins\",\n                \"setMotorPins(3, 2, 11, 4);\",\n                true,\n            );\n        }\n\n        return `setMotor(${dropdown_Type}, ${speed});\\n`;\n    };\n\n    arduino.forBlock[\"leaphy_click_set_motor\"] =\n        arduino.forBlock[\"leaphy_original_set_motor\"];\n\n    arduino.forBlock[\"leaphy_original_get_distance\"] = function () {\n        arduino.addInclude(\n            \"include_leaphy_original\",\n            '#include \"Leaphyoriginal1.h\"',\n        );\n        if (arduino.robotType === \"l_original_nano\") {\n            arduino.addSetup(\"set_us_pins\", \"setUSPins(16, 17);\", true);\n        }\n\n        const code = \"getDistance()\";\n        return [code, arduino.ORDER_ATOMIC];\n    };\n\n    arduino.forBlock[\"leaphy_original_move_motors\"] = function (block) {\n        let direction = block.getFieldValue(\n            \"MOTOR_DIRECTION\",\n        ) as MotorDirection;\n        let speed =\n            arduino.valueToCode(block, \"MOTOR_SPEED\", arduino.ORDER_ATOMIC) ||\n            \"100\";\n        arduino.addInclude(\n            \"include_leaphy_original\",\n            '#include \"Leaphyoriginal1.h\"',\n        );\n\n        // Set different motor pins for nano robots\n        if (arduino.robotType.includes(\"nano\")) {\n            // Map the speed to a range of 150 - 255 to compensate for low PWM signal voltage\n            if (parseInt(speed) > 0) {\n                speed = `map(${speed}, 0, 255, 150, 255)`;\n            }\n            const directionMap: Record<MotorDirection, number> = {\n                [MotorDirection.FORWARD]: 2,\n                [MotorDirection.BACKWARD]: 1,\n                [MotorDirection.LEFT]: 4,\n                [MotorDirection.RIGHT]: 3,\n            };\n            direction = directionMap[direction];\n            arduino.addSetup(\n                \"set_motor_pins\",\n                \"setMotorPins(3, 2, 11, 4);\",\n                true,\n            );\n        }\n\n        return `moveMotors(${direction}, ${speed});\\n`;\n    };\n\n    arduino.forBlock[\"digital_read\"] = function (block) {\n        const dropdown_pin = block.getFieldValue(\"PIN\");\n        arduino.setups_[\"setup_input_\" + dropdown_pin] =\n            \"pinMode(\" + dropdown_pin + \", INPUT);\";\n        const code = \"digitalRead(\" + dropdown_pin + \")\";\n        return [code, arduino.ORDER_ATOMIC];\n    };\n\n    arduino.forBlock[\"analog_read\"] = function (block) {\n        const dropdown_pin = block.getFieldValue(\"PIN\");\n        const code = \"analogRead(\" + dropdown_pin + \")\";\n        return [code, arduino.ORDER_ATOMIC];\n    };\n\n    arduino.forBlock[\"leaphy_original_buzz\"] = function (block) {\n        arduino.addInclude(\"arduino\", \"#include <Arduino.h>\");\n        arduino.addSetup(\"tone\", \"pinMode(4, OUTPUT);\", false);\n        const frequency =\n            arduino.valueToCode(block, \"FREQUENCY\", arduino.ORDER_ATOMIC) ||\n            \"0\";\n        const duration =\n            arduino.valueToCode(block, \"DURATION\", arduino.ORDER_ATOMIC) || \"0\";\n        return `tone(4, ${frequency}, ${duration});\\n`;\n    };\n\n    arduino.forBlock[\"leaphy_original_servo_set\"] = function (block) {\n        arduino.addInclude(\"servo\", \"#include <Servo.h>\");\n        arduino.addDeclaration(\"servo_left\", \"Servo servo_left;\");\n        arduino.addDeclaration(\"servo_right\", \"Servo servo_right;\");\n        arduino.addSetup(\"servo_left\", \"servo_left.attach(12);\", false);\n        arduino.addSetup(\"servo_right\", \"servo_right.attach(13);\", false);\n\n        const motor = block.getFieldValue(\"MOTOR\");\n        const speed =\n            arduino.valueToCode(block, \"SPEED\", arduino.ORDER_ATOMIC) || \"100\";\n        const direction = motor == \"left\" ? 1 : -1;\n\n        return `servo_${motor}.write(90 + 90*${speed}/100*${direction});\\n`;\n    };\n\n    arduino.forBlock[\"leaphy_original_servo_move\"] = function (block) {\n        arduino.addInclude(\"servo\", \"#include <Servo.h>\");\n        arduino.addDeclaration(\"servo_left\", \"Servo servo_left;\");\n        arduino.addDeclaration(\"servo_right\", \"Servo servo_right;\");\n        arduino.addSetup(\"servo_left\", \"servo_left.attach(12);\", false);\n        arduino.addSetup(\"servo_right\", \"servo_right.attach(13);\", false);\n\n        const MOTOR_SPEEDS: Record<string, [number, number]> = {\n            forward: [1, -1],\n            backward: [-1, 1],\n            left: [-1, -1],\n            right: [1, 1],\n        };\n        const direction = block.getFieldValue(\"DIRECTION\");\n        const speed =\n            arduino.valueToCode(block, \"SPEED\", arduino.ORDER_ATOMIC) || \"100\";\n        const motor_left = MOTOR_SPEEDS[direction][0];\n        const motor_right = MOTOR_SPEEDS[direction][1];\n\n        return (\n            `servo_left.write(90 + 90*${speed}/100*${motor_left});\\n` +\n            `servo_right.write(90 + 90*${speed}/100*${motor_right});\\n`\n        );\n    };\n}\n\nexport default getCodeGenerators;\n","import { Arduino } from \"../arduino\";\n\nfunction getCodeGenerators(arduino: Arduino) {\n    arduino.forBlock[\"controls_if\"] = function (block) {\n        let n = 0;\n\n        let argument =\n            arduino.valueToCode(block, \"IF\" + n, arduino.ORDER_NONE) || \"false\";\n        let branch = arduino.statementToCode(block, \"DO\" + n);\n        let code = \"if (\" + argument + \") {\\n\" + branch + \"}\";\n\n        const blockProps = block as unknown as Record<string, number>;\n        for (n = 1; n <= blockProps.elseifCount_; n++) {\n            argument =\n                arduino.valueToCode(block, \"IF\" + n, arduino.ORDER_NONE) ||\n                \"false\";\n            branch = arduino.statementToCode(block, \"DO\" + n);\n            code += \" else if (\" + argument + \") {\\n\" + branch + \"}\";\n        }\n        if (blockProps.elseCount_) {\n            branch = arduino.statementToCode(block, \"ELSE\");\n            code += \" else {\\n\" + branch + \"}\";\n        }\n        return code + \"\\n\";\n    };\n\n    arduino.forBlock[\"logic_compare\"] = function (block) {\n        const OPERATORS: Record<string, string> = {\n            EQ: \"==\",\n            NEQ: \"!=\",\n            LT: \"<\",\n            LTE: \"<=\",\n            GT: \">\",\n            GTE: \">=\",\n        };\n        const operator = OPERATORS[block.getFieldValue(\"OP\")];\n        const order =\n            operator == \"==\" || operator == \"!=\"\n                ? arduino.ORDER_EQUALITY\n                : arduino.ORDER_RELATIONAL;\n        const argument0 = arduino.valueToCode(block, \"A\", order) || \"0\";\n        const argument1 = arduino.valueToCode(block, \"B\", order) || \"0\";\n\n        const code = `${argument0} ${operator} ${argument1}`;\n        return [code, order];\n    };\n\n    arduino.forBlock[\"logic_operation\"] = function (block) {\n        const operator = block.getFieldValue(\"OP\") == \"AND\" ? \"&&\" : \"||\";\n        const order =\n            operator == \"&&\"\n                ? arduino.ORDER_LOGICAL_AND\n                : arduino.ORDER_LOGICAL_OR;\n        let argument0 = arduino.valueToCode(block, \"A\", order) || \"false\";\n        let argument1 = arduino.valueToCode(block, \"B\", order) || \"false\";\n        if (!argument0 && !argument1) {\n            // If there are no arguments, then the return value is false.\n            argument0 = \"false\";\n            argument1 = \"false\";\n        } else {\n            // Single missing arguments have no effect on the return value.\n            const defaultArgument = operator == \"&&\" ? \"true\" : \"false\";\n            if (!argument0) {\n                argument0 = defaultArgument;\n            }\n            if (!argument1) {\n                argument1 = defaultArgument;\n            }\n        }\n\n        const code = `${argument0} ${operator} ${argument1}`;\n        return [code, order];\n    };\n\n    arduino.forBlock[\"logic_negate\"] = function (block) {\n        const order = arduino.ORDER_UNARY_PREFIX;\n        const argument0 = arduino.valueToCode(block, \"BOOL\", order) || \"false\";\n        const code = \"!\" + argument0;\n        return [code, order];\n    };\n\n    arduino.forBlock[\"logic_boolean\"] = function (block) {\n        const code = block.getFieldValue(\"BOOL\") == \"TRUE\" ? \"true\" : \"false\";\n        return [code, arduino.ORDER_ATOMIC];\n    };\n\n    arduino.forBlock[\"logic_null\"] = function () {\n        const code = \"NULL\";\n        return [code, arduino.ORDER_ATOMIC];\n    };\n\n    arduino.forBlock[\"logic_ternary\"] = function (block) {\n        const valueIf =\n            arduino.valueToCode(block, \"IF\", arduino.ORDER_CONDITIONAL) ||\n            \"false\";\n        const valueThen =\n            arduino.valueToCode(block, \"THEN\", arduino.ORDER_CONDITIONAL) ||\n            \"null\";\n        const valueElse =\n            arduino.valueToCode(block, \"ELSE\", arduino.ORDER_CONDITIONAL) ||\n            \"null\";\n        const code = valueIf + \" ? \" + valueThen + \" : \" + valueElse;\n        return [code, arduino.ORDER_CONDITIONAL];\n    };\n}\n\nexport default getCodeGenerators;\n","import * as Blockly from \"blockly/core\";\nimport { Arduino } from \"../arduino\";\n\nfunction getCodeGenerators(arduino: Arduino) {\n    arduino.forBlock[\"controls_repeat\"] = function (block) {\n        const repeats = Number(block.getFieldValue(\"TIMES\"));\n        let branch = arduino.statementToCode(block, \"DO\");\n        branch = arduino.addLoopTrap(branch, block);\n        const loopVar = arduino.nameDB_?.getDistinctName(\n            \"count\",\n            Blockly.Names.NameType.VARIABLE,\n        );\n        return (\n            `for (int ${loopVar} = 0; ${loopVar} < ${repeats}; ${loopVar}++) {\\n` +\n            branch +\n            `}\\n`\n        );\n    };\n\n    arduino.forBlock[\"controls_repeat_ext\"] = function (block) {\n        const repeats =\n            arduino.valueToCode(block, \"TIMES\", arduino.ORDER_ADDITIVE) || \"0\";\n        let branch = arduino.statementToCode(block, \"DO\");\n        branch = arduino.addLoopTrap(branch, block);\n        let code = \"\";\n        const loopVar = arduino.nameDB_?.getDistinctName(\n            \"count\",\n            Blockly.Names.NameType.VARIABLE,\n        );\n        let endVar = repeats;\n        if (\n            !repeats.match(/^\\w+$/) &&\n            !Blockly.utils.string.isNumber(repeats)\n        ) {\n            endVar =\n                arduino.nameDB_?.getDistinctName(\n                    \"repeat_end\",\n                    Blockly.Names.NameType.VARIABLE,\n                ) || repeats;\n            code += \"int \" + endVar + \" = \" + repeats + \";\\n\";\n        }\n        code +=\n            `for (int ${loopVar} = 0; ${loopVar} < ${endVar}; ${loopVar}++) {\\n` +\n            branch +\n            `}\\n`;\n        return code;\n    };\n\n    arduino.forBlock[\"controls_repeat_forever\"] = function (block) {\n        let branch = arduino.statementToCode(block, \"DO\");\n        branch = arduino.addLoopTrap(branch, block);\n        return \"while (true) {\\n\" + branch + \"}\\n\";\n    };\n\n    arduino.forBlock[\"controls_whileUntil\"] = function (block) {\n        // Do while/until loop.\n        const until = block.getFieldValue(\"MODE\") == \"UNTIL\";\n        let argument0 =\n            arduino.valueToCode(\n                block,\n                \"BOOL\",\n                until ? arduino.ORDER_LOGICAL_OR : arduino.ORDER_NONE,\n            ) || \"false\";\n        let branch = arduino.statementToCode(block, \"DO\");\n        branch = arduino.addLoopTrap(branch, block);\n        if (until) {\n            if (!argument0.match(/^\\w+$/)) {\n                argument0 = \"(\" + argument0 + \")\";\n            }\n            argument0 = \"!\" + argument0;\n        }\n        return `while (${argument0}) {\\n` + branch + \"}\\n\";\n    };\n\n    arduino.forBlock[\"controls_for\"] = function (block) {\n        const variable0 = arduino.nameDB_?.getName(\n            block.getFieldValue(\"VAR\"),\n            Blockly.Names.NameType.VARIABLE,\n        );\n        const argument0 =\n            arduino.valueToCode(block, \"FROM\", arduino.ORDER_ASSIGNMENT) || \"0\";\n        const argument1 =\n            arduino.valueToCode(block, \"TO\", arduino.ORDER_ASSIGNMENT) || \"0\";\n        const increment =\n            arduino.valueToCode(block, \"BY\", arduino.ORDER_ASSIGNMENT) || \"1\";\n        let branch = arduino.statementToCode(block, \"DO\");\n        branch = arduino.addLoopTrap(branch, block);\n        let code;\n        if (\n            Blockly.utils.string.isNumber(argument0) &&\n            Blockly.utils.string.isNumber(argument1) &&\n            Blockly.utils.string.isNumber(increment)\n        ) {\n            // All arguments are simple numbers.\n            const up = parseFloat(argument0) <= parseFloat(argument1);\n            code =\n                \"for (\" +\n                variable0 +\n                \" = \" +\n                argument0 +\n                \"; \" +\n                variable0 +\n                (up ? \" <= \" : \" >= \") +\n                argument1 +\n                \"; \" +\n                variable0;\n            const step = Math.abs(parseFloat(increment));\n            if (step === 1) {\n                code += up ? \"++\" : \"--\";\n            } else {\n                code += (up ? \" += \" : \" -= \") + step;\n            }\n            code += \") {\\n\" + branch + \"}\\n\";\n        } else {\n            code = \"\";\n            // Cache non-trivial values to variables to prevent repeated look-ups.\n            let startVar = argument0;\n            if (\n                !argument0.match(/^\\w+$/) &&\n                !Blockly.utils.string.isNumber(argument0)\n            ) {\n                startVar =\n                    arduino.nameDB_?.getDistinctName(\n                        variable0 + \"_start\",\n                        Blockly.Names.NameType.VARIABLE,\n                    ) || argument0;\n                code += \"int \" + startVar + \" = \" + argument0 + \";\\n\";\n            }\n            let endVar = argument1;\n            if (\n                !argument1.match(/^\\w+$/) &&\n                !Blockly.utils.string.isNumber(argument1)\n            ) {\n                endVar =\n                    arduino.nameDB_?.getDistinctName(\n                        variable0 + \"_end\",\n                        Blockly.Names.NameType.VARIABLE,\n                    ) || argument1;\n                code += \"int \" + endVar + \" = \" + argument1 + \";\\n\";\n            }\n            // Determine loop direction at start, in case one of the bounds\n            // changes during loop execution.\n            const incVar = arduino.nameDB_?.getDistinctName(\n                variable0 + \"_inc\",\n                Blockly.Names.NameType.VARIABLE,\n            );\n            code += \"int \" + incVar + \" = \";\n            if (Blockly.utils.string.isNumber(increment)) {\n                code += Math.abs(Number(increment)) + \";\\n\";\n            } else {\n                code += \"abs(\" + increment + \");\\n\";\n            }\n            code += \"if (\" + startVar + \" > \" + endVar + \") {\\n\";\n            code += arduino.INDENT + incVar + \" = -\" + incVar + \";\\n\";\n            code += \"}\\n\";\n            code +=\n                `for (${variable0} = ${startVar};\\n` +\n                `     ${incVar} >= 0 ? ${variable0} <= ${endVar} : ${variable0} >= ${endVar};\\n` +\n                `     ${variable0} += ${incVar}) {\\n` +\n                branch +\n                `}\\n`;\n        }\n        return code;\n    };\n\n    arduino.forBlock[\"controls_flow_statements\"] = function (block) {\n        switch (block.getFieldValue(\"FLOW\")) {\n            case \"BREAK\":\n                return \"break;\\n\";\n            case \"CONTINUE\":\n                return \"continue;\\n\";\n        }\n        throw \"Unknown flow statement.\";\n    };\n}\n\nexport default getCodeGenerators;\n","import * as Blockly from \"blockly/core\";\nimport { Arduino } from \"../arduino\";\n\nfunction getCodeGenerators(arduino: Arduino) {\n    arduino.forBlock[\"math_number\"] = function (block) {\n        // Numeric value.\n        let code = block.getFieldValue(\"NUM\");\n\n        const val = parseFloat(code);\n        if (val == Infinity) {\n            code = \"INFINITY\";\n        } else if (val == -Infinity) {\n            code = \"-INFINITY\";\n        }\n        return [code, arduino.ORDER_ATOMIC];\n    };\n\n    arduino.forBlock[\"math_arithmetic\"] = function (block) {\n        const OPERATORS: Record<string, [string | null, number]> = {\n            ADD: [\" + \", arduino.ORDER_ADDITIVE],\n            MINUS: [\" - \", arduino.ORDER_ADDITIVE],\n            MULTIPLY: [\" * \", arduino.ORDER_MULTIPLICATIVE],\n            DIVIDE: [\" / \", arduino.ORDER_MULTIPLICATIVE],\n            POWER: [null, arduino.ORDER_NONE], // Handle power separately.\n        };\n        const tuple = OPERATORS[block.getFieldValue(\"OP\")];\n        const operator = tuple[0];\n        const order = tuple[1];\n        const argument0 = arduino.valueToCode(block, \"A\", order) || \"0\";\n        const argument1 = arduino.valueToCode(block, \"B\", order) || \"0\";\n\n        let code;\n        // Power in C++ requires a special case since it has no operator.\n        if (!operator) {\n            code = \"Math.pow(\" + argument0 + \", \" + argument1 + \")\";\n            return [code, arduino.ORDER_UNARY_POSTFIX];\n        }\n        code = argument0 + operator + argument1;\n        return [code, order];\n    };\n\n    arduino.forBlock[\"math_single\"] = function (block) {\n        const operator = block.getFieldValue(\"OP\");\n        let code;\n        let arg;\n        if (operator == \"NEG\") {\n            // Negation is a special case given its different operator precedents.\n            arg =\n                arduino.valueToCode(block, \"NUM\", arduino.ORDER_UNARY_PREFIX) ||\n                \"0\";\n            if (arg[0] == \"-\") {\n                // --3 is not legal in C++ in this context.\n                arg = \" \" + arg;\n            }\n            code = \"-\" + arg;\n            return [code, arduino.ORDER_UNARY_PREFIX];\n        }\n        if (operator == \"ABS\" || operator.substring(0, 5) == \"ROUND\") {\n            arg =\n                arduino.valueToCode(\n                    block,\n                    \"NUM\",\n                    arduino.ORDER_UNARY_POSTFIX,\n                ) || \"0\";\n        } else if (\n            operator == \"SIN\" ||\n            operator == \"COS\" ||\n            operator == \"TAN\"\n        ) {\n            arg =\n                arduino.valueToCode(\n                    block,\n                    \"NUM\",\n                    arduino.ORDER_MULTIPLICATIVE,\n                ) || \"0\";\n        } else {\n            arg = arduino.valueToCode(block, \"NUM\", arduino.ORDER_NONE) || \"0\";\n        }\n        // First, handle cases which generate values that don't need parentheses.\n        switch (operator) {\n            case \"ABS\":\n                code = \"abs(\" + arg + \")\";\n                break;\n            case \"ROOT\":\n                code = \"sqrt(\" + arg + \")\";\n                break;\n            case \"LN\":\n                code = \"log(\" + arg + \")\";\n                break;\n            case \"EXP\":\n                code = \"exp(\" + arg + \")\";\n                break;\n            case \"POW10\":\n                code = \"pow(10,\" + arg + \")\";\n                break;\n            case \"ROUND\":\n                code = \"round(\" + arg + \")\";\n                break;\n            case \"ROUNDUP\":\n                code = \"ceil(\" + arg + \")\";\n                break;\n            case \"ROUNDDOWN\":\n                code = \"floor(\" + arg + \")\";\n                break;\n            case \"SIN\":\n                code = \"sin(\" + arg + \" / 180 * M_PI)\";\n                break;\n            case \"COS\":\n                code = \"cos(\" + arg + \" / 180 * M_PI)\";\n                break;\n            case \"TAN\":\n                code = \"tan(\" + arg + \" / 180 * M_PI)\";\n                break;\n        }\n        if (code) {\n            return [code, arduino.ORDER_UNARY_POSTFIX];\n        }\n        // Second, handle cases which generate values that may need parentheses.\n        switch (operator) {\n            case \"LOG10\":\n                code = \"log(\" + arg + \") / log(10)\";\n                break;\n            case \"ASIN\":\n                code = \"asin(\" + arg + \") / M_PI * 180\";\n                break;\n            case \"ACOS\":\n                code = \"acos(\" + arg + \") / M_PI * 180\";\n                break;\n            case \"ATAN\":\n                code = \"atan(\" + arg + \") / M_PI * 180\";\n                break;\n            default:\n                throw \"Unknown math operator: \" + operator;\n        }\n        return [code, arduino.ORDER_MULTIPLICATIVE];\n    };\n\n    arduino.forBlock[\"math_constant\"] = function (block) {\n        const CONSTANTS: Record<string, [string, number]> = {\n            PI: [\"M_PI\", arduino.ORDER_UNARY_POSTFIX],\n            E: [\"M_E\", arduino.ORDER_UNARY_POSTFIX],\n            GOLDEN_RATIO: [\"(1 + sqrt(5)) / 2\", arduino.ORDER_MULTIPLICATIVE],\n            SQRT2: [\"M_SQRT2\", arduino.ORDER_UNARY_POSTFIX],\n            SQRT1_2: [\"M_SQRT1_2\", arduino.ORDER_UNARY_POSTFIX],\n            INFINITY: [\"INFINITY\", arduino.ORDER_ATOMIC],\n        };\n        return CONSTANTS[block.getFieldValue(\"CONSTANT\")];\n    };\n\n    arduino.forBlock[\"math_number_property\"] = function (block) {\n        const number_to_check =\n            arduino.valueToCode(\n                block,\n                \"NUMBER_TO_CHECK\",\n                arduino.ORDER_MULTIPLICATIVE,\n            ) || \"0\";\n        const dropdown_property = block.getFieldValue(\"PROPERTY\");\n        let code = \"\";\n        if (dropdown_property == \"PRIME\") {\n            const func = [\n                \"boolean mathIsPrime(int n) {\",\n                \"  // https://en.wikipedia.org/wiki/Primality_test#Naive_methods\",\n                \"  if (n == 2 || n == 3) {\",\n                \"    return true;\",\n                \"  }\",\n                \"  // False if n is NaN, negative, is 1.\",\n                \"  // And false if n is divisible by 2 or 3.\",\n                \"  if (isnan(n) || (n <= 1) || (n == 1) || (n % 2 == 0) || \" +\n                    \"(n % 3 == 0)) {\",\n                \"    return false;\",\n                \"  }\",\n                \"  // Check all the numbers of form 6k +/- 1, up to sqrt(n).\",\n                \"  for (int x = 6; x <= sqrt(n) + 1; x += 6) {\",\n                \"    if (n % (x - 1) == 0 || n % (x + 1) == 0) {\",\n                \"      return false;\",\n                \"    }\",\n                \"  }\",\n                \"  return true;\",\n                \"}\",\n            ];\n            arduino.addDeclaration(\"mathIsPrime\", func.join(\"\\n\"));\n            arduino.addInclude(\"math\", \"#include <math.h>\");\n            code = \"mathIsPrime(\" + number_to_check + \")\";\n            return [code, arduino.ORDER_UNARY_POSTFIX];\n        }\n        switch (dropdown_property) {\n            case \"EVEN\":\n                code = number_to_check + \" % 2 == 0\";\n                break;\n            case \"ODD\":\n                code = number_to_check + \" % 2 == 1\";\n                break;\n            case \"WHOLE\":\n                arduino.addInclude(\"math\", \"#include <math.h>\");\n                code =\n                    \"(floor(\" +\n                    number_to_check +\n                    \") == \" +\n                    number_to_check +\n                    \")\";\n                break;\n            case \"POSITIVE\":\n                code = number_to_check + \" > 0\";\n                break;\n            case \"NEGATIVE\":\n                code = number_to_check + \" < 0\";\n                break;\n            case \"DIVISIBLE_BY\": {\n                const divisor =\n                    arduino.valueToCode(\n                        block,\n                        \"DIVISOR\",\n                        arduino.ORDER_MULTIPLICATIVE,\n                    ) || \"0\";\n                code = number_to_check + \" % \" + divisor + \" == 0\";\n                break;\n            }\n        }\n        return [code, arduino.ORDER_EQUALITY];\n    };\n\n    arduino.forBlock[\"math_change\"] = function (block) {\n        const argument0 =\n            arduino.valueToCode(block, \"DELTA\", arduino.ORDER_ADDITIVE) || \"0\";\n        const varName = arduino.nameDB_?.getName(\n            block.getFieldValue(\"VAR\"),\n            Blockly.Names.NameType.VARIABLE,\n        );\n        return varName + \" += \" + argument0 + \";\\n\";\n    };\n\n    /** Rounding functions have a single operand. */\n    arduino.forBlock[\"math_round\"] = arduino.forBlock[\"math_single\"];\n\n    /** Trigonometry functions have a single operand. */\n    arduino.forBlock[\"math_trig\"] = arduino.forBlock[\"math_single\"];\n\n    arduino.forBlock[\"math_modulo\"] = function (block) {\n        const argument0 =\n            arduino.valueToCode(\n                block,\n                \"DIVIDEND\",\n                arduino.ORDER_MULTIPLICATIVE,\n            ) || \"0\";\n        const argument1 =\n            arduino.valueToCode(\n                block,\n                \"DIVISOR\",\n                arduino.ORDER_MULTIPLICATIVE,\n            ) || \"0\";\n        const code = argument0 + \" % \" + argument1;\n        return [code, arduino.ORDER_MULTIPLICATIVE];\n    };\n\n    arduino.forBlock[\"math_constrain\"] = function (block) {\n        // Constrain a number between two limits.\n        const argument0 =\n            arduino.valueToCode(block, \"VALUE\", arduino.ORDER_NONE) || \"0\";\n        const argument1 =\n            arduino.valueToCode(block, \"LOW\", arduino.ORDER_NONE) || \"0\";\n        const argument2 =\n            arduino.valueToCode(block, \"HIGH\", arduino.ORDER_NONE) || \"0\";\n        const code = `(${argument0} < ${argument1} ? ${argument1} : (${argument0} > ${argument2} ? ${argument2} : ${argument0}))`;\n\n        return [code, arduino.ORDER_UNARY_POSTFIX];\n    };\n\n    arduino.forBlock[\"math_random_int\"] = function (block) {\n        const argument0 =\n            arduino.valueToCode(block, \"FROM\", arduino.ORDER_NONE) || \"0\";\n        const argument1 =\n            arduino.valueToCode(block, \"TO\", arduino.ORDER_NONE) || \"0\";\n        const func = [\n            \"int mathRandomInt(int min, int max) {\",\n            \"  if (min > max) {\",\n            \"    // Swap min and max to ensure min is smaller.\",\n            \"    int temp = min;\",\n            \"    min = max;\",\n            \"    max = temp;\",\n            \"  }\",\n            \"  return min + (rand() % (max - min + 1));\",\n            \"}\",\n        ];\n        arduino.addDeclaration(\"mathRandomInt\", func.join(\"\\n\"));\n        arduino.addSetup(\"random_seed\", \"randomSeed(analogRead(0));\");\n        const code = \"mathRandomInt(\" + argument0 + \", \" + argument1 + \")\";\n        return [code, arduino.ORDER_UNARY_POSTFIX];\n    };\n\n    arduino.forBlock[\"math_random_float\"] = function () {\n        return [\"(rand() / RAND_MAX)\", arduino.ORDER_UNARY_POSTFIX];\n    };\n}\n\nexport default getCodeGenerators;\n","import { Arduino } from \"../arduino\";\n\nfunction getCodeGenerators(arduino: Arduino) {\n    arduino.forBlock[\"text\"] = function (block) {\n        const code = arduino.quote_(block.getFieldValue(\"TEXT\"));\n        return [code, arduino.ORDER_ATOMIC];\n    };\n\n    arduino.forBlock[\"text_join\"] = function (block) {\n        const ADD0 = arduino.valueToCode(block, \"ADD0\", arduino.ORDER_NONE);\n        const ADD1 = arduino.valueToCode(block, \"ADD1\", arduino.ORDER_NONE);\n        const code = `String(${ADD0}) + String(${ADD1})`;\n\n        return [code, arduino.ORDER_ATOMIC];\n    };\n\n    arduino.forBlock[\"text_charAt\"] = function (block) {\n        const at = arduino.valueToCode(block, \"AT\", arduino.ORDER_NONE);\n        const value = arduino.valueToCode(block, \"VALUE\", arduino.ORDER_NONE);\n        const code = `String(${value}[${at}])`;\n\n        return [code, arduino.ORDER_ATOMIC];\n    };\n\n    arduino.forBlock[\"text_includes\"] = function (block) {\n        const value = arduino.valueToCode(block, \"VALUE\", arduino.ORDER_NONE);\n        const check = arduino.valueToCode(block, \"CHECK\", arduino.ORDER_NONE);\n        const code = `String(${value}).indexOf(${check}) != -1`;\n\n        return [code, arduino.ORDER_ATOMIC];\n    };\n\n    arduino.forBlock[\"text_to_double\"] = function (block) {\n        const value = arduino.valueToCode(block, \"VALUE\", arduino.ORDER_NONE);\n\n        return [`${value}.toDouble()`, arduino.ORDER_ATOMIC];\n    };\n}\n\nexport default getCodeGenerators;\n","import * as Blockly from \"blockly/core\";\nimport { Arduino } from \"../arduino\";\n\nfunction getCodeGenerators(arduino: Arduino) {\n    arduino.forBlock[\"text\"] = function (block) {\n        const code = arduino.quote_(block.getFieldValue(\"TEXT\"));\n        return [code, arduino.ORDER_ATOMIC];\n    };\n\n    arduino.forBlock[\"variables_get\"] = function (block) {\n        const varName = arduino.nameDB_?.getName(\n            block.getFieldValue(\"VAR\"),\n            Blockly.Names.NameType.VARIABLE,\n        ) as string;\n        return [varName, arduino.ORDER_ATOMIC];\n    };\n\n    arduino.forBlock[\"variables_set\"] = function (block) {\n        const argument0 =\n            arduino.valueToCode(block, \"VALUE\", arduino.ORDER_ASSIGNMENT) ||\n            \"0\";\n        const varName = arduino.nameDB_?.getName(\n            block.getFieldValue(\"VAR\"),\n            Blockly.Names.NameType.VARIABLE,\n        );\n\n        return varName + \" = \" + argument0 + \";\\n\";\n    };\n}\n\nexport default getCodeGenerators;\n","import { Variables, WorkspaceSvg } from \"blockly/core\";\nimport { ISerializer } from \"blockly/core/interfaces/i_serializer\";\nimport { FlyoutDefinition } from \"blockly/core/utils/toolbox\";\n\nexport class List {\n    public type: string = \"Number\";\n\n    constructor(\n        public id: string,\n        public name: string,\n    ) {}\n}\n\nclass ListManager {\n    public lists: Record<string, List> = {};\n\n    addList(name: string, id?: string) {\n        if (!id) id = crypto.randomUUID();\n        this.lists[id] = new List(id, name);\n    }\n\n    getList(id: string): List | undefined {\n        return this.lists[id];\n    }\n\n    getLists() {\n        return Object.values(this.lists);\n    }\n\n    clear() {\n        this.lists = {};\n    }\n}\n\nexport const listManager = new ListManager();\n\ninterface SerialList {\n    name: string;\n    id: string;\n}\nexport class ListSerializer implements ISerializer {\n    public priority = 90;\n\n    clear() {\n        listManager.clear();\n    }\n\n    load(state: SerialList[]) {\n        for (const listState of state) {\n            listManager.addList(listState[\"name\"], listState[\"id\"]);\n        }\n    }\n\n    save(): SerialList[] | null {\n        const listStates = [];\n        for (const list of listManager.getLists()) {\n            listStates.push({\n                id: list.id,\n                name: list.name,\n            });\n        }\n\n        return listStates.length > 0 ? listStates : null;\n    }\n}\n\nconst INDEX_PREFILL = {\n    INDEX: {\n        shadow: {\n            type: \"math_number\",\n            fields: {\n                NUM: 0,\n            },\n        },\n    },\n};\n\nexport default function (workspace: WorkspaceSvg) {\n    let blockList: FlyoutDefinition = [\n        {\n            kind: \"button\",\n            text: \"%{BKY_LISTS_CREATE}\",\n            callbackkey: \"create_list\",\n        },\n    ];\n\n    const lists = listManager.getLists();\n    if (lists.length > 0) {\n        const dynamicBlocks = [\n            { kind: \"block\", type: \"lists_add\" },\n            { kind: \"block\", type: \"lists_delete\", inputs: INDEX_PREFILL },\n            { kind: \"sep\", gap: 8 },\n            { kind: \"block\", type: \"lists_insert\", inputs: INDEX_PREFILL },\n            { kind: \"sep\", gap: 8 },\n            { kind: \"block\", type: \"lists_replace\", inputs: INDEX_PREFILL },\n            { kind: \"block\", type: \"lists_get\", inputs: INDEX_PREFILL },\n            { kind: \"sep\", gap: 8 },\n            { kind: \"block\", type: \"lists_length\" },\n        ];\n\n        blockList = blockList.concat(dynamicBlocks);\n    }\n\n    workspace.registerButtonCallback(\"create_list\", function () {\n        Variables.promptName(\"create_list\", \"\", (name) => {\n            if (!name) return;\n\n            listManager.addList(name);\n            workspace.refreshToolboxSelection();\n        });\n    });\n\n    return blockList;\n}\n","import { List, listManager } from \"../../categories/lists\";\nimport { Arduino } from \"../arduino\";\n\nfunction getCodeGenerators(arduino: Arduino) {\n    arduino.forBlock[\"lists_add\"] = function (block) {\n        const list = listManager.getList(block.getFieldValue(\"LIST\")) as List;\n        const value =\n            arduino.valueToCode(block, \"VALUE\", arduino.ORDER_ATOMIC) || \"0\";\n\n        const name = list.name.replaceAll(\" \", \"_\");\n        return `${name}.add(${value});\\n`;\n    };\n\n    arduino.forBlock[\"lists_delete\"] = function (block) {\n        const list = listManager.getList(block.getFieldValue(\"LIST\")) as List;\n        const index =\n            arduino.valueToCode(block, \"INDEX\", arduino.ORDER_ATOMIC) || \"0\";\n\n        const name = list.name.replaceAll(\" \", \"_\");\n        return `${name}.remove(${index});\\n`;\n    };\n\n    arduino.forBlock[\"lists_clear\"] = function (block) {\n        const list = listManager.getList(block.getFieldValue(\"LIST\")) as List;\n\n        const name = list.name.replaceAll(\" \", \"_\");\n        return `${name}.clear();\\n`;\n    };\n\n    arduino.forBlock[\"lists_insert\"] = function (block) {\n        const list = listManager.getList(block.getFieldValue(\"LIST\")) as List;\n        const value =\n            arduino.valueToCode(block, \"VALUE\", arduino.ORDER_ATOMIC) || \"0\";\n        const index =\n            arduino.valueToCode(block, \"INDEX\", arduino.ORDER_ATOMIC) || \"0\";\n\n        const name = list.name.replaceAll(\" \", \"_\");\n        return `${name}.addAtIndex(${index}, ${value});\\n`;\n    };\n\n    arduino.forBlock[\"lists_get\"] = function (block) {\n        const list = listManager.getList(block.getFieldValue(\"LIST\")) as List;\n        const index =\n            arduino.valueToCode(block, \"INDEX\", arduino.ORDER_ATOMIC) || \"0\";\n\n        const name = list.name.replaceAll(\" \", \"_\");\n        return [`${name}.get(${index})`, arduino.ORDER_ATOMIC];\n    };\n\n    arduino.forBlock[\"lists_replace\"] = function (block) {\n        const list = listManager.getList(block.getFieldValue(\"LIST\")) as List;\n        const value =\n            arduino.valueToCode(block, \"VALUE\", arduino.ORDER_ATOMIC) || \"0\";\n        const index =\n            arduino.valueToCode(block, \"INDEX\", arduino.ORDER_ATOMIC) || \"0\";\n\n        const name = list.name.replaceAll(\" \", \"_\");\n        return `${name}.remove(${index});\\n${name}.addAtIndex(${index}, ${value});\\n`;\n    };\n\n    arduino.forBlock[\"lists_length\"] = function (block) {\n        const list = listManager.getList(block.getFieldValue(\"LIST\")) as List;\n\n        const name = list.name.replaceAll(\" \", \"_\");\n        return [`${name}.getSize()`, arduino.ORDER_ATOMIC];\n    };\n}\n\nexport default getCodeGenerators;\n","import { Block } from \"blockly\";\nimport { Arduino } from \"../arduino\";\nimport { procedureManager } from \"./procedures\";\n\nfunction getCodeGenerators(arduino: Arduino) {\n    arduino.forBlock[\"mesh_setup\"] = function (block: Block) {\n        arduino.addInclude(\"mesh\", \"#include <painlessMesh.h>\");\n        arduino.addDeclaration(\"mesh\", \"painlessMesh mesh;\", true, 3);\n        arduino.addDeclaration(\"node_sender\", \"uint32_t node_sender;\", true, 3);\n        arduino.addDeclaration(\n            \"mesh_consume\",\n            \"String parseArg(String &msg) {\\n\" +\n                \"   int index = msg.indexOf('\\\\n');\\n\" +\n                \"   String result = msg.substring(0, index);\\n\" +\n                \"   msg = msg.substring(index + 1);\\n\\n\" +\n                \"   return result;\\n\" +\n                \"}\",\n            true,\n            2,\n        );\n\n        let receive_callback =\n            \"void receivedCallback(uint32_t from, String &msg) {\\n\" +\n            \"   node_sender = from;\\n\" +\n            \"   String channel = parseArg(msg);\\n\\n\";\n\n        block.workspace\n            .getBlocksByType(\"mesh_add_procedure\")\n            .forEach((block) => {\n                const method = block.getFieldValue(\"METHOD\");\n                const procedure = procedureManager.getProcedure(method);\n                if (!procedure) return;\n\n                receive_callback += `   if (channel == \"${method}\") {\\n`;\n\n                procedure.arguments.forEach((arg) => {\n                    receive_callback += `      double ${arg.name} = parseArg(msg).toDouble();\\n`;\n                });\n\n                receive_callback +=\n                    `      ${method}(${procedure.arguments\n                        .map((e) => e.name)\n                        .join(\", \")});\\n` + `   }\\n`;\n            });\n        receive_callback += \"}\\n\";\n\n        arduino.addDeclaration(\"mesh_receiver\", receive_callback, true, 1);\n\n        const name = arduino.valueToCode(block, \"NAME\", arduino.ORDER_NONE);\n\n        let code =\n            `mesh.init(${name}, \"Leaphy123\");\\n` +\n            \"mesh.onReceive(&receivedCallback);\\n\";\n\n        if (block.workspace.getBlocksByType(\"mesh_on_connection\").length > 0) {\n            code += \"mesh.onNewConnection(&onConnection);\\n\";\n        }\n\n        return code;\n    };\n\n    arduino.forBlock[\"mesh_update\"] = function () {\n        return \"mesh.update();\\n\";\n    };\n\n    arduino.forBlock[\"mesh_add_procedure\"] = function () {\n        return \"\";\n    };\n\n    arduino.forBlock[\"mesh_call_procedure\"] = function (block: Block) {\n        const method = block.getFieldValue(\"METHOD\");\n        const to = arduino.valueToCode(block, \"TO\", arduino.ORDER_NONE);\n        const procedure = procedureManager.getProcedure(method);\n        if (!procedure) return \"\";\n\n        const msg = [`\"${method}\\\\n\"`];\n        procedure.arguments.forEach(({ id }) => {\n            msg.push(\n                `String(${arduino.valueToCode(block, id, arduino.ORDER_NONE)})`,\n            );\n            msg.push('\"\\\\n\"');\n        });\n\n        return `mesh.sendSingle(${to}, ${msg.join(\" + \")});\\n`;\n    };\n\n    arduino.forBlock[\"mesh_call_procedure_all\"] = function (block: Block) {\n        const method = block.getFieldValue(\"METHOD\");\n        const procedure = procedureManager.getProcedure(method);\n        if (!procedure) return \"\";\n\n        const msg = [`\"${method}\\\\n\"`];\n        procedure.arguments.forEach(({ id }) => {\n            msg.push(\n                `String(${arduino.valueToCode(block, id, arduino.ORDER_NONE)})`,\n            );\n            msg.push('\"\\\\n\"');\n        });\n\n        return `mesh.sendBroadcast(${msg.join(\" + \")});\\n`;\n    };\n\n    arduino.forBlock[\"mesh_on_connection\"] = function (block: Block) {\n        const branch = arduino.statementToCode(block, \"STACK\");\n\n        const code =\n            `void onConnection(uint32_t node_sender) {\\n` + `${branch}` + \"}\\n\";\n        arduino.addDeclaration(\"mesh_connect\", code, true, 1);\n\n        return null;\n    };\n\n    arduino.forBlock[\"mesh_client\"] = function () {\n        return [\"node_sender\", arduino.ORDER_ATOMIC];\n    };\n}\n\nexport default getCodeGenerators;\n","import { Arduino } from \"../arduino\";\n\ninterface Text {\n    type: \"text\";\n    value: string;\n}\ninterface Item {\n    type: \"item\";\n    item: string;\n    fmt: string;\n}\nexport type DateItem = Text | Item;\n\nfunction getCodeGenerators(arduino: Arduino) {\n    function addRTCGet(type: string) {\n        arduino.addInclude(\"RTC\", \"#include <DS3231.h>\");\n        arduino.addDeclaration(\"RTC\", \"DS3231 RTC;\");\n\n        const methods: Record<string, string> = {\n            second: \"return RTC.getSecond();\",\n            minute: \"return RTC.getMinute();\",\n            hour:\n                \"bool h12Flag;\\n\" +\n                \"   bool pmFlag;\\n\" +\n                \"   return RTC.getHour(h12Flag, pmFlag);\",\n            weekday: \"return RTC.getDoW();\",\n            day: \"return RTC.getDate();\",\n            month: \"bool century;\\n\" + \"   return RTC.getMonth(century);\",\n            year: \"return RTC.getYear() + 2000;\",\n        };\n\n        const setup = arduino.addI2CSetup(`i2c_rtc`, \"Wire.begin();\\n\");\n        const getDeclaration =\n            `int rtc_get_${type}() {\\n` +\n            `   ${setup}\\n` +\n            `   ${methods[type]}\\n` +\n            `}`;\n        arduino.addDeclaration(`RTC_GET_${type}`, getDeclaration);\n\n        return `rtc_get_${type}()`;\n    }\n\n    arduino.forBlock[\"leaphy_i2c_rtc_get\"] = function (block) {\n        const type = block.getFieldValue(\"TYPE\");\n\n        return [addRTCGet(type), arduino.ORDER_ATOMIC];\n    };\n\n    arduino.forBlock[\"leaphy_i2c_rtc_set\"] = function (block) {\n        arduino.addInclude(\"RTC\", \"#include <DS3231.h>\");\n        arduino.addDeclaration(\"RTC\", \"DS3231 RTC;\");\n\n        const setup = arduino.addI2CSetup(`i2c_rtc`, \"Wire.begin();\\n\");\n        const getDeclaration =\n            `void RTCSet(String value) {\\n` +\n            `   ${setup}\\n` +\n            `   RTC.setYear(value.substring(0, 2).toInt());\\n` +\n            `   RTC.setMonth(value.substring(2, 4).toInt());\\n` +\n            `   RTC.setDate(value.substring(4, 6).toInt());\\n` +\n            `   RTC.setDoW(value.substring(6, 7).toInt());\\n` +\n            `   RTC.setHour(value.substring(7, 9).toInt());\\n` +\n            `   RTC.setMinute(value.substring(9, 11).toInt());\\n` +\n            `   RTC.setSecond(value.substring(11, 13).toInt());\\n` +\n            `}`;\n        arduino.addDeclaration(`RTC_SET`, getDeclaration);\n\n        return `RTCSet(${arduino.valueToCode(\n            block,\n            \"VALUE\",\n            arduino.ORDER_ATOMIC,\n        )});\\n`;\n    };\n\n    arduino.forBlock[\"leaphy_i2c_rtc_format\"] = function (block) {\n        arduino.addInclude(\"RTC\", \"#include <DS3231.h>\");\n        arduino.addDeclaration(\"RTC\", \"DS3231 RTC;\");\n\n        const PAD_DECLARATION =\n            \"String pad(int original) {\\n\" +\n            \"   if (original >= 10) return String(original);\\n\\n\" +\n            '   return \"0\" + String(original);\\n' +\n            \"}\";\n        arduino.addDeclaration(\"PAD\", PAD_DECLARATION);\n\n        function makeID(length: number) {\n            const characters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n            let result = \"\";\n\n            for (let i = 0; i < length; i++) {\n                result +=\n                    characters[Math.floor(Math.random() * characters.length)];\n            }\n\n            return result;\n        }\n        function getCode(item: DateItem) {\n            if (item.type === \"text\") return `\"${item.value}\"`;\n\n            if (item.item === \"year\") {\n                if (item.fmt === \"full\") return addRTCGet(\"year\");\n                if (item.fmt === \"2-digit\")\n                    return `${addRTCGet(\"year\")} - 2000`;\n            }\n\n            if (item.fmt === \"numeric\") return addRTCGet(item.item);\n            if (item.fmt === \"2-digit\") return `pad(${addRTCGet(item.item)})`;\n            if (item.item === \"weekday\") {\n                arduino.addDeclaration(\n                    \"RTC_WEEKDAYS\",\n                    'String weekdays[] = {\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"};',\n                );\n\n                return `weekdays[${addRTCGet(item.item)} - 1]`;\n            }\n            if (item.item === \"month\") {\n                arduino.addDeclaration(\n                    \"RTC_MONTHS\",\n                    'String months[] = {\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"};',\n                );\n\n                return `months[${addRTCGet(item.item)} - 1]`;\n            }\n        }\n\n        const id = makeID(5);\n        const getDeclaration =\n            `String rtc_format_${id}() {\\n` +\n            `   String result = \"\";\\n` +\n            block.saveExtraState!()\n                .map((item: DateItem) => `   result += ${getCode(item)};\\n`)\n                .join(\"\") +\n            `   return result;\\n` +\n            `}`;\n        arduino.addDeclaration(`RTC_FORMAT_${id}`, getDeclaration);\n\n        return [`rtc_format_${id}()`, arduino.ORDER_ATOMIC];\n    };\n}\nexport default getCodeGenerators;\n","import * as Blockly from \"blockly/core\";\nimport { List, listManager } from \"../categories/lists\";\nimport {\n    Block,\n    BlockSvg,\n    Connection,\n    Menu,\n    MenuItem,\n    Workspace,\n    WorkspaceSvg,\n} from \"blockly/core\";\nimport { procedureManager } from \"../generators/arduino/procedures\";\nimport { DateItem } from \"../generators/arduino/rtc\";\n\nconst xmlUtils = Blockly.utils.xml;\n\nexport default function registerExtensions(blockly: typeof Blockly) {\n    const LIST_SELECT_EXTENSION = function (this: Block) {\n        const input = this.getInput(\"LIST\");\n        if (!input) return;\n\n        input.appendField(\n            new blockly.FieldDropdown(() => {\n                return listManager.getLists().map((list: List) => {\n                    return [list.name, list.id];\n                });\n            }) as Blockly.Field,\n            \"LIST\",\n        );\n    };\n\n    const APPEND_STATEMENT_INPUT_STACK = function (this: Block) {\n        this.appendStatementInput(\"STACK\");\n    };\n\n    type IfExtraState = {\n        elseIfCount?: number;\n        hasElse?: boolean;\n    };\n\n    interface ClauseBlock extends Block {\n        valueConnection_?: Connection | null;\n        statementConnection_?: Connection | null;\n    }\n\n    const CONTROLS_IF_MUTATOR_MIXIN = {\n        elseifCount_: 0,\n        elseCount_: 0,\n\n        mutationToDom: function (this: IfBlock) {\n            if (!this.elseifCount_ && !this.elseCount_) {\n                return null;\n            }\n            const container = xmlUtils.createElement(\"mutation\");\n            if (this.elseifCount_) {\n                container.setAttribute(\"elseif\", String(this.elseifCount_));\n            }\n            if (this.elseCount_) {\n                container.setAttribute(\"else\", \"1\");\n            }\n            return container;\n        },\n\n        domToMutation: function (this: IfBlock, xmlElement: Element) {\n            this.elseifCount_ =\n                parseInt(xmlElement.getAttribute(\"elseif\")!, 10) || 0;\n            this.elseCount_ =\n                parseInt(xmlElement.getAttribute(\"else\")!, 10) || 0;\n            this.rebuildShape_();\n        },\n\n        saveExtraState: function (this: IfBlock): IfExtraState | null {\n            if (!this.elseifCount_ && !this.elseCount_) {\n                return null;\n            }\n            const state = Object.create(null);\n            if (this.elseifCount_) {\n                state[\"elseIfCount\"] = this.elseifCount_;\n            }\n            if (this.elseCount_) {\n                state[\"hasElse\"] = true;\n            }\n            return state;\n        },\n\n        loadExtraState: function (this: IfBlock, state: IfExtraState) {\n            this.elseifCount_ = state[\"elseIfCount\"] || 0;\n            this.elseCount_ = state[\"hasElse\"] ? 1 : 0;\n            this.updateShape_();\n        },\n\n        decompose: function (this: IfBlock, workspace: Workspace): Block {\n            const containerBlock = workspace.newBlock(\"controls_if_if\");\n            (containerBlock as BlockSvg).initSvg();\n            let connection = containerBlock.nextConnection!;\n            for (let i = 1; i <= this.elseifCount_; i++) {\n                const elseifBlock = workspace.newBlock(\"controls_if_elseif\");\n                (containerBlock as BlockSvg).initSvg();\n                connection.connect(elseifBlock.previousConnection!);\n                connection = elseifBlock.nextConnection!;\n            }\n            if (this.elseCount_) {\n                const elseBlock = workspace.newBlock(\"controls_if_else\");\n                (elseBlock as BlockSvg).initSvg();\n                connection.connect(elseBlock.previousConnection!);\n            }\n            return containerBlock;\n        },\n\n        compose: function (this: IfBlock, containerBlock: Block) {\n            let clauseBlock =\n                containerBlock.nextConnection!.targetBlock() as ClauseBlock | null;\n            // Count number of inputs.\n            this.elseifCount_ = 0;\n            this.elseCount_ = 0;\n            const valueConnections: Array<Connection | null> = [null];\n            const statementConnections: Array<Connection | null> = [null];\n            let elseStatementConnection: Connection | null = null;\n            while (clauseBlock) {\n                if (clauseBlock.isInsertionMarker()) {\n                    clauseBlock = clauseBlock.getNextBlock();\n                    continue;\n                }\n                switch (clauseBlock.type) {\n                    case \"controls_if_elseif\":\n                        this.elseifCount_++;\n                        valueConnections.push(\n                            clauseBlock.valueConnection_ as Connection | null,\n                        );\n                        statementConnections.push(\n                            clauseBlock.statementConnection_ as Connection | null,\n                        );\n                        break;\n                    case \"controls_if_else\":\n                        this.elseCount_++;\n                        elseStatementConnection =\n                            clauseBlock.statementConnection_ as Connection | null;\n                        break;\n                    default:\n                        throw TypeError(\n                            \"Unknown block type: \" + clauseBlock.type,\n                        );\n                }\n                clauseBlock = clauseBlock.getNextBlock();\n            }\n            this.updateShape_();\n            // Reconnect any child blocks.\n            this.reconnectChildBlocks_(\n                valueConnections,\n                statementConnections,\n                elseStatementConnection,\n            );\n        },\n\n        saveConnections: function (this: IfBlock, containerBlock: Block) {\n            let clauseBlock =\n                containerBlock!.nextConnection!.targetBlock() as ClauseBlock | null;\n            let i = 1;\n            while (clauseBlock) {\n                if (clauseBlock.isInsertionMarker()) {\n                    clauseBlock = clauseBlock.getNextBlock();\n                    continue;\n                }\n                switch (clauseBlock.type) {\n                    case \"controls_if_elseif\": {\n                        const inputIf = this.getInput(\"IF\" + i);\n                        const inputDo = this.getInput(\"DO\" + i);\n                        clauseBlock.valueConnection_ =\n                            inputIf && inputIf.connection!.targetConnection;\n                        clauseBlock.statementConnection_ =\n                            inputDo && inputDo.connection!.targetConnection;\n                        i++;\n                        break;\n                    }\n                    case \"controls_if_else\": {\n                        const inputDo = this.getInput(\"ELSE\");\n                        clauseBlock.statementConnection_ =\n                            inputDo && inputDo.connection!.targetConnection;\n                        break;\n                    }\n                    default:\n                        throw TypeError(\n                            \"Unknown block type: \" + clauseBlock.type,\n                        );\n                }\n                clauseBlock = clauseBlock.getNextBlock();\n            }\n        },\n\n        rebuildShape_: function (this: IfBlock) {\n            const valueConnections: Array<Connection | null> = [null];\n            const statementConnections: Array<Connection | null> = [null];\n            let elseStatementConnection: Connection | null = null;\n\n            if (this.getInput(\"ELSE\")) {\n                elseStatementConnection =\n                    this.getInput(\"ELSE\")!.connection!.targetConnection;\n            }\n            for (let i = 1; this.getInput(\"IF\" + i); i++) {\n                const inputIf = this.getInput(\"IF\" + i);\n                const inputDo = this.getInput(\"DO\" + i);\n                valueConnections.push(inputIf!.connection!.targetConnection);\n                statementConnections.push(\n                    inputDo!.connection!.targetConnection,\n                );\n            }\n            this.updateShape_();\n            this.reconnectChildBlocks_(\n                valueConnections,\n                statementConnections,\n                elseStatementConnection,\n            );\n        },\n\n        updateShape_: function (this: IfBlock) {\n            // Delete everything.\n            if (this.getInput(\"ELSE\")) {\n                this.removeInput(\"ELSE\");\n            }\n            if (this.getInput(\"ELSELABEL\")) {\n                this.removeInput(\"ELSELABEL\");\n            }\n            for (let i = 1; this.getInput(\"IF\" + i); i++) {\n                this.removeInput(\"IF\" + i);\n                this.removeInput(\"DO\" + i);\n            }\n            // Rebuild block.\n            for (let i = 1; i <= this.elseifCount_; i++) {\n                this.appendValueInput(\"IF\" + i)\n                    .setCheck(\"Boolean\")\n                    .appendField(Blockly.Msg[\"CONTROLS_IF_MSG_ELSEIF\"]);\n                this.appendStatementInput(\"DO\" + i).appendField(\n                    Blockly.Msg[\"CONTROLS_IF_MSG_THEN\"],\n                );\n            }\n            if (this.elseCount_) {\n                this.appendDummyInput(\"ELSELABEL\").appendField(\n                    Blockly.Msg[\"CONTROLS_IF_MSG_ELSE\"],\n                );\n                this.appendStatementInput(\"ELSE\");\n            }\n        },\n\n        reconnectChildBlocks_: function (\n            this: IfBlock,\n            valueConnections: Array<Connection | null>,\n            statementConnections: Array<Connection | null>,\n            elseStatementConnection: Connection | null,\n        ) {\n            for (let i = 1; i <= this.elseifCount_; i++) {\n                valueConnections[i]?.reconnect(this, \"IF\" + i);\n                statementConnections[i]?.reconnect(this, \"DO\" + i);\n            }\n            if (elseStatementConnection) {\n                elseStatementConnection.reconnect(this, \"ELSE\");\n            }\n        },\n    };\n\n    type IfBlock = Block & IfMixin;\n    interface IfMixin extends IfMixinType {}\n    type IfMixinType = typeof CONTROLS_IF_MUTATOR_MIXIN;\n\n    const PROCEDURE_SELECT_EXTENSION = function (this: Block) {\n        const input = this.getInput(\"METHOD\");\n        if (!input) return;\n\n        input.appendField(\n            new blockly.FieldDropdown(() => {\n                let procedures = procedureManager.procedures;\n                if (this.type !== \"mesh_add_procedure\")\n                    procedures = procedures.filter((e) => e.remote);\n\n                const names = procedures.map((procedure) => [\n                    procedure.name,\n                    procedure.funcName,\n                ]);\n\n                return (\n                    names.length > 0 ? names : [[\"name\", \"name\"]]\n                ) as Blockly.MenuOption[];\n            }) as Blockly.Field,\n            \"METHOD\",\n        );\n    };\n\n    const PROCEDURE_ARGUMENTS_EXTENSION = {\n        state: [] as { id: string; name: string }[],\n        inputs: [] as string[],\n\n        construct(this: Block & { updateShape: () => void }) {\n            this.setOnChange(this.updateShape.bind(this));\n        },\n\n        updateShape(this: Block & { inputs: string[] }) {\n            if (this.isInFlyout) return;\n\n            const procedure = procedureManager.getProcedure(\n                this.getFieldValue(\"METHOD\"),\n            );\n            if (!procedure) return;\n\n            if (this.inputs.length === 0 && procedure.arguments.length !== 0) {\n                this.appendDummyInput(\"WITH\").appendField(\n                    \"%{BKY_PROCEDURES_BEFORE_PARAMS}\",\n                );\n                this.appendEndRowInput(\"WITH_BRK\");\n            }\n            if (this.inputs.length !== 0 && procedure.arguments.length === 0) {\n                this.removeInput(\"WITH\");\n                this.removeInput(\"WITH_BRK\");\n            }\n\n            this.inputs.forEach((id) => {\n                if (procedureManager.hasArgument(procedure, id)) return;\n\n                this.removeInput(`${id}_label`);\n                this.removeInput(id);\n                this.removeInput(`${id}_end`);\n            });\n            procedure.arguments.forEach(({ id, name }) => {\n                if (this.inputs.includes(id)) return;\n\n                this.appendDummyInput(`${id}_label`).appendField(\n                    new blockly.FieldLabel(`${name}: `),\n                );\n                this.appendValueInput(id);\n                this.appendEndRowInput(`${id}_end`);\n            });\n\n            if (procedure.arguments.length !== 0) {\n                procedure.arguments.reduceRight((prev, curr) => {\n                    this.moveInputBefore(`${curr.id}_end`, `${prev.id}_label`);\n                    this.moveInputBefore(curr.id, `${curr.id}_end`);\n                    this.moveInputBefore(`${curr.id}_label`, curr.id);\n\n                    return curr;\n                });\n            }\n\n            this.inputs = procedure.arguments.map(({ id }) => id);\n        },\n\n        saveExtraState() {\n            return {};\n        },\n        loadExtraState(this: Block & { updateShape: () => void }) {\n            this.updateShape();\n        },\n    };\n\n    function loadFormat(topBlock: BlockSvg, format: DateItem[]) {\n        let connection = topBlock.getInput(\"STACK\")!.connection!;\n        connection.targetBlock()?.dispose?.(false);\n\n        format.forEach((item) => {\n            const block = topBlock.workspace.newBlock(\n                item.type === \"text\" ? \"fmt_text\" : `fmt_${item.item}`,\n            );\n            if (item.type === \"text\") block.setFieldValue(item.value, \"TEXT\");\n            else block.setFieldValue(item.fmt, \"FMT\");\n\n            block.initSvg();\n            block.render();\n            connection.connect(block.previousConnection);\n            connection = block.nextConnection;\n        });\n\n        topBlock.render();\n    }\n\n    const DATE_FORMAT_MUTATOR = {\n        structure: [] as DateItem[],\n\n        loadExtraState(state: DateItem[]) {\n            this.structure = state;\n        },\n        saveExtraState() {\n            return this.structure;\n        },\n\n        updateStructure(block: BlockSvg, newStructure: DateItem[]) {\n            const field = block.getField(\"FORMAT\") as FormatField;\n            if (\n                JSON.stringify(newStructure) !==\n                JSON.stringify(field.selectedStructure())\n            ) {\n                field.setValue(\"custom\");\n            }\n\n            this.structure = newStructure;\n        },\n\n        decompose(workspace: WorkspaceSvg) {\n            const topBlock = workspace.newBlock(\"fmt_head\");\n            topBlock.initSvg();\n\n            const field = topBlock.getField(\"FORMAT\") as FormatField;\n            field.onRefresh(() => this.compose(topBlock));\n\n            loadFormat(topBlock, this.structure);\n            return topBlock;\n        },\n        compose(topBlock: BlockSvg) {\n            const result: DateItem[] = [];\n            let block: BlockSvg | null = topBlock.getChildren(true)[0];\n            if (!block) return this.updateStructure(topBlock, []);\n\n            while (block) {\n                if (block.type === \"fmt_text\")\n                    result.push({\n                        type: \"text\",\n                        value: block.getFieldValue(\"TEXT\"),\n                    });\n                else\n                    result.push({\n                        type: \"item\",\n                        item: block.type.split(\"fmt_\")[1],\n                        fmt: block.getFieldValue(\"FMT\"),\n                    });\n\n                block = block.getNextBlock();\n            }\n\n            this.updateStructure(topBlock, result);\n        },\n    };\n\n    type FormatOption = [string, DateItem[]];\n    class FormatField extends blockly.FieldDropdown {\n        private refreshListeners: (() => void)[] = [];\n\n        constructor(private options: FormatOption[]) {\n            const values = options.map(\n                ([option]) => [option, option] as [string, string],\n            );\n            super([...values, [\"%{BKY_LEAPHY_TEMPLATE_CUSTOM}\", \"custom\"]]);\n        }\n\n        protected onItemSelected_(menu: Menu, menuItem: MenuItem) {\n            const option = this.options.find(\n                (option) => option[0] === menuItem.getValue(),\n            );\n            if (option && this.sourceBlock_)\n                loadFormat(this.sourceBlock_ as BlockSvg, option[1]);\n            if (menuItem.getValue() === \"custom\" && this.sourceBlock_)\n                loadFormat(this.sourceBlock_ as BlockSvg, []);\n            this.sourceBlock_?.getRootBlock()?.compose?.(this.sourceBlock_);\n\n            super.onItemSelected_(menu, menuItem);\n            this.refreshListeners.forEach((listener) => listener());\n        }\n\n        selectedStructure() {\n            const option = this.options.find(\n                (option) => option[0] === this.getValue(),\n            );\n            if (option && this.sourceBlock_) return option[1];\n            if (this.getValue() === \"custom\" && this.sourceBlock_) return [];\n        }\n\n        onRefresh(listener: () => void) {\n            this.refreshListeners.push(listener);\n        }\n    }\n\n    blockly.fieldRegistry.register(\"field_format\", FormatField);\n    blockly.Extensions.register(\"list_select_extension\", LIST_SELECT_EXTENSION);\n    blockly.Extensions.register(\n        \"appendStatementInputStack\",\n        APPEND_STATEMENT_INPUT_STACK,\n    );\n    blockly.Extensions.registerMutator(\n        \"l_controls_if_mutator\",\n        CONTROLS_IF_MUTATOR_MIXIN,\n        undefined,\n        [\"controls_if_elseif\", \"controls_if_else\"],\n    );\n    blockly.Extensions.registerMutator(\n        \"l_format_date_mutator\",\n        DATE_FORMAT_MUTATOR,\n        undefined,\n        [\n            \"fmt_text\",\n            \"fmt_second\",\n            \"fmt_minute\",\n            \"fmt_hour\",\n            \"fmt_weekday\",\n            \"fmt_day\",\n            \"fmt_month\",\n            \"fmt_year\",\n        ],\n    );\n    blockly.Extensions.register(\n        \"procedure_select_extension\",\n        PROCEDURE_SELECT_EXTENSION,\n    );\n    blockly.Extensions.registerMutator(\n        \"procedure_arguments_extension\",\n        PROCEDURE_ARGUMENTS_EXTENSION,\n        PROCEDURE_ARGUMENTS_EXTENSION.construct,\n    );\n}\n","import { BlockDefinition } from \"blockly/core/blocks\";\n\nconst blocks: BlockDefinition = [\n    {\n        type: \"lists_add\",\n        style: \"list_blocks\",\n        message0: \"%{BKY_LEAPHY_LISTS_ADD}\",\n        args0: [\n            {\n                type: \"input_value\",\n                name: \"VALUE\",\n            },\n            {\n                type: \"input_dummy\",\n                name: \"LIST\",\n            },\n        ],\n        extensions: [\"list_select_extension\"],\n        previousStatement: null,\n        nextStatement: null,\n    },\n    {\n        type: \"lists_delete\",\n        style: \"list_blocks\",\n        message0: \"%{BKY_LEAPHY_LISTS_DELETE}\",\n        args0: [\n            {\n                type: \"input_value\",\n                name: \"INDEX\",\n            },\n            {\n                type: \"input_dummy\",\n                name: \"LIST\",\n            },\n        ],\n        extensions: [\"list_select_extension\"],\n        previousStatement: null,\n        nextStatement: null,\n    },\n    {\n        type: \"lists_clear\",\n        style: \"list_blocks\",\n        message0: \"%{BKY_LEAPHY_LISTS_CLEAR}\",\n        args0: [\n            {\n                type: \"input_dummy\",\n                name: \"LIST\",\n            },\n        ],\n        extensions: [\"list_select_extension\"],\n        previousStatement: null,\n        nextStatement: null,\n    },\n    {\n        type: \"lists_insert\",\n        style: \"list_blocks\",\n        message0: \"%{BKY_LEAPHY_LISTS_INSERT}\",\n        args0: [\n            {\n                type: \"input_value\",\n                name: \"VALUE\",\n            },\n            {\n                type: \"input_value\",\n                name: \"INDEX\",\n            },\n            {\n                type: \"input_dummy\",\n                name: \"LIST\",\n            },\n        ],\n        extensions: [\"list_select_extension\"],\n        previousStatement: null,\n        nextStatement: null,\n    },\n    {\n        type: \"lists_replace\",\n        style: \"list_blocks\",\n        message0: \"%{BKY_LEAPHY_LISTS_REPLACE}\",\n        args0: [\n            {\n                type: \"input_value\",\n                name: \"INDEX\",\n            },\n            {\n                type: \"input_dummy\",\n                name: \"LIST\",\n            },\n            {\n                type: \"input_value\",\n                name: \"VALUE\",\n            },\n        ],\n        extensions: [\"list_select_extension\"],\n        previousStatement: null,\n        nextStatement: null,\n    },\n    {\n        type: \"lists_get\",\n        style: \"list_blocks\",\n        message0: \"%{BKY_LEAPHY_LISTS_GET}\",\n        args0: [\n            {\n                type: \"input_value\",\n                name: \"INDEX\",\n            },\n            {\n                type: \"input_dummy\",\n                name: \"LIST\",\n            },\n        ],\n        extensions: [\"list_select_extension\"],\n        output: [\"Number\", \"String\"],\n    },\n    {\n        type: \"lists_length\",\n        style: \"list_blocks\",\n        message0: \"%{BKY_LEAPHY_LISTS_LENGTH}\",\n        args0: [\n            {\n                type: \"input_dummy\",\n                name: \"LIST\",\n            },\n        ],\n        extensions: [\"list_select_extension\"],\n        output: \"Number\",\n    },\n];\n\nexport { blocks };\n","import { BlockDefinition } from \"blockly/core/blocks\";\n\nconst blocks: BlockDefinition = [\n    {\n        type: \"text_includes\",\n        message0: \"%{BKY_TEXT_INCLUDES_TITLE}\",\n        args0: [\n            {\n                type: \"input_value\",\n                name: \"VALUE\",\n                check: [\"String\"],\n            },\n            {\n                type: \"input_value\",\n                name: \"CHECK\",\n                check: [\"String\"],\n            },\n        ],\n        inputsInline: true,\n        output: \"Boolean\",\n        style: \"text_blocks\",\n    },\n    {\n        type: \"text_join\",\n        message0: \"%{BKY_TEXT_JOIN_TITLE_CREATEWITH}\",\n        args0: [\n            {\n                type: \"input_value\",\n                name: \"ADD0\",\n                check: [\"String\", \"Number\", \"Boolean\"],\n            },\n            {\n                type: \"input_value\",\n                name: \"ADD1\",\n                check: [\"String\", \"Number\", \"Boolean\"],\n            },\n        ],\n        inputsInline: true,\n        output: \"String\",\n        style: \"text_blocks\",\n    },\n    {\n        type: \"text_length\",\n        message0: \"%{BKY_TEXT_LENGTH_TITLE}\",\n        args0: [\n            {\n                type: \"input_value\",\n                name: \"VALUE\",\n                check: [\"String\"],\n            },\n        ],\n        output: \"Number\",\n        style: \"text_blocks\",\n        tooltip: \"%{BKY_TEXT_LENGTH_TOOLTIP}\",\n        helpUrl: \"%{BKY_TEXT_LENGTH_HELPURL}\",\n    },\n    {\n        type: \"text_charAt\",\n        message0: \"%{BKY_TEXT_CHARAT_TITLE}\", // \"in text %1 %2\"\n        args0: [\n            {\n                type: \"input_value\",\n                name: \"AT\",\n                check: \"Number\",\n            },\n            {\n                type: \"input_value\",\n                name: \"VALUE\",\n                check: \"String\",\n            },\n        ],\n        output: \"String\",\n        style: \"text_blocks\",\n        helpUrl: \"%{BKY_TEXT_CHARAT_HELPURL}\",\n        inputsInline: true,\n    },\n    {\n        type: \"text_to_double\",\n        message0: \"%{BKY_TEXT_TO_NUMBER}\",\n        args0: [\n            {\n                type: \"input_value\",\n                name: \"VALUE\",\n                check: \"String\",\n            },\n        ],\n        output: \"Number\",\n        style: \"text_blocks\",\n        inputsInline: true,\n    },\n];\n\nexport { blocks };\n","import { BlockDefinition } from \"blockly/core/blocks\";\n\nconst blocks: BlockDefinition = [\n    {\n        type: \"digital_read\",\n        message0: \"%%{BKY_LEAPHY_DIGITAL_READ} %1\",\n        args0: [\n            {\n                type: \"field_pin_selector\",\n                name: \"PIN\",\n                mode: \"digital\",\n            },\n        ],\n        style: \"leaphy_blocks\",\n        output: \"Number\",\n        helpUrl: \"\",\n    },\n    {\n        type: \"analog_read\",\n        message0: \"%%{BKY_LEAPHY_ANALOG_READ} %1\",\n        args0: [\n            {\n                type: \"field_pin_selector\",\n                name: \"PIN\",\n                mode: \"analog\",\n            },\n        ],\n        style: \"leaphy_blocks\",\n        output: \"Number\",\n        helpUrl: \"\",\n    },\n    {\n        type: \"leaphy_servo_write\",\n        message0:\n            \"%%{BKY_ARD_SERVO_WRITE} %1 %2 %%{BKY_ARD_SERVO_WRITE_TO} %3 %%{BKY_ARD_SERVO_WRITE_DEG_180}\",\n        args0: [\n            {\n                type: \"field_pin_selector\",\n                name: \"SERVO_PIN\",\n                mode: \"digital\",\n            },\n            { type: \"input_dummy\" },\n            { type: \"input_value\", name: \"SERVO_ANGLE\", check: \"Number\" },\n        ],\n        inputsInline: true,\n        previousStatement: null,\n        nextStatement: null,\n        style: \"leaphy_blocks\",\n        // \"extensions\": \"refreshServoPinFields\",\n        helpUrl:\n            \"https://www.leaphyfoundation.com/tutorials-leaphy-electronics.html#:~:text=TT%20motors-,Servo%20motors,-Rotating%20servo%20motor\",\n    },\n    {\n        type: \"leaphy_servo_read\",\n        message0: \"%%{BKY_ARD_SERVO_READ} %1\",\n        args0: [\n            {\n                type: \"field_pin_selector\",\n                name: \"SERVO_PIN\",\n                mode: \"digital\",\n            },\n        ],\n        output: \"Number\",\n        style: \"leaphy_blocks\",\n        // \"extensions\": \"returnAndUpdateServoRead\",\n        helpUrl:\n            \"https://www.leaphyfoundation.com/tutorials-leaphy-electronics.html#:~:text=TT%20motors-,Servo%20motors,-Rotating%20servo%20motor\",\n    },\n    {\n        type: \"leaphy_io_digitalwrite\",\n        message0: \"%%{BKY_ARD_DIGITALWRITE} %1 %%{BKY_ARD_WRITE_TO} %2\",\n        args0: [\n            {\n                type: \"field_pin_selector\",\n                name: \"PIN\",\n                mode: \"digital\",\n            },\n            { type: \"input_value\", name: \"STATE\", check: \"Boolean\" },\n        ],\n        inputsInline: true,\n        previousStatement: null,\n        nextStatement: null,\n        style: \"leaphy_blocks\",\n        helpUrl: \"http://arduino.cc/en/Reference/DigitalWrite\",\n    },\n    {\n        type: \"leaphy_multiplexer_digitalwrite\",\n        message0: \"%%{BKY_ARD_SET_MULTIPLEXER} %1\",\n        args0: [\n            {\n                type: \"field_dropdown\",\n                name: \"PIN\",\n                options: [\n                    [\"Y0\", \"0\"],\n                    [\"Y1\", \"1\"],\n                    [\"Y2\", \"2\"],\n                    [\"Y3\", \"3\"],\n                    [\"Y4\", \"4\"],\n                    [\"Y5\", \"5\"],\n                    [\"Y6\", \"6\"],\n                    [\"Y7\", \"7\"],\n                ],\n            },\n        ],\n        inputsInline: true,\n        previousStatement: null,\n        nextStatement: null,\n        style: \"leaphy_blocks\",\n    },\n    {\n        type: \"leaphy_io_analogwrite\",\n        message0: \"%%{BKY_ARD_ANALOGWRITE} %1 %%{BKY_ARD_WRITE_TO} %2\",\n        args0: [\n            { type: \"field_pin_selector\", name: \"PIN\", mode: \"pwm\" },\n            { type: \"input_value\", name: \"NUM\", check: \"Number\" },\n        ],\n        inputsInline: true,\n        previousStatement: null,\n        nextStatement: null,\n        style: \"leaphy_blocks\",\n        // \"extensions\": \"inputAndUpdateAnalog\",\n        helpUrl: \"http://arduino.cc/en/Reference/AnalogWrite\",\n    },\n    {\n        type: \"leaphy_sonar_read\",\n        message0:\n            \"%%{BKY_LEAPHY_SONAR_READ_TRIG} %1 %%{BKY_LEAPHY_SONAR_READ_ECHO} %2\",\n        args0: [\n            {\n                type: \"field_pin_selector\",\n                name: \"TRIG_PIN\",\n                mode: \"digital\",\n            },\n            {\n                type: \"field_pin_selector\",\n                name: \"ECHO_PIN\",\n                mode: \"digital\",\n            },\n        ],\n        output: \"Number\",\n        style: \"leaphy_blocks\",\n        helpUrl:\n            \"https://www.leaphyfoundation.com/tutorials-leaphy-electronics.html#:~:text=Programming-,Ultrasonic%20sensor,-Light%20sensor\",\n    },\n\n    {\n        type: \"leaphy_segment_init\",\n        helpUrl:\n            \"https://www.leaphyfoundation.com/tutorials-leaphy-electronics.html#:~:text=%C2%A0Single%20leds-,Segment%20display%C2%A0,-Oled%20display\",\n        message0: \"%{BKY_LEAPHY_SEGMENT_INIT}\",\n        args0: [\n            {\n                type: \"field_pin_selector\",\n                name: \"CLK\",\n                mode: \"digital\",\n            },\n            {\n                type: \"field_pin_selector\",\n                name: \"DIO\",\n                mode: \"digital\",\n            },\n        ],\n        previousStatement: null,\n        nextStatement: null,\n        style: \"leaphy_blocks\",\n    },\n    {\n        type: \"leaphy_matrix_init\",\n        helpUrl:\n            \"https://www.leaphyfoundation.com/tutorials-leaphy-electronics.html#:~:text=Multiple%20leds-,Led%20matrix%C2%A0,-Speaker%C2%A0\",\n        message0: \"%{BKY_LEAPHY_MATRIX_INIT}\",\n        args0: [\n            {\n                type: \"field_pin_selector\",\n                name: \"DIN\",\n                mode: \"digital\",\n            },\n            {\n                type: \"field_pin_selector\",\n                name: \"CLK\",\n                mode: \"digital\",\n            },\n            {\n                type: \"field_pin_selector\",\n                name: \"CS\",\n                mode: \"digital\",\n            },\n        ],\n        previousStatement: null,\n        nextStatement: null,\n        style: \"leaphy_blocks\",\n    },\n    {\n        type: \"leaphy_sound_init\",\n        helpUrl:\n            \"https://www.leaphyfoundation.com/tutorials-leaphy-electronics.html#:~:text=Led%20matrix-,Speaker%C2%A0,-Stichting\",\n        message0: \"%{BKY_LEAPHY_SOUND_INIT}\",\n        args0: [\n            {\n                type: \"field_pin_selector\",\n                name: \"RX\",\n                mode: \"digital\",\n            },\n            {\n                type: \"field_pin_selector\",\n                name: \"TX\",\n                mode: \"digital\",\n            },\n        ],\n        inputsInline: true,\n        previousStatement: null,\n        nextStatement: null,\n        style: \"leaphy_blocks\",\n    },\n];\n\nexport { blocks };\n","import { BlockDefinition } from \"blockly/core/blocks\";\n\nconst stomachSensorOptions = [\n    [\"%{BKY_LEAPHY_STOMACH_SENSOR_TYPE1}\", \"1\"],\n    [\"%{BKY_LEAPHY_STOMACH_SENSOR_TYPE2}\", \"2\"],\n];\n\nconst blocks: BlockDefinition = [\n    {\n        type: \"leaphy_flitz_read_stomach_sensor\",\n        message0: \"%%{BKY_LEAPHY_READ_STOMACH} %1\",\n        args0: [\n            {\n                type: \"field_dropdown\",\n                name: \"SENSOR_TYPE\",\n                options: stomachSensorOptions,\n            },\n        ],\n        helpUrl:\n            \"https://www.leaphy.nl/leaphy-flitz.html#:~:text=het%20licht%20wordt.-,Bouwfilmpjes%20Leaphy%20Flitz,-Software%20Leaphy%20Flitz\",\n        output: \"Number\",\n        style: \"leaphy_blocks\",\n    },\n    {\n        type: \"leaphy_flitz_nano_read_stomach_sensor\",\n        message0: \"%%{BKY_LEAPHY_READ_STOMACH}\",\n        output: \"Number\",\n        helpUrl:\n            \"https://www.leaphy.nl/leaphy-flitz.html#:~:text=het%20licht%20wordt.-,Bouwfilmpjes%20Leaphy%20Flitz,-Software%20Leaphy%20Flitz\",\n        style: \"leaphy_blocks\",\n    },\n    {\n        type: \"leaphy_flitz_read_hand_sensor\",\n        message0: \"%%{BKY_LEAPHY_READ_HAND}\",\n        output: \"Number\",\n        helpUrl:\n            \"https://www.leaphy.nl/leaphy-flitz.html#:~:text=het%20licht%20wordt.-,Bouwfilmpjes%20Leaphy%20Flitz,-Software%20Leaphy%20Flitz\",\n        style: \"leaphy_blocks\",\n    },\n    {\n        type: \"leaphy_flitz_nano_read_hand_sensor\",\n        message0: \"%%{BKY_LEAPHY_READ_HAND}\",\n        output: \"Number\",\n        helpUrl:\n            \"https://www.leaphy.nl/leaphy-flitz.html#:~:text=het%20licht%20wordt.-,Bouwfilmpjes%20Leaphy%20Flitz,-Software%20Leaphy%20Flitz\",\n        style: \"leaphy_blocks\",\n    },\n    {\n        type: \"leaphy_flitz_led\",\n        message0:\n            \"%%{BKY_LEAPHY_FLITZ_LED} %1 %%{BKY_LEAPHY_FLITZ_LED_R} %2 %%{BKY_LEAPHY_FLITZ_LED_G} %3 %%{BKY_LEAPHY_FLITZ_LED_B} %4\",\n        args0: [\n            { type: \"input_dummy\" },\n            { type: \"input_value\", name: \"FLITZ_LED_R\", check: \"Number\" },\n            { type: \"input_value\", name: \"FLITZ_LED_G\", check: \"Number\" },\n            { type: \"input_value\", name: \"FLITZ_LED_B\", check: \"Number\" },\n        ],\n        inputsInline: true,\n        previousStatement: null,\n        nextStatement: null,\n        helpUrl:\n            \"https://www.leaphy.nl/leaphy-flitz.html#:~:text=het%20licht%20wordt.-,Bouwfilmpjes%20Leaphy%20Flitz,-Software%20Leaphy%20Flitz\",\n        style: \"leaphy_blocks\",\n    },\n];\n\nexport { blocks };\n","import { BlockDefinition } from \"blockly/core/blocks\";\n\nconst displayPinNumbers = [\n    [\"1\", \"0\"],\n    [\"2\", \"1\"],\n    [\"3\", \"2\"],\n];\n\nconst rgbColor = [\n    [\"%{BKY_LEAPHY_RGB_COLOR_RED}\", \"0\"],\n    [\"%{BKY_LEAPHY_RGB_COLOR_GREEN}\", \"1\"],\n    [\"%{BKY_LEAPHY_RGB_COLOR_BLUE}\", \"2\"],\n];\n\nconst rgbColorRaw = [\n    [\"%{BKY_LEAPHY_RGB_RAW_COLOR_RED}\", \"0\"],\n    [\"%{BKY_LEAPHY_RGB_RAW_COLOR_GREEN}\", \"1\"],\n    [\"%{BKY_LEAPHY_RGB_RAW_COLOR_BLUE}\", \"2\"],\n];\n\nconst apds9960RgbColor = [\n    [\"%{BKY_COLOUR_RGB_RED}\", \"0\"],\n    [\"%{BKY_COLOUR_RGB_GREEN}\", \"1\"],\n    [\"%{BKY_COLOUR_RGB_BLUE}\", \"2\"],\n    [\"%{BKY_COLOUR_RGB_AMBIENT}\", \"3\"],\n];\n\nconst ledstripDemoOptions = [\n    [\"%{BKY_LEAPHY_LED_STRIP_LIGHTBANK}\", \"0\"],\n    [\"%{BKY_LEAPHY_LED_STRIP_BREATHE}\", \"1\"],\n    [\"%{BKY_LEAPHY_LED_STRIP_GULF}\", \"3\"],\n    [\"%{BKY_LEAPHY_LED_STRIP_RAINBOW}\", \"4\"],\n    [\"%{BKY_LEAPHY_LED_STRIP_COLORGULF}\", \"5\"],\n];\n\nconst blocks: BlockDefinition = [\n    {\n        type: \"time_delay\",\n        message0: \"%{BKY_ARD_TIME_DELAY} %1 %{BKY_ARD_TIME_MS}\",\n        args0: [\n            { type: \"input_value\", name: \"DELAY_TIME_MILI\", check: \"Number\" },\n        ],\n        inputsInline: true,\n        previousStatement: null,\n        nextStatement: null,\n        style: \"loop_blocks\",\n        tooltip: \"%{BKY_ARD_TIME_DELAY_TIP}\",\n        helpUrl: \"http://arduino.cc/en/Reference/Delay\",\n    },\n    {\n        type: \"leaphy_start\",\n        lastDummyAlign0: \"CENTRE\",\n        message0: \"%%{BKY_LEAPHY_START}\",\n        style: \"leaphy_blocks\",\n        extensions: [\"appendStatementInputStack\"],\n        isDeletable: false,\n        helpUrl: \"\",\n    },\n    {\n        type: \"leaphy_serial_print_line\",\n        message0: \"%%{BKY_LEAPHY_SERIAL_PRINT} %1 %2\",\n        args0: [\n            { type: \"input_dummy\" },\n            { type: \"input_value\", name: \"VALUE\" },\n        ],\n        inputsInline: true,\n        previousStatement: null,\n        nextStatement: null,\n        style: \"leaphy_blocks\",\n        helpUrl: \"\",\n    },\n    {\n        type: \"leaphy_serial_print_value\",\n        message0: \"%%{BKY_LEAPHY_SERIAL_PRINT} %1 %2 = %3 %4\",\n        args0: [\n            { type: \"input_dummy\" },\n            { type: \"input_value\", name: \"NAME\" },\n            { type: \"input_dummy\" },\n            { type: \"input_value\", name: \"VALUE\" },\n        ],\n        inputsInline: true,\n        previousStatement: null,\n        nextStatement: null,\n        style: \"leaphy_blocks\",\n        helpUrl: \"\",\n    },\n    {\n        type: \"leaphy_serial_available\",\n        message0: \"%%{BKY_LEAPHY_SERIAL_AVAILABLE}\",\n        style: \"leaphy_blocks\",\n        output: \"Number\",\n        helpUrl: \"\",\n    },\n    {\n        type: \"leaphy_serial_read_line\",\n        message0: \"%%{BKY_LEAPHY_SERIAL_READ_LINE}\",\n        style: \"leaphy_blocks\",\n        output: \"String\",\n        helpUrl: \"\",\n    },\n    {\n        type: \"leaphy_rgb_color\",\n        message0: \"%1\",\n        args0: [\n            {\n                type: \"field_dropdown\",\n                name: \"COLOR_TYPE\",\n                options: rgbColor,\n            },\n        ],\n        style: \"leaphy_blocks\",\n        output: \"Number\",\n        helpUrl: \"\",\n    },\n    {\n        type: \"leaphy_rgb_color_raw\",\n        message0: \"%1\",\n        args0: [\n            {\n                type: \"field_dropdown\",\n                name: \"COLOR_TYPE_RAW\",\n                options: rgbColorRaw,\n            },\n        ],\n        style: \"leaphy_blocks\",\n        output: \"Number\",\n        helpUrl: \"\",\n    },\n    {\n        type: \"leaphy_rgb_raw_color_red\",\n        message0: \"%%{BKY_LEAPHY_RGB_RAW_COLOR_RED}\",\n        style: \"leaphy_blocks\",\n        output: \"Number\",\n        helpUrl: \"\",\n    },\n    {\n        type: \"leaphy_rgb_raw_color_green\",\n        message0: \"%%{BKY_LEAPHY_RGB_RAW_COLOR_GREEN}\",\n        style: \"leaphy_blocks\",\n        output: \"Number\",\n        helpUrl: \"\",\n    },\n    {\n        type: \"leaphy_rgb_raw_color_blue\",\n        message0: \"%%{BKY_LEAPHY_RGB_RAW_COLOR_BLUE}\",\n        style: \"leaphy_blocks\",\n        output: \"Number\",\n        helpUrl: \"\",\n    },\n    {\n        type: \"leaphy_i2c_rgb_color\",\n        message0: \"%%{BKY_LEAPHY_RGB_READ_SENSOR} %1\",\n        args0: [\n            {\n                type: \"field_dropdown\",\n                name: \"COLOR_TYPE\",\n                options: apds9960RgbColor,\n            },\n        ],\n        style: \"leaphy_blocks\",\n        output: \"Number\",\n        helpUrl:\n            \"https://www.leaphyfoundation.com/tutorials-leaphy-electronics.html#:~:text=Ambient%20light%20sensor\",\n    },\n    {\n        type: \"leaphy_i2c_gesture\",\n        message0: \"%%{BKY_LEAPHY_GET_GESTURE}\",\n        style: \"leaphy_blocks\",\n        output: \"Number\",\n        helpUrl: \"\",\n    },\n    {\n        type: \"leaphy_led_set_strip\",\n\n        message0:\n            \"%%{BKY_LEAPHY_LED_SET_STRIP} %1 %%{BKY_LEAPHY_LED_SET_PIN} %2 %%{BKY_LEAPHY_LED_SET_LEDS} %3\",\n        args0: [\n            { type: \"input_dummy\" },\n            { type: \"input_value\", name: \"LED_SET_PIN\", check: \"Number\" },\n            { type: \"input_value\", name: \"LED_SET_LEDS\", check: \"Number\" },\n        ],\n        inputsInline: true,\n        previousStatement: null,\n        nextStatement: null,\n        style: \"leaphy_blocks\",\n        helpUrl:\n            \"https://www.leaphyfoundation.com/tutorials-leaphy-electronics.html#:~:text=Potmeter-,Multiple%20leds%C2%A0,-Led%20matrix%C2%A0\",\n    },\n    {\n        type: \"leaphy_led_set_basic\",\n        message0:\n            \"%%{BKY_LEAPHY_LED_BASIC_LED} %1 %%{BKY_LEAPHY_LED_BASIC_RED} %2 %%{BKY_LEAPHY_LED_BASIC_GREEN} %3 %%{BKY_LEAPHY_LED_BASIC_BLUE} %4\",\n        args0: [\n            { type: \"input_value\", name: \"LED_SET_LED\", check: \"Number\" },\n            { type: \"input_value\", name: \"LED_BASIC_RED\", check: \"Number\" },\n            {\n                type: \"input_value\",\n                name: \"LED_BASIC_GREEN\",\n                check: \"Number\",\n            },\n            {\n                type: \"input_value\",\n                name: \"LED_BASIC_BLUE\",\n                check: \"Number\",\n            },\n        ],\n        inputsInline: true,\n        previousStatement: null,\n        nextStatement: null,\n        style: \"leaphy_blocks\",\n        helpUrl:\n            \"https://www.leaphyfoundation.com/tutorials-leaphy-electronics.html#:~:text=Oled%20display-,RGB%20led,-Potmeter\",\n    },\n    {\n        type: \"leaphy_led_set_speed\",\n        message0: \"%%{BKY_LEAPHY_LED_SET_SPEEDVALUE} %1\",\n        args0: [\n            {\n                type: \"input_value\",\n                name: \"LED_SET_SPEEDVALUE\",\n                check: \"Number\",\n            },\n        ],\n        inputsInline: true,\n        previousStatement: null,\n        nextStatement: null,\n        style: \"leaphy_blocks\",\n        helpUrl:\n            \"https://www.leaphyfoundation.com/tutorials-leaphy-electronics.html#:~:text=Oled%20display-,RGB%20led,-Potmeter\",\n    },\n    {\n        type: \"leaphy_display_clear\",\n        message0: \"%%{BKY_LEAPHY_DISPLAY_CLEAR}\",\n        previousStatement: null,\n        nextStatement: null,\n        style: \"leaphy_blocks\",\n        helpUrl: \"\",\n    },\n    {\n        type: \"leaphy_display_display\",\n        message0: \"%%{BKY_LEAPHY_DISPLAY_DISPLAY}\",\n        previousStatement: null,\n        nextStatement: null,\n        style: \"leaphy_blocks\",\n        helpUrl: \"\",\n    },\n    {\n        type: \"leaphy_display_print_line\",\n        message0: \"%%{BKY_LEAPHY_DISPLAY_PRINT} %1 %2 %3\",\n        args0: [\n            { type: \"input_dummy\" },\n            {\n                type: \"field_dropdown\",\n                name: \"DISPLAY_ROW\",\n                options: displayPinNumbers,\n            },\n            { type: \"input_value\", name: \"VALUE\" },\n        ],\n        inputsInline: true,\n        previousStatement: null,\n        nextStatement: null,\n        style: \"leaphy_blocks\",\n        // \"extensions\": \"updateDisplay\",\n        helpUrl: \"\",\n    },\n    {\n        type: \"leaphy_display_set_text_size\",\n        message0: \"%%{BKY_LEAPHY_DISPLAY_SET_TEXT_SIZE} %1\",\n        args0: [{ type: \"input_value\", name: \"NUM\", check: \"Number\" }],\n        inputsInline: true,\n        previousStatement: null,\n        nextStatement: null,\n        style: \"leaphy_blocks\",\n        // \"extensions\": \"updateDisplay\",\n        helpUrl: \"\",\n    },\n    {\n        type: \"leaphy_display_print_value\",\n        message0: \"%%{BKY_LEAPHY_DISPLAY_PRINT} %1 %2 %3 = %4 %5\",\n        args0: [\n            { type: \"input_dummy\" },\n            {\n                type: \"field_dropdown\",\n                name: \"DISPLAY_ROW\",\n                options: displayPinNumbers,\n            },\n            { type: \"input_value\", name: \"NAME\" },\n            { type: \"input_dummy\" },\n            { type: \"input_value\", name: \"VALUE\" },\n        ],\n        inputsInline: true,\n        previousStatement: null,\n        nextStatement: null,\n        style: \"leaphy_blocks\",\n        // \"extensions\": \"updateDisplay\",\n        helpUrl: \"\",\n    },\n    {\n        type: \"leaphy_use_lsm9ds1\",\n        message0: \"%1 %2\",\n        args0: [\n            {\n                type: \"field_dropdown\",\n                name: \"SENSOR\",\n                options: [\n                    [\"Gyro\", \"g.gyro\"],\n                    [\"Compass\", \"m.magnetic\"],\n                    [\"Accelerator\", \"a.acceleration\"],\n                ],\n            },\n            {\n                type: \"field_dropdown\",\n                name: \"AXIS\",\n                options: [\n                    [\"X-axis\", \".x\"],\n                    [\"Y-axis\", \".y\"],\n                    [\"Z-axis\", \".z\"],\n                ],\n            },\n        ],\n        inputsInline: true,\n        output: \"Number\",\n        style: \"leaphy_blocks\",\n        helpUrl: \"\",\n    },\n    {\n        type: \"leaphy_update_lsm9ds1\",\n        message0: \"Update Lsm9ds1\",\n        previousStatement: null,\n        nextStatement: null,\n        style: \"leaphy_blocks\",\n        helpUrl: \"\",\n    },\n    {\n        type: \"leaphy_compass_degrees\",\n        message0: \"%%{BKY_LEAPHY_COMPASS}\",\n        style: \"leaphy_blocks\",\n        output: \"Number\",\n        helpUrl: \"\",\n    },\n    {\n        type: \"leaphy_gas_sensor\",\n        message0: \"%%{BKY_LEAPHY_CHOOSE_GAS} %1\",\n        args0: [\n            {\n                type: \"field_dropdown\",\n                name: \"GAS\",\n                options: [\n                    [\"TVOC\", \"TVOC\"],\n                    [\"eCO2\", \"eCO2\"],\n                    [\"Raw H2\", \"Raw H2\"],\n                    [\"Raw Ethanol\", \"RAWETHANOL\"],\n                ],\n            },\n        ],\n        style: \"leaphy_blocks\",\n        output: \"Number\",\n        helpUrl: \"\",\n    },\n    {\n        type: \"i2c_use_channel\",\n        message0: \"%{BKY_USE_I2C_CHANNEL} %1\",\n        args0: [\n            {\n                type: \"field_dropdown\",\n                name: \"CHANNEL\",\n                options: [\n                    [\"0\", \"0\"],\n                    [\"1\", \"1\"],\n                    [\"2\", \"2\"],\n                    [\"3\", \"3\"],\n                    [\"4\", \"4\"],\n                    [\"5\", \"5\"],\n                    [\"6\", \"6\"],\n                    [\"7\", \"7\"],\n                ],\n            },\n        ],\n        message1: \"%1\",\n        args1: [\n            {\n                type: \"input_statement\",\n                name: \"DO\",\n            },\n        ],\n        previousStatement: null,\n        nextStatement: null,\n        style: \"leaphy_blocks\",\n        tooltip: \"%{BKY_USE_I2C_CHANNEL_TOOLTIP}\",\n        helpUrl:\n            \"https://www.leaphyfoundation.com/tutorials-leaphy-electronics.html#:~:text=Batteries%20and%20power-,I2C%20sensor%20module%C2%A0,-Sensors\",\n    },\n    {\n        type: \"i2c_list_devices\",\n        message0: \"%{BKY_I2C_LIST_DEVICES}\",\n        previousStatement: null,\n        nextStatement: null,\n        style: \"leaphy_blocks\",\n        helpUrl:\n            \"https://www.leaphyfoundation.com/tutorials-leaphy-electronics.html#:~:text=Batteries%20and%20power-,I2C%20sensor%20module%C2%A0,-Sensors\",\n    },\n    {\n        type: \"leaphy_tof_get_distance\",\n        helpUrl:\n            \"https://www.leaphyfoundation.com/tutorials-leaphy-electronics.html#:~:text=Light%20sensor-,ToF%20sensor%C2%A0,-Infrared%20sensor\",\n        message0: \"%%{BKY_LEAPHY_TOF_GET_DISTANCE}\",\n        style: \"leaphy_blocks\",\n        output: \"Number\",\n    },\n    {\n        type: \"leaphy_get_air_pressure\",\n        message0: \"%%{BKY_LEAPHY_GET_AIR_PRESSURE}\",\n        style: \"leaphy_blocks\",\n        output: \"Number\",\n        helpUrl: \"\",\n    },\n    {\n        type: \"leaphy_segment_set\",\n        helpUrl:\n            \"https://www.leaphyfoundation.com/tutorials-leaphy-electronics.html#:~:text=%C2%A0Single%20leds-,Segment%20display%C2%A0,-Oled%20display\",\n        message0: `%{BKY_LEAPHY_SEGMENT_SET}`,\n        args0: [\n            {\n                type: \"input_value\",\n                name: \"NUM\",\n                check: \"Number\",\n            },\n        ],\n        previousStatement: null,\n        nextStatement: null,\n        style: \"leaphy_blocks\",\n    },\n    {\n        type: \"leaphy_segment_clear\",\n        helpUrl:\n            \"https://www.leaphyfoundation.com/tutorials-leaphy-electronics.html#:~:text=%C2%A0Single%20leds-,Segment%20display%C2%A0,-Oled%20display\",\n        message0: \"%{BKY_LEAPHY_SEGMENT_CLEAR}\",\n        previousStatement: null,\n        nextStatement: null,\n        style: \"leaphy_blocks\",\n    },\n    {\n        type: \"leaphy_segment_set_brightness\",\n        helpUrl:\n            \"https://www.leaphyfoundation.com/tutorials-leaphy-electronics.html#:~:text=%C2%A0Single%20leds-,Segment%20display%C2%A0,-Oled%20display\",\n        message0: \"%{BKY_LEAPHY_SEGMENT_SET_BRIGHTNESS}\",\n        args0: [\n            {\n                type: \"input_value\",\n                name: \"BRIGHTNESS\",\n                check: \"Number\",\n            },\n        ],\n        previousStatement: null,\n        nextStatement: null,\n        style: \"leaphy_blocks\",\n    },\n    {\n        type: \"leaphy_matrix_set\",\n        helpUrl:\n            \"https://www.leaphyfoundation.com/tutorials-leaphy-electronics.html#:~:text=Multiple%20leds-,Led%20matrix%C2%A0,-Speaker%C2%A0\",\n        message0: \"%{BKY_LEAPHY_MATRIX_SET}\",\n        args0: [\n            {\n                type: \"input_value\",\n                name: \"X\",\n                check: \"Number\",\n            },\n            {\n                type: \"input_value\",\n                name: \"Y\",\n                check: \"Number\",\n            },\n            {\n                type: \"input_value\",\n                name: \"ON\",\n                check: \"Boolean\",\n            },\n        ],\n        inputsInline: true,\n        previousStatement: null,\n        nextStatement: null,\n        style: \"leaphy_blocks\",\n    },\n    {\n        type: \"leaphy_matrix_set_brightness\",\n        helpUrl:\n            \"https://www.leaphyfoundation.com/tutorials-leaphy-electronics.html#:~:text=Multiple%20leds-,Led%20matrix%C2%A0,-Speaker%C2%A0\",\n        message0: \"%{BKY_LEAPHY_MATRIX_SET_BRIGHTNESS}\",\n        args0: [\n            {\n                type: \"input_value\",\n                name: \"BRIGHTNESS\",\n                check: \"Number\",\n            },\n        ],\n        previousStatement: null,\n        nextStatement: null,\n        style: \"leaphy_blocks\",\n    },\n    {\n        type: \"leaphy_matrix_clear\",\n        helpUrl:\n            \"https://www.leaphyfoundation.com/tutorials-leaphy-electronics.html#:~:text=Multiple%20leds-,Led%20matrix%C2%A0,-Speaker%C2%A0\",\n        message0: \"%{BKY_LEAPHY_MATRIX_CLEAR}\",\n        previousStatement: null,\n        nextStatement: null,\n        style: \"leaphy_blocks\",\n    },\n    {\n        type: \"leaphy_matrix_fill\",\n        helpUrl:\n            \"https://www.leaphyfoundation.com/tutorials-leaphy-electronics.html#:~:text=Multiple%20leds-,Led%20matrix%C2%A0,-Speaker%C2%A0\",\n        message0: \"%{BKY_LEAPHY_MATRIX_FILL}\",\n        args0: [\n            { type: \"input_dummy\" },\n            {\n                type: \"field_bitmap\",\n                name: \"MATRIX\",\n                width: 8,\n                height: 8,\n            },\n        ],\n        previousStatement: null,\n        nextStatement: null,\n        style: \"leaphy_blocks\",\n    },\n    {\n        type: \"leaphy_sound_play\",\n        helpUrl:\n            \"https://www.leaphyfoundation.com/tutorials-leaphy-electronics.html#:~:text=Led%20matrix-,Speaker,-Stichting\",\n        message0: \"%{BKY_LEAPHY_SOUND_PLAY}\",\n        args0: [\n            {\n                type: \"input_value\",\n                name: \"ITEM\",\n                check: \"Number\",\n            },\n        ],\n        inputsInline: true,\n        previousStatement: null,\n        nextStatement: null,\n        style: \"leaphy_blocks\",\n    },\n    {\n        type: \"leaphy_sound_stop\",\n        helpUrl:\n            \"https://www.leaphyfoundation.com/tutorials-leaphy-electronics.html#:~:text=Led%20matrix-,Speaker,-Stichting\",\n        message0: \"%{BKY_LEAPHY_SOUND_STOP}\",\n        previousStatement: null,\n        nextStatement: null,\n        style: \"leaphy_blocks\",\n    },\n    {\n        type: \"leaphy_sound_set_volume\",\n        helpUrl:\n            \"https://www.leaphyfoundation.com/tutorials-leaphy-electronics.html#:~:text=Led%20matrix-,Speaker,-Stichting\",\n        message0: \"%{BKY_LEAPHY_SOUND_SET_VOLUME}\",\n        args0: [\n            {\n                type: \"input_value\",\n                name: \"VOLUME\",\n                check: \"Number\",\n            },\n        ],\n        inputsInline: true,\n        previousStatement: null,\n        nextStatement: null,\n        style: \"leaphy_blocks\",\n    },\n    {\n        type: \"leaphy_led_strip_demo\",\n        helpUrl:\n            \"https://www.leaphyfoundation.com/tutorials-leaphy-electronics.html#:~:text=Potmeter-,Multiple%20leds%C2%A0,-Led%20matrix%C2%A0\",\n        message0: \"%%{BKY_LEAPHY_LED_STRIP_DEMO} %1 %2 %3 %4 %5\",\n        args0: [\n            {\n                type: \"field_dropdown\",\n                name: \"DEMO_TYPE\",\n                options: ledstripDemoOptions,\n            },\n            { type: \"input_dummy\" },\n            {\n                type: \"input_value\",\n                name: \"LED_STRIP_DEMO_RED\",\n                check: \"Number\",\n            },\n            {\n                type: \"input_value\",\n                name: \"LED_STRIP_DEMO_GREEN\",\n                check: \"Number\",\n            },\n            {\n                type: \"input_value\",\n                name: \"LED_STRIP_DEMO_BLUE\",\n                check: \"Number\",\n            },\n        ],\n        inputsInline: true,\n        previousStatement: null,\n        nextStatement: null,\n        style: \"leaphy_blocks\",\n    },\n];\n\nexport { blocks };\n","import { BlockDefinition } from \"blockly/core/blocks\";\n\nconst blocks: BlockDefinition[] = [\n    {\n        type: \"controls_if\",\n        message0: \"%{BKY_CONTROLS_IF_MSG_IF} %1 %{BKY_CONTROLS_IF_MSG_THEN} \",\n        args0: [{ type: \"input_value\", name: \"IF0\", check: \"Boolean\" }],\n        message1: \"%1\",\n        args1: [{ type: \"input_statement\", name: \"DO0\" }],\n        previousStatement: null,\n        nextStatement: null,\n        style: \"loop_blocks\",\n        helpUrl: \"%{BKY_CONTROLS_IF_HELPURL}\",\n        mutator: \"l_controls_if_mutator\",\n        extensions: [\"controls_if_tooltip\"],\n    },\n    {\n        type: \"controls_repeat_forever\",\n        message0: \"%{BKY_CONTROLS_REPEAT_FOREVER_TITLE}\",\n        message1: \"%{BKY_CONTROLS_REPEAT_INPUT_DO} %1\",\n        args1: [{ type: \"input_statement\", name: \"DO\" }],\n        previousStatement: null,\n        nextStatement: null,\n        style: \"loop_blocks\",\n        tooltip: \"%{BKY_CONTROLS_REPEAT_TOOLTIP}\",\n        helpUrl: \"%{BKY_CONTROLS_REPEAT_HELPURL}\",\n    },\n    {\n        type: \"controls_if_if\",\n        message0: \"%{BKY_CONTROLS_IF_IF_TITLE_IF}\",\n        nextStatement: null,\n        enableContextMenu: false,\n        style: \"loop_blocks\",\n        tooltip: \"%{BKY_CONTROLS_IF_IF_TOOLTIP}\",\n    },\n    // Block representing the else-if statement in the controls_if mutator.\n    {\n        type: \"controls_if_elseif\",\n        message0: \"%{BKY_CONTROLS_IF_ELSEIF_TITLE_ELSEIF}\",\n        previousStatement: null,\n        nextStatement: null,\n        enableContextMenu: false,\n        style: \"loop_blocks\",\n        tooltip: \"%{BKY_CONTROLS_IF_ELSEIF_TOOLTIP}\",\n    },\n    // Block representing the else statement in the controls_if mutator.\n    {\n        type: \"controls_if_else\",\n        message0: \"%{BKY_CONTROLS_IF_ELSE_TITLE_ELSE}\",\n        previousStatement: null,\n        enableContextMenu: false,\n        style: \"loop_blocks\",\n        tooltip: \"%{BKY_CONTROLS_IF_ELSE_TOOLTIP}\",\n    },\n    {\n        type: \"logic_compare\",\n        message0: \"%1 %2 %3\",\n        args0: [\n            {\n                type: \"input_value\",\n                name: \"A\",\n            },\n            {\n                type: \"field_dropdown\",\n                name: \"OP\",\n                options: [\n                    [\"=\", \"EQ\"],\n                    [\"\\u2260\", \"NEQ\"],\n                    [\"\\u200F<\", \"LT\"],\n                    [\"\\u200F\\u2264\", \"LTE\"],\n                    [\"\\u200F>\", \"GT\"],\n                    [\"\\u200F\\u2265\", \"GTE\"],\n                ],\n            },\n            {\n                type: \"input_value\",\n                name: \"B\",\n            },\n        ],\n        inputsInline: true,\n        output: \"Boolean\",\n        style: \"logic_blocks\",\n        helpUrl: \"%{BKY_LOGIC_COMPARE_HELPURL}\",\n        extensions: [\"logic_op_tooltip\"],\n    },\n];\n\nexport { blocks };\n","import { BlockDefinition } from \"blockly/core/blocks\";\n\nconst blocks: BlockDefinition = [\n    {\n        type: \"mesh_setup\",\n        style: \"mesh_blocks\",\n        message0: \"%{BKY_LEAPHY_MESH_SETUP}\",\n        args0: [\n            {\n                type: \"input_value\",\n                name: \"NAME\",\n                check: [\"String\"],\n            },\n        ],\n        previousStatement: null,\n        nextStatement: null,\n    },\n    {\n        type: \"mesh_update\",\n        style: \"mesh_blocks\",\n        message0: \"%{BKY_LEAPHY_MESH_UPDATE}\",\n        previousStatement: null,\n        nextStatement: null,\n    },\n    {\n        type: \"mesh_add_procedure\",\n        style: \"mesh_blocks\",\n        message0: \"%{BKY_LEAPHY_MESH_ADD_PROCEDURE}\",\n        args0: [\n            {\n                type: \"input_dummy\",\n                name: \"METHOD\",\n            },\n        ],\n        extensions: [\"procedure_select_extension\"],\n        inputsInline: true,\n        previousStatement: null,\n        nextStatement: null,\n    },\n    {\n        type: \"mesh_call_procedure\",\n        style: \"mesh_blocks\",\n        message0: \"%{BKY_LEAPHY_MESH_CALL_PROCEDURE}\",\n        args0: [\n            {\n                type: \"input_dummy\",\n                name: \"METHOD\",\n            },\n            {\n                type: \"input_value\",\n                name: \"TO\",\n                check: [\"Number\"],\n            },\n        ],\n        extensions: [\"procedure_select_extension\"],\n        mutator: \"procedure_arguments_extension\",\n        inputsInline: true,\n        previousStatement: null,\n        nextStatement: null,\n    },\n    {\n        type: \"mesh_call_procedure_all\",\n        style: \"mesh_blocks\",\n        message0: \"%{BKY_LEAPHY_MESH_CALL_PROCEDURE_ALL}\",\n        args0: [\n            {\n                type: \"input_dummy\",\n                name: \"METHOD\",\n            },\n            {\n                type: \"input_dummy\",\n                name: \"ARGUMENTS\",\n            },\n        ],\n        extensions: [\"procedure_select_extension\"],\n        mutator: \"procedure_arguments_extension\",\n        inputsInline: true,\n        previousStatement: null,\n        nextStatement: null,\n    },\n    {\n        type: \"mesh_on_connection\",\n        style: \"mesh_blocks\",\n        message0: \"%{BKY_LEAPHY_MESH_ON_CONNECTION}\",\n        extensions: [\"appendStatementInputStack\"],\n    },\n    {\n        type: \"mesh_client\",\n        style: \"mesh_blocks\",\n        message0: \"%{BKY_LEAPHY_MESH_CLIENT}\",\n        output: \"Number\",\n    },\n];\n\nexport { blocks };\n","import { BlockDefinition } from \"blockly/core/blocks\";\n\nconst blocks: BlockDefinition = [\n    {\n        type: \"leaphy_i2c_rtc_get\",\n        message0: \"%{BKY_LEAPHY_RTC_GET}\",\n        args0: [\n            {\n                type: \"field_dropdown\",\n                name: \"TYPE\",\n                options: [\n                    [\"%{BKY_LEAPHY_SECOND}\", \"second\"],\n                    [\"%{BKY_LEAPHY_MINUTE}\", \"minute\"],\n                    [\"%{BKY_LEAPHY_HOUR}\", \"hour\"],\n                    [\"%{BKY_LEAPHY_WEEKDAY}\", \"weekday\"],\n                    [\"%{BKY_LEAPHY_DAY}\", \"day\"],\n                    [\"%{BKY_LEAPHY_MONTH}\", \"month\"],\n                    [\"%{BKY_LEAPHY_YEAR}\", \"year\"],\n                ],\n            },\n        ],\n        style: \"leaphy_blocks\",\n        output: \"Number\",\n    },\n    {\n        type: \"leaphy_i2c_rtc_set\",\n        message0: \"%{BKY_LEAPHY_RTC_SET}\",\n        args0: [\n            {\n                type: \"input_value\",\n                name: \"VALUE\",\n                check: \"String\",\n            },\n        ],\n        inputsInline: true,\n        previousStatement: null,\n        nextStatement: null,\n        style: \"leaphy_blocks\",\n    },\n    {\n        type: \"leaphy_i2c_rtc_format\",\n        message0: \"%{BKY_LEAPHY_RTC_FORMAT}\",\n        style: \"leaphy_blocks\",\n        output: \"String\",\n        mutator: \"l_format_date_mutator\",\n    },\n\n    {\n        type: \"fmt_head\",\n        style: \"logic_blocks\",\n        message0: \"%{BKY_LEAPHY_FORMAT} %1\",\n        args0: [\n            {\n                type: \"field_format\",\n                name: \"FORMAT\",\n                options: [\n                    [\n                        \"%{BKY_LEAPHY_TEMPLATE_FULL_NUMERIC}\",\n                        [\n                            {\n                                type: \"item\",\n                                item: \"day\",\n                                fmt: \"2-digit\",\n                            },\n                            {\n                                type: \"text\",\n                                value: \"/\",\n                            },\n                            {\n                                type: \"item\",\n                                item: \"month\",\n                                fmt: \"2-digit\",\n                            },\n                            {\n                                type: \"text\",\n                                value: \"/\",\n                            },\n                            {\n                                type: \"item\",\n                                item: \"year\",\n                                fmt: \"full\",\n                            },\n                            {\n                                type: \"text\",\n                                value: \" \",\n                            },\n                            {\n                                type: \"item\",\n                                item: \"hour\",\n                                fmt: \"2-digit\",\n                            },\n                            {\n                                type: \"text\",\n                                value: \":\",\n                            },\n                            {\n                                type: \"item\",\n                                item: \"minute\",\n                                fmt: \"2-digit\",\n                            },\n                            {\n                                type: \"text\",\n                                value: \":\",\n                            },\n                            {\n                                type: \"item\",\n                                item: \"second\",\n                                fmt: \"2-digit\",\n                            },\n                        ],\n                    ],\n                    [\n                        \"%{BKY_LEAPHY_TEMPLATE_DATE_NUMERIC}\",\n                        [\n                            {\n                                type: \"item\",\n                                item: \"day\",\n                                fmt: \"numeric\",\n                            },\n                            {\n                                type: \"text\",\n                                value: \"/\",\n                            },\n                            {\n                                type: \"item\",\n                                item: \"month\",\n                                fmt: \"numeric\",\n                            },\n                            {\n                                type: \"text\",\n                                value: \"/\",\n                            },\n                            {\n                                type: \"item\",\n                                item: \"year\",\n                                fmt: \"full\",\n                            },\n                        ],\n                    ],\n                    [\n                        \"%{BKY_LEAPHY_TEMPLATE_FULL_TEXT}\",\n                        [\n                            {\n                                type: \"item\",\n                                item: \"weekday\",\n                                fmt: \"text\",\n                            },\n                            {\n                                type: \"text\",\n                                value: \" \",\n                            },\n                            {\n                                type: \"item\",\n                                item: \"day\",\n                                fmt: \"numeric\",\n                            },\n                            {\n                                type: \"text\",\n                                value: \" \",\n                            },\n                            {\n                                type: \"item\",\n                                item: \"month\",\n                                fmt: \"text\",\n                            },\n                            {\n                                type: \"text\",\n                                value: \" \",\n                            },\n                            {\n                                type: \"item\",\n                                item: \"year\",\n                                fmt: \"full\",\n                            },\n                            {\n                                type: \"text\",\n                                value: \" \",\n                            },\n                            {\n                                type: \"item\",\n                                item: \"hour\",\n                                fmt: \"numeric\",\n                            },\n                            {\n                                type: \"text\",\n                                value: \":\",\n                            },\n                            {\n                                type: \"item\",\n                                item: \"minute\",\n                                fmt: \"2-digit\",\n                            },\n                        ],\n                    ],\n                    [\n                        \"%{BKY_LEAPHY_TEMPLATE_DATE_TEXT}\",\n                        [\n                            {\n                                type: \"item\",\n                                item: \"weekday\",\n                                fmt: \"text\",\n                            },\n                            {\n                                type: \"text\",\n                                value: \" \",\n                            },\n                            {\n                                type: \"item\",\n                                item: \"day\",\n                                fmt: \"numeric\",\n                            },\n                            {\n                                type: \"text\",\n                                value: \" \",\n                            },\n                            {\n                                type: \"item\",\n                                item: \"month\",\n                                fmt: \"text\",\n                            },\n                            {\n                                type: \"text\",\n                                value: \" \",\n                            },\n                            {\n                                type: \"item\",\n                                item: \"year\",\n                                fmt: \"full\",\n                            },\n                        ],\n                    ],\n                    [\n                        \"%{BKY_LEAPHY_TEMPLATE_TIME}\",\n                        [\n                            {\n                                type: \"item\",\n                                item: \"hour\",\n                                fmt: \"2-digit\",\n                            },\n                            {\n                                type: \"text\",\n                                value: \":\",\n                            },\n                            {\n                                type: \"item\",\n                                item: \"minute\",\n                                fmt: \"2-digit\",\n                            },\n                            {\n                                type: \"text\",\n                                value: \":\",\n                            },\n                            {\n                                type: \"item\",\n                                item: \"second\",\n                                fmt: \"2-digit\",\n                            },\n                        ],\n                    ],\n                ],\n            },\n        ],\n        extensions: [\"appendStatementInputStack\"],\n    },\n    {\n        type: \"fmt_text\",\n        message0: \"%{BKY_LEAPHY_TEXT} %1\",\n        args0: [\n            {\n                type: \"field_input\",\n                name: \"TEXT\",\n                text: \":\",\n            },\n        ],\n        inputsInline: true,\n        previousStatement: null,\n        nextStatement: null,\n        style: \"text_blocks\",\n    },\n    {\n        type: \"fmt_second\",\n        message0: \"%{BKY_LEAPHY_SECOND} %{BKY_LEAPHY_WITH_FORMAT}\",\n        args0: [\n            {\n                type: \"field_dropdown\",\n                name: \"FMT\",\n                options: [\n                    [\"%{BKY_LEAPHY_NUMERIC}\", \"numeric\"],\n                    [\"%{BKY_LEAPHY_2_DIGITS}\", \"2-digit\"],\n                ],\n            },\n        ],\n        inputsInline: true,\n        previousStatement: null,\n        nextStatement: null,\n        style: \"leaphy_blocks\",\n    },\n    {\n        type: \"fmt_minute\",\n        message0: \"%{BKY_LEAPHY_MINUTE} %{BKY_LEAPHY_WITH_FORMAT}\",\n        args0: [\n            {\n                type: \"field_dropdown\",\n                name: \"FMT\",\n                options: [\n                    [\"%{BKY_LEAPHY_NUMERIC}\", \"numeric\"],\n                    [\"%{BKY_LEAPHY_2_DIGITS}\", \"2-digit\"],\n                ],\n            },\n        ],\n        inputsInline: true,\n        previousStatement: null,\n        nextStatement: null,\n        style: \"leaphy_blocks\",\n    },\n    {\n        type: \"fmt_hour\",\n        message0: \"%{BKY_LEAPHY_HOUR} %{BKY_LEAPHY_WITH_FORMAT}\",\n        args0: [\n            {\n                type: \"field_dropdown\",\n                name: \"FMT\",\n                options: [\n                    [\"%{BKY_LEAPHY_NUMERIC}\", \"numeric\"],\n                    [\"%{BKY_LEAPHY_2_DIGITS}\", \"2-digit\"],\n                ],\n            },\n        ],\n        inputsInline: true,\n        previousStatement: null,\n        nextStatement: null,\n        style: \"leaphy_blocks\",\n    },\n    {\n        type: \"fmt_weekday\",\n        message0: \"%{BKY_LEAPHY_WEEKDAY} %{BKY_LEAPHY_WITH_FORMAT}\",\n        args0: [\n            {\n                type: \"field_dropdown\",\n                name: \"FMT\",\n                options: [\n                    [\"%{BKY_LEAPHY_NUMERIC}\", \"numeric\"],\n                    [\"%{BKY_LEAPHY_TEXT}\", \"text\"],\n                ],\n            },\n        ],\n        inputsInline: true,\n        previousStatement: null,\n        nextStatement: null,\n        style: \"leaphy_blocks\",\n    },\n    {\n        type: \"fmt_day\",\n        message0: \"%{BKY_LEAPHY_DAY} %{BKY_LEAPHY_WITH_FORMAT}\",\n        args0: [\n            {\n                type: \"field_dropdown\",\n                name: \"FMT\",\n                options: [\n                    [\"%{BKY_LEAPHY_NUMERIC}\", \"numeric\"],\n                    [\"%{BKY_LEAPHY_2_DIGITS}\", \"2-digit\"],\n                ],\n            },\n        ],\n        inputsInline: true,\n        previousStatement: null,\n        nextStatement: null,\n        style: \"leaphy_blocks\",\n    },\n    {\n        type: \"fmt_month\",\n        message0: \"%{BKY_LEAPHY_MONTH} %{BKY_LEAPHY_WITH_FORMAT}\",\n        args0: [\n            {\n                type: \"field_dropdown\",\n                name: \"FMT\",\n                options: [\n                    [\"%{BKY_LEAPHY_NUMERIC}\", \"numeric\"],\n                    [\"%{BKY_LEAPHY_2_DIGITS}\", \"2-digit\"],\n                    [\"%{BKY_LEAPHY_TEXT}\", \"text\"],\n                ],\n            },\n        ],\n        inputsInline: true,\n        previousStatement: null,\n        nextStatement: null,\n        style: \"leaphy_blocks\",\n    },\n    {\n        type: \"fmt_year\",\n        message0: \"%{BKY_LEAPHY_YEAR} %{BKY_LEAPHY_WITH_FORMAT}\",\n        args0: [\n            {\n                type: \"field_dropdown\",\n                name: \"FMT\",\n                options: [\n                    [\"%{BKY_LEAPHY_FULL}\", \"full\"],\n                    [\"%{BKY_LEAPHY_2_DIGITS}\", \"2-digit\"],\n                ],\n            },\n        ],\n        inputsInline: true,\n        previousStatement: null,\n        nextStatement: null,\n        style: \"leaphy_blocks\",\n    },\n];\n\nexport { blocks };\n","import * as lists from \"./lists\";\nimport * as texts from \"./text\";\nimport * as leaphyCommon from \"./leaphy_common\";\nimport * as leaphyOriginal from \"./leaphy_original\";\nimport * as leaphyFlitz from \"./leaphy_flitz\";\nimport * as arduino from \"./arduino\";\nimport * as loops from \"./alternatives\";\nimport * as mesh from \"./mesh\";\nimport * as rtc from \"./rtc\";\n\nconst blocks = [\n    ...lists.blocks,\n    ...texts.blocks,\n    ...leaphyOriginal.blocks,\n    ...leaphyFlitz.blocks,\n    ...arduino.blocks,\n    ...loops.blocks,\n    ...leaphyCommon.blocks,\n    ...mesh.blocks,\n    ...rtc.blocks,\n];\n\nexport { blocks };\n","const defaultBlockStyles = {\n    leaphy_blocks: { colourPrimary: \"#06778f\", hat: \"cap\" },\n    loop_blocks: { colourPrimary: \"#D9B53F\" },\n    math_blocks: { colourPrimary: \"#75B342\" },\n    text_blocks: { colourPrimary: \"#75B342\" },\n    logic_blocks: { colourPrimary: \"#75B342\" },\n    variable_blocks: { colourPrimary: \"#DE7C3B\" },\n    list_blocks: { colourPrimary: \"#a500cf\" },\n    procedure_blocks: { colourPrimary: \"#4095CE\" },\n    mesh_blocks: { colourPrimary: \"#56cb9a\" },\n};\n\nconst categoryStyles = {\n    leaphy_category: { colour: \"#06778f\" },\n    situation_category: { colour: \"#D9B53F\" },\n    numbers_category: { colour: \"#75B342\" },\n    variables_category: { colour: \"#DE7C3B\" },\n    lists_category: { colour: \"#a500cf\" },\n    functions_category: { colour: \"#4095CE\" },\n    mesh_category: { colour: \"#56cb9a\" },\n};\n\nconst componentStyles = {\n    workspaceBackgroundColour: \"#E5E5E5\",\n    toolboxBackgroundColour: \"#343444\",\n    toolboxForegroundColour: \"#fff\",\n    flyoutBackgroundColour: \"#FFFFFF\",\n    flyoutForegroundColour: \"#ccc\",\n    flyoutOpacity: 1,\n};\n\nexport { defaultBlockStyles, categoryStyles, componentStyles };\n","import LISTS, { ListSerializer } from \"./lists.js\";\n\nexport { LISTS, ListSerializer };\n"],"mappings":"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","names":["messages","Blockly","block","getCodeGenerators","arduino_default","getCodeGenerators","getCodeGenerators","getCodeGenerators","getCodeGenerators","getCodeGenerators","Blockly","getCodeGenerators","Blockly","getCodeGenerators","getCodeGenerators","Blockly","getCodeGenerators","getCodeGenerators","lists_default","getCodeGenerators","block","getCodeGenerators","setters","types","type","code","arduino_default","lists_default","Blockly","option","blocks","blocks","blocks","blocks","blocks","blocks","blocks","blocks","blocks"]}